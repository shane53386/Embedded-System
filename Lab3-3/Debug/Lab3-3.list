
Lab3-3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d48  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08005ee8  08005ee8  00015ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006010  08006010  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006010  08006010  00016010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006018  08006018  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006018  08006018  00016018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800601c  0800601c  0001601c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006020  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000045b8  20000074  08006094  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000462c  08006094  0002462c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001039f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000276c  00000000  00000000  00030443  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ca8  00000000  00000000  00032bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b80  00000000  00000000  00033858  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000169fe  00000000  00000000  000343d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ad67  00000000  00000000  0004add6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d74f  00000000  00000000  00055b3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e328c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035a8  00000000  00000000  000e3308  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005ed0 	.word	0x08005ed0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005ed0 	.word	0x08005ed0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	4a07      	ldr	r2, [pc, #28]	; (80005bc <vApplicationGetIdleTaskMemory+0x2c>)
 80005a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	4a06      	ldr	r2, [pc, #24]	; (80005c0 <vApplicationGetIdleTaskMemory+0x30>)
 80005a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2280      	movs	r2, #128	; 0x80
 80005ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	20000090 	.word	0x20000090
 80005c0:	200000e4 	.word	0x200000e4

080005c4 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80005d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	4a06      	ldr	r2, [pc, #24]	; (80005f4 <vApplicationGetTimerTaskMemory+0x30>)
 80005da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005e2:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005e4:	bf00      	nop
 80005e6:	3714      	adds	r7, #20
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	200002e4 	.word	0x200002e4
 80005f4:	20000338 	.word	0x20000338

080005f8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005f8:	b5b0      	push	{r4, r5, r7, lr}
 80005fa:	b0a6      	sub	sp, #152	; 0x98
 80005fc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005fe:	f000 fb5b 	bl	8000cb8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000602:	f000 f889 	bl	8000718 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000606:	f000 f91b 	bl	8000840 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800060a:	f000 f8ef 	bl	80007ec <MX_USART2_UART_Init>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* definition and creation of myBinarySem01 */
	osSemaphoreDef(myBinarySem01);
 800060e:	2300      	movs	r3, #0
 8000610:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000614:	2300      	movs	r3, #0
 8000616:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 800061a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800061e:	2101      	movs	r1, #1
 8000620:	4618      	mov	r0, r3
 8000622:	f002 f809 	bl	8002638 <osSemaphoreCreate>
 8000626:	4602      	mov	r2, r0
 8000628:	4b30      	ldr	r3, [pc, #192]	; (80006ec <main+0xf4>)
 800062a:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of Task01 */
	osThreadDef(Task01, StartTask01, osPriorityNormal, 0, 128);
 800062c:	4b30      	ldr	r3, [pc, #192]	; (80006f0 <main+0xf8>)
 800062e:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000632:	461d      	mov	r5, r3
 8000634:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000636:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000638:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800063c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task01Handle = osThreadCreate(osThread(Task01), NULL);
 8000640:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f001 ff83 	bl	8002552 <osThreadCreate>
 800064c:	4602      	mov	r2, r0
 800064e:	4b29      	ldr	r3, [pc, #164]	; (80006f4 <main+0xfc>)
 8000650:	601a      	str	r2, [r3, #0]

	/* definition and creation of Task02 */
	osThreadDef(Task02, StartTask02, osPriorityNormal, 0, 128);
 8000652:	4b29      	ldr	r3, [pc, #164]	; (80006f8 <main+0x100>)
 8000654:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000658:	461d      	mov	r5, r3
 800065a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800065c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800065e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000662:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task02Handle = osThreadCreate(osThread(Task02), NULL);
 8000666:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f001 ff70 	bl	8002552 <osThreadCreate>
 8000672:	4602      	mov	r2, r0
 8000674:	4b21      	ldr	r3, [pc, #132]	; (80006fc <main+0x104>)
 8000676:	601a      	str	r2, [r3, #0]

	/* definition and creation of Task03 */
	osThreadDef(Task03, StartTask03, osPriorityNormal, 0, 128);
 8000678:	4b21      	ldr	r3, [pc, #132]	; (8000700 <main+0x108>)
 800067a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800067e:	461d      	mov	r5, r3
 8000680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000684:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000688:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task03Handle = osThreadCreate(osThread(Task03), NULL);
 800068c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f001 ff5d 	bl	8002552 <osThreadCreate>
 8000698:	4602      	mov	r2, r0
 800069a:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <main+0x10c>)
 800069c:	601a      	str	r2, [r3, #0]

	/* definition and creation of Task04 */
	osThreadDef(Task04, StartTask04, osPriorityNormal, 0, 128);
 800069e:	4b1a      	ldr	r3, [pc, #104]	; (8000708 <main+0x110>)
 80006a0:	f107 0420 	add.w	r4, r7, #32
 80006a4:	461d      	mov	r5, r3
 80006a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task04Handle = osThreadCreate(osThread(Task04), NULL);
 80006b2:	f107 0320 	add.w	r3, r7, #32
 80006b6:	2100      	movs	r1, #0
 80006b8:	4618      	mov	r0, r3
 80006ba:	f001 ff4a 	bl	8002552 <osThreadCreate>
 80006be:	4602      	mov	r2, r0
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <main+0x114>)
 80006c2:	601a      	str	r2, [r3, #0]

	/* definition and creation of Task05 */
	osThreadDef(Task05, StartTask05, osPriorityNormal, 0, 128);
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <main+0x118>)
 80006c6:	1d3c      	adds	r4, r7, #4
 80006c8:	461d      	mov	r5, r3
 80006ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task05Handle = osThreadCreate(osThread(Task05), NULL);
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 ff39 	bl	8002552 <osThreadCreate>
 80006e0:	4602      	mov	r2, r0
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <main+0x11c>)
 80006e4:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80006e6:	f001 ff2d 	bl	8002544 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80006ea:	e7fe      	b.n	80006ea <main+0xf2>
 80006ec:	20004598 	.word	0x20004598
 80006f0:	08005ef0 	.word	0x08005ef0
 80006f4:	20004594 	.word	0x20004594
 80006f8:	08005f14 	.word	0x08005f14
 80006fc:	2000458c 	.word	0x2000458c
 8000700:	08005f38 	.word	0x08005f38
 8000704:	2000459c 	.word	0x2000459c
 8000708:	08005f5c 	.word	0x08005f5c
 800070c:	20004590 	.word	0x20004590
 8000710:	08005f80 	.word	0x08005f80
 8000714:	200045a0 	.word	0x200045a0

08000718 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b094      	sub	sp, #80	; 0x50
 800071c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800071e:	f107 0320 	add.w	r3, r7, #32
 8000722:	2230      	movs	r2, #48	; 0x30
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f004 ffcd 	bl	80056c6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800073c:	2300      	movs	r3, #0
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	4b28      	ldr	r3, [pc, #160]	; (80007e4 <SystemClock_Config+0xcc>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000744:	4a27      	ldr	r2, [pc, #156]	; (80007e4 <SystemClock_Config+0xcc>)
 8000746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074a:	6413      	str	r3, [r2, #64]	; 0x40
 800074c:	4b25      	ldr	r3, [pc, #148]	; (80007e4 <SystemClock_Config+0xcc>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000758:	2300      	movs	r3, #0
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	4b22      	ldr	r3, [pc, #136]	; (80007e8 <SystemClock_Config+0xd0>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a21      	ldr	r2, [pc, #132]	; (80007e8 <SystemClock_Config+0xd0>)
 8000762:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000766:	6013      	str	r3, [r2, #0]
 8000768:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <SystemClock_Config+0xd0>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000774:	2302      	movs	r3, #2
 8000776:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000778:	2301      	movs	r3, #1
 800077a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800077c:	2310      	movs	r3, #16
 800077e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000780:	2302      	movs	r3, #2
 8000782:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000784:	2300      	movs	r3, #0
 8000786:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8000788:	2310      	movs	r3, #16
 800078a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 800078c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000790:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000792:	2304      	movs	r3, #4
 8000794:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000796:	2304      	movs	r3, #4
 8000798:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800079a:	f107 0320 	add.w	r3, r7, #32
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 fd98 	bl	80012d4 <HAL_RCC_OscConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0x96>
		Error_Handler();
 80007aa:	f000 f973 	bl	8000a94 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007ae:	230f      	movs	r3, #15
 80007b0:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b2:	2302      	movs	r3, #2
 80007b4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007be:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	2102      	movs	r1, #2
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 fff2 	bl	80017b4 <HAL_RCC_ClockConfig>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0xc2>
		Error_Handler();
 80007d6:	f000 f95d 	bl	8000a94 <Error_Handler>
	}
}
 80007da:	bf00      	nop
 80007dc:	3750      	adds	r7, #80	; 0x50
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40007000 	.word	0x40007000

080007ec <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 80007f2:	4a12      	ldr	r2, [pc, #72]	; (800083c <MX_USART2_UART_Init+0x50>)
 80007f4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 80007f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007fc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 8000812:	220c      	movs	r2, #12
 8000814:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_USART2_UART_Init+0x4c>)
 8000824:	f001 f9b8 	bl	8001b98 <HAL_UART_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800082e:	f000 f931 	bl	8000a94 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200045a4 	.word	0x200045a4
 800083c:	40004400 	.word	0x40004400

08000840 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	; 0x28
 8000844:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
 8000854:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
 800085a:	4b2d      	ldr	r3, [pc, #180]	; (8000910 <MX_GPIO_Init+0xd0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a2c      	ldr	r2, [pc, #176]	; (8000910 <MX_GPIO_Init+0xd0>)
 8000860:	f043 0304 	orr.w	r3, r3, #4
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b2a      	ldr	r3, [pc, #168]	; (8000910 <MX_GPIO_Init+0xd0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0304 	and.w	r3, r3, #4
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	4b26      	ldr	r3, [pc, #152]	; (8000910 <MX_GPIO_Init+0xd0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a25      	ldr	r2, [pc, #148]	; (8000910 <MX_GPIO_Init+0xd0>)
 800087c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b23      	ldr	r3, [pc, #140]	; (8000910 <MX_GPIO_Init+0xd0>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <MX_GPIO_Init+0xd0>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a1e      	ldr	r2, [pc, #120]	; (8000910 <MX_GPIO_Init+0xd0>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <MX_GPIO_Init+0xd0>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	4b18      	ldr	r3, [pc, #96]	; (8000910 <MX_GPIO_Init+0xd0>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a17      	ldr	r2, [pc, #92]	; (8000910 <MX_GPIO_Init+0xd0>)
 80008b4:	f043 0302 	orr.w	r3, r3, #2
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b15      	ldr	r3, [pc, #84]	; (8000910 <MX_GPIO_Init+0xd0>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2120      	movs	r1, #32
 80008ca:	4812      	ldr	r0, [pc, #72]	; (8000914 <MX_GPIO_Init+0xd4>)
 80008cc:	f000 fcce 	bl	800126c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80008d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <MX_GPIO_Init+0xd8>)
 80008d8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	4619      	mov	r1, r3
 80008e4:	480d      	ldr	r0, [pc, #52]	; (800091c <MX_GPIO_Init+0xdc>)
 80008e6:	f000 fb3f 	bl	8000f68 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80008ea:	2320      	movs	r3, #32
 80008ec:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4619      	mov	r1, r3
 8000900:	4804      	ldr	r0, [pc, #16]	; (8000914 <MX_GPIO_Init+0xd4>)
 8000902:	f000 fb31 	bl	8000f68 <HAL_GPIO_Init>

}
 8000906:	bf00      	nop
 8000908:	3728      	adds	r7, #40	; 0x28
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40023800 	.word	0x40023800
 8000914:	40020000 	.word	0x40020000
 8000918:	10210000 	.word	0x10210000
 800091c:	40020800 	.word	0x40020800

08000920 <StartTask01>:
 * @brief  Function implementing the Task01 thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask01 */
void StartTask01(void const *argument) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	char c = 'A';
 8000928:	2341      	movs	r3, #65	; 0x41
 800092a:	73fb      	strb	r3, [r7, #15]
	for (;;) {
		osSemaphoreWait(myBinarySem01Handle, 1);
 800092c:	4b0b      	ldr	r3, [pc, #44]	; (800095c <StartTask01+0x3c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2101      	movs	r1, #1
 8000932:	4618      	mov	r0, r3
 8000934:	f001 feb4 	bl	80026a0 <osSemaphoreWait>
		HAL_UART_Transmit(&huart2, (uint8_t*) &c, 1, 1000);
 8000938:	f107 010f 	add.w	r1, r7, #15
 800093c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000940:	2201      	movs	r2, #1
 8000942:	4807      	ldr	r0, [pc, #28]	; (8000960 <StartTask01+0x40>)
 8000944:	f001 f975 	bl	8001c32 <HAL_UART_Transmit>
		osDelay(50);
 8000948:	2032      	movs	r0, #50	; 0x32
 800094a:	f001 fe61 	bl	8002610 <osDelay>
		osSemaphoreRelease(myBinarySem01Handle);
 800094e:	4b03      	ldr	r3, [pc, #12]	; (800095c <StartTask01+0x3c>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4618      	mov	r0, r3
 8000954:	f001 fef2 	bl	800273c <osSemaphoreRelease>
		osSemaphoreWait(myBinarySem01Handle, 1);
 8000958:	e7e8      	b.n	800092c <StartTask01+0xc>
 800095a:	bf00      	nop
 800095c:	20004598 	.word	0x20004598
 8000960:	200045a4 	.word	0x200045a4

08000964 <StartTask02>:
 * @brief Function implementing the Task02 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void const *argument) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask02 */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800096c:	2120      	movs	r1, #32
 800096e:	4803      	ldr	r0, [pc, #12]	; (800097c <StartTask02+0x18>)
 8000970:	f000 fc95 	bl	800129e <HAL_GPIO_TogglePin>
		osDelay(18);
 8000974:	2012      	movs	r0, #18
 8000976:	f001 fe4b 	bl	8002610 <osDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800097a:	e7f7      	b.n	800096c <StartTask02+0x8>
 800097c:	40020000 	.word	0x40020000

08000980 <StartTask03>:
 * @brief Function implementing the Task03 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void const *argument) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask03 */
	/* Infinite loop */
	char c = 'B';
 8000988:	2342      	movs	r3, #66	; 0x42
 800098a:	73fb      	strb	r3, [r7, #15]
	for (;;) {
		osSemaphoreWait(myBinarySem01Handle, 1);
 800098c:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <StartTask03+0x3c>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2101      	movs	r1, #1
 8000992:	4618      	mov	r0, r3
 8000994:	f001 fe84 	bl	80026a0 <osSemaphoreWait>
		HAL_UART_Transmit(&huart2, (uint8_t*) &c, 1, 1000);
 8000998:	f107 010f 	add.w	r1, r7, #15
 800099c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a0:	2201      	movs	r2, #1
 80009a2:	4807      	ldr	r0, [pc, #28]	; (80009c0 <StartTask03+0x40>)
 80009a4:	f001 f945 	bl	8001c32 <HAL_UART_Transmit>
		osDelay(128);
 80009a8:	2080      	movs	r0, #128	; 0x80
 80009aa:	f001 fe31 	bl	8002610 <osDelay>
		osSemaphoreRelease(myBinarySem01Handle);
 80009ae:	4b03      	ldr	r3, [pc, #12]	; (80009bc <StartTask03+0x3c>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4618      	mov	r0, r3
 80009b4:	f001 fec2 	bl	800273c <osSemaphoreRelease>
		osSemaphoreWait(myBinarySem01Handle, 1);
 80009b8:	e7e8      	b.n	800098c <StartTask03+0xc>
 80009ba:	bf00      	nop
 80009bc:	20004598 	.word	0x20004598
 80009c0:	200045a4 	.word	0x200045a4

080009c4 <StartTask04>:
 * @brief Function implementing the Task04 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask04 */
void StartTask04(void const *argument) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08c      	sub	sp, #48	; 0x30
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask04 */
	/* Infinite loop */
	int threadID = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
	int idx = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	char buffer[32];
	while (1) {
		osSemaphoreWait(myBinarySem01Handle, 1);
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <StartTask04+0x5c>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2101      	movs	r1, #1
 80009da:	4618      	mov	r0, r3
 80009dc:	f001 fe60 	bl	80026a0 <osSemaphoreWait>
		sprintf(buffer, "TID: %d %d\r\n", threadID, idx);
 80009e0:	f107 0008 	add.w	r0, r7, #8
 80009e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009e8:	490e      	ldr	r1, [pc, #56]	; (8000a24 <StartTask04+0x60>)
 80009ea:	f004 fe75 	bl	80056d8 <siprintf>
		idx++;
 80009ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009f0:	3301      	adds	r3, #1
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
 80009f4:	f107 0308 	add.w	r3, r7, #8
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fbf1 	bl	80001e0 <strlen>
 80009fe:	4603      	mov	r3, r0
 8000a00:	b29a      	uxth	r2, r3
 8000a02:	f107 0108 	add.w	r1, r7, #8
 8000a06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a0a:	4807      	ldr	r0, [pc, #28]	; (8000a28 <StartTask04+0x64>)
 8000a0c:	f001 f911 	bl	8001c32 <HAL_UART_Transmit>
		osSemaphoreRelease(myBinarySem01Handle);
 8000a10:	4b03      	ldr	r3, [pc, #12]	; (8000a20 <StartTask04+0x5c>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4618      	mov	r0, r3
 8000a16:	f001 fe91 	bl	800273c <osSemaphoreRelease>
		osThreadYield();
 8000a1a:	f001 fde7 	bl	80025ec <osThreadYield>
	while (1) {
 8000a1e:	e7d9      	b.n	80009d4 <StartTask04+0x10>
 8000a20:	20004598 	.word	0x20004598
 8000a24:	08005f9c 	.word	0x08005f9c
 8000a28:	200045a4 	.word	0x200045a4

08000a2c <StartTask05>:
 * @brief Function implementing the Task05 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask05 */
void StartTask05(void const *argument) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08c      	sub	sp, #48	; 0x30
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask05 */
	/* Infinite loop */
	int threadID = 1;
 8000a34:	2301      	movs	r3, #1
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
	int idx = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	char buffer[32];
	while (1) {
		osSemaphoreWait(myBinarySem01Handle, 1);
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <StartTask05+0x5c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2101      	movs	r1, #1
 8000a42:	4618      	mov	r0, r3
 8000a44:	f001 fe2c 	bl	80026a0 <osSemaphoreWait>
		sprintf(buffer, "TID: %d %d\r\n", threadID, idx);
 8000a48:	f107 0008 	add.w	r0, r7, #8
 8000a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a50:	490e      	ldr	r1, [pc, #56]	; (8000a8c <StartTask05+0x60>)
 8000a52:	f004 fe41 	bl	80056d8 <siprintf>
		idx++;
 8000a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a58:	3301      	adds	r3, #1
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
 8000a5c:	f107 0308 	add.w	r3, r7, #8
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fbbd 	bl	80001e0 <strlen>
 8000a66:	4603      	mov	r3, r0
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	f107 0108 	add.w	r1, r7, #8
 8000a6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a72:	4807      	ldr	r0, [pc, #28]	; (8000a90 <StartTask05+0x64>)
 8000a74:	f001 f8dd 	bl	8001c32 <HAL_UART_Transmit>
		osSemaphoreRelease(myBinarySem01Handle);
 8000a78:	4b03      	ldr	r3, [pc, #12]	; (8000a88 <StartTask05+0x5c>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f001 fe5d 	bl	800273c <osSemaphoreRelease>
		osThreadYield();
 8000a82:	f001 fdb3 	bl	80025ec <osThreadYield>
	while (1) {
 8000a86:	e7d9      	b.n	8000a3c <StartTask05+0x10>
 8000a88:	20004598 	.word	0x20004598
 8000a8c:	08005f9c 	.word	0x08005f9c
 8000a90:	200045a4 	.word	0x200045a4

08000a94 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a98:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a9a:	e7fe      	b.n	8000a9a <Error_Handler+0x6>

08000a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <HAL_MspInit+0x54>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	4a11      	ldr	r2, [pc, #68]	; (8000af0 <HAL_MspInit+0x54>)
 8000aac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <HAL_MspInit+0x54>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	603b      	str	r3, [r7, #0]
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <HAL_MspInit+0x54>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <HAL_MspInit+0x54>)
 8000ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000acc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <HAL_MspInit+0x54>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	210f      	movs	r1, #15
 8000ade:	f06f 0001 	mvn.w	r0, #1
 8000ae2:	f000 fa18 	bl	8000f16 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40023800 	.word	0x40023800

08000af4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	; 0x28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a19      	ldr	r2, [pc, #100]	; (8000b78 <HAL_UART_MspInit+0x84>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d12b      	bne.n	8000b6e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <HAL_UART_MspInit+0x88>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	4a17      	ldr	r2, [pc, #92]	; (8000b7c <HAL_UART_MspInit+0x88>)
 8000b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b24:	6413      	str	r3, [r2, #64]	; 0x40
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <HAL_UART_MspInit+0x88>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <HAL_UART_MspInit+0x88>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a10      	ldr	r2, [pc, #64]	; (8000b7c <HAL_UART_MspInit+0x88>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <HAL_UART_MspInit+0x88>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b4e:	230c      	movs	r3, #12
 8000b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2302      	movs	r3, #2
 8000b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b5e:	2307      	movs	r3, #7
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	4805      	ldr	r0, [pc, #20]	; (8000b80 <HAL_UART_MspInit+0x8c>)
 8000b6a:	f000 f9fd 	bl	8000f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b6e:	bf00      	nop
 8000b70:	3728      	adds	r7, #40	; 0x28
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40004400 	.word	0x40004400
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020000 	.word	0x40020000

08000b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <NMI_Handler+0x4>

08000b8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <HardFault_Handler+0x4>

08000b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <MemManage_Handler+0x4>

08000b96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <BusFault_Handler+0x4>

08000b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <UsageFault_Handler+0x4>

08000ba2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb4:	f000 f8d2 	bl	8000d5c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000bb8:	f003 fbda 	bl	8004370 <xTaskGetSchedulerState>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d001      	beq.n	8000bc6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000bc2:	f004 fae9 	bl	8005198 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd4:	4a14      	ldr	r2, [pc, #80]	; (8000c28 <_sbrk+0x5c>)
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <_sbrk+0x60>)
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be0:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <_sbrk+0x64>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d102      	bne.n	8000bee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <_sbrk+0x64>)
 8000bea:	4a12      	ldr	r2, [pc, #72]	; (8000c34 <_sbrk+0x68>)
 8000bec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <_sbrk+0x64>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d207      	bcs.n	8000c0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bfc:	f004 fd2e 	bl	800565c <__errno>
 8000c00:	4602      	mov	r2, r0
 8000c02:	230c      	movs	r3, #12
 8000c04:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0a:	e009      	b.n	8000c20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <_sbrk+0x64>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c12:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <_sbrk+0x64>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	4a05      	ldr	r2, [pc, #20]	; (8000c30 <_sbrk+0x64>)
 8000c1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20020000 	.word	0x20020000
 8000c2c:	00000400 	.word	0x00000400
 8000c30:	20000738 	.word	0x20000738
 8000c34:	20004630 	.word	0x20004630

08000c38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c3c:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <SystemInit+0x28>)
 8000c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c42:	4a07      	ldr	r2, [pc, #28]	; (8000c60 <SystemInit+0x28>)
 8000c44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c4c:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <SystemInit+0x28>)
 8000c4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c52:	609a      	str	r2, [r3, #8]
#endif
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c9c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c6a:	e003      	b.n	8000c74 <LoopCopyDataInit>

08000c6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c72:	3104      	adds	r1, #4

08000c74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c74:	480b      	ldr	r0, [pc, #44]	; (8000ca4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c76:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c7c:	d3f6      	bcc.n	8000c6c <CopyDataInit>
  ldr  r2, =_sbss
 8000c7e:	4a0b      	ldr	r2, [pc, #44]	; (8000cac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c80:	e002      	b.n	8000c88 <LoopFillZerobss>

08000c82 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c82:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c84:	f842 3b04 	str.w	r3, [r2], #4

08000c88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c88:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c8c:	d3f9      	bcc.n	8000c82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c8e:	f7ff ffd3 	bl	8000c38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c92:	f004 fce9 	bl	8005668 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c96:	f7ff fcaf 	bl	80005f8 <main>
  bx  lr    
 8000c9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c9c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ca0:	08006020 	.word	0x08006020
  ldr  r0, =_sdata
 8000ca4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ca8:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000cac:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000cb0:	2000462c 	.word	0x2000462c

08000cb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb4:	e7fe      	b.n	8000cb4 <ADC_IRQHandler>
	...

08000cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cbc:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <HAL_Init+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0d      	ldr	r2, [pc, #52]	; (8000cf8 <HAL_Init+0x40>)
 8000cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cc8:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <HAL_Init+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <HAL_Init+0x40>)
 8000cce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <HAL_Init+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a07      	ldr	r2, [pc, #28]	; (8000cf8 <HAL_Init+0x40>)
 8000cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce0:	2003      	movs	r0, #3
 8000ce2:	f000 f90d 	bl	8000f00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce6:	200f      	movs	r0, #15
 8000ce8:	f000 f808 	bl	8000cfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cec:	f7ff fed6 	bl	8000a9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023c00 	.word	0x40023c00

08000cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <HAL_InitTick+0x54>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <HAL_InitTick+0x58>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 f917 	bl	8000f4e <HAL_SYSTICK_Config>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e00e      	b.n	8000d48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2b0f      	cmp	r3, #15
 8000d2e:	d80a      	bhi.n	8000d46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d30:	2200      	movs	r2, #0
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295
 8000d38:	f000 f8ed 	bl	8000f16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d3c:	4a06      	ldr	r2, [pc, #24]	; (8000d58 <HAL_InitTick+0x5c>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d42:	2300      	movs	r3, #0
 8000d44:	e000      	b.n	8000d48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000000 	.word	0x20000000
 8000d54:	20000008 	.word	0x20000008
 8000d58:	20000004 	.word	0x20000004

08000d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_IncTick+0x20>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_IncTick+0x24>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	4a04      	ldr	r2, [pc, #16]	; (8000d80 <HAL_IncTick+0x24>)
 8000d6e:	6013      	str	r3, [r2, #0]
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000008 	.word	0x20000008
 8000d80:	200045e4 	.word	0x200045e4

08000d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return uwTick;
 8000d88:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <HAL_GetTick+0x14>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	200045e4 	.word	0x200045e4

08000d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000db8:	4013      	ands	r3, r2
 8000dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dce:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	60d3      	str	r3, [r2, #12]
}
 8000dd4:	bf00      	nop
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de8:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <__NVIC_GetPriorityGrouping+0x18>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	0a1b      	lsrs	r3, r3, #8
 8000dee:	f003 0307 	and.w	r3, r3, #7
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	6039      	str	r1, [r7, #0]
 8000e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	db0a      	blt.n	8000e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	490c      	ldr	r1, [pc, #48]	; (8000e4c <__NVIC_SetPriority+0x4c>)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	0112      	lsls	r2, r2, #4
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	440b      	add	r3, r1
 8000e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e28:	e00a      	b.n	8000e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4908      	ldr	r1, [pc, #32]	; (8000e50 <__NVIC_SetPriority+0x50>)
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	f003 030f 	and.w	r3, r3, #15
 8000e36:	3b04      	subs	r3, #4
 8000e38:	0112      	lsls	r2, r2, #4
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	761a      	strb	r2, [r3, #24]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000e100 	.word	0xe000e100
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	; 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f1c3 0307 	rsb	r3, r3, #7
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	bf28      	it	cs
 8000e72:	2304      	movcs	r3, #4
 8000e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	2b06      	cmp	r3, #6
 8000e7c:	d902      	bls.n	8000e84 <NVIC_EncodePriority+0x30>
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3b03      	subs	r3, #3
 8000e82:	e000      	b.n	8000e86 <NVIC_EncodePriority+0x32>
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	f04f 32ff 	mov.w	r2, #4294967295
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43da      	mvns	r2, r3
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	401a      	ands	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	43d9      	mvns	r1, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	4313      	orrs	r3, r2
         );
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3724      	adds	r7, #36	; 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
	...

08000ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ecc:	d301      	bcc.n	8000ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e00f      	b.n	8000ef2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	; (8000efc <SysTick_Config+0x40>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eda:	210f      	movs	r1, #15
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee0:	f7ff ff8e 	bl	8000e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <SysTick_Config+0x40>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eea:	4b04      	ldr	r3, [pc, #16]	; (8000efc <SysTick_Config+0x40>)
 8000eec:	2207      	movs	r2, #7
 8000eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	e000e010 	.word	0xe000e010

08000f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff ff47 	bl	8000d9c <__NVIC_SetPriorityGrouping>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b086      	sub	sp, #24
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	60b9      	str	r1, [r7, #8]
 8000f20:	607a      	str	r2, [r7, #4]
 8000f22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f28:	f7ff ff5c 	bl	8000de4 <__NVIC_GetPriorityGrouping>
 8000f2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	68b9      	ldr	r1, [r7, #8]
 8000f32:	6978      	ldr	r0, [r7, #20]
 8000f34:	f7ff ff8e 	bl	8000e54 <NVIC_EncodePriority>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3e:	4611      	mov	r1, r2
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ff5d 	bl	8000e00 <__NVIC_SetPriority>
}
 8000f46:	bf00      	nop
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff ffb0 	bl	8000ebc <SysTick_Config>
 8000f5c:	4603      	mov	r3, r0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b089      	sub	sp, #36	; 0x24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
 8000f82:	e159      	b.n	8001238 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f84:	2201      	movs	r2, #1
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	697a      	ldr	r2, [r7, #20]
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	f040 8148 	bne.w	8001232 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d00b      	beq.n	8000fc2 <HAL_GPIO_Init+0x5a>
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d007      	beq.n	8000fc2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fb6:	2b11      	cmp	r3, #17
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	2b12      	cmp	r3, #18
 8000fc0:	d130      	bne.n	8001024 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	2203      	movs	r2, #3
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	68da      	ldr	r2, [r3, #12]
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	091b      	lsrs	r3, r3, #4
 800100e:	f003 0201 	and.w	r2, r3, #1
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	2203      	movs	r2, #3
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	2b02      	cmp	r3, #2
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0xfc>
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	2b12      	cmp	r3, #18
 8001062:	d123      	bne.n	80010ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	08da      	lsrs	r2, r3, #3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3208      	adds	r2, #8
 800106c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001070:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	f003 0307 	and.w	r3, r3, #7
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	220f      	movs	r2, #15
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	691a      	ldr	r2, [r3, #16]
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	08da      	lsrs	r2, r3, #3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3208      	adds	r2, #8
 80010a6:	69b9      	ldr	r1, [r7, #24]
 80010a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	2203      	movs	r2, #3
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 0203 	and.w	r2, r3, #3
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f000 80a2 	beq.w	8001232 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	4b56      	ldr	r3, [pc, #344]	; (800124c <HAL_GPIO_Init+0x2e4>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	4a55      	ldr	r2, [pc, #340]	; (800124c <HAL_GPIO_Init+0x2e4>)
 80010f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010fc:	6453      	str	r3, [r2, #68]	; 0x44
 80010fe:	4b53      	ldr	r3, [pc, #332]	; (800124c <HAL_GPIO_Init+0x2e4>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800110a:	4a51      	ldr	r2, [pc, #324]	; (8001250 <HAL_GPIO_Init+0x2e8>)
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	089b      	lsrs	r3, r3, #2
 8001110:	3302      	adds	r3, #2
 8001112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001116:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f003 0303 	and.w	r3, r3, #3
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	220f      	movs	r2, #15
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4013      	ands	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a48      	ldr	r2, [pc, #288]	; (8001254 <HAL_GPIO_Init+0x2ec>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d019      	beq.n	800116a <HAL_GPIO_Init+0x202>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a47      	ldr	r2, [pc, #284]	; (8001258 <HAL_GPIO_Init+0x2f0>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d013      	beq.n	8001166 <HAL_GPIO_Init+0x1fe>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a46      	ldr	r2, [pc, #280]	; (800125c <HAL_GPIO_Init+0x2f4>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d00d      	beq.n	8001162 <HAL_GPIO_Init+0x1fa>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a45      	ldr	r2, [pc, #276]	; (8001260 <HAL_GPIO_Init+0x2f8>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d007      	beq.n	800115e <HAL_GPIO_Init+0x1f6>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a44      	ldr	r2, [pc, #272]	; (8001264 <HAL_GPIO_Init+0x2fc>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d101      	bne.n	800115a <HAL_GPIO_Init+0x1f2>
 8001156:	2304      	movs	r3, #4
 8001158:	e008      	b.n	800116c <HAL_GPIO_Init+0x204>
 800115a:	2307      	movs	r3, #7
 800115c:	e006      	b.n	800116c <HAL_GPIO_Init+0x204>
 800115e:	2303      	movs	r3, #3
 8001160:	e004      	b.n	800116c <HAL_GPIO_Init+0x204>
 8001162:	2302      	movs	r3, #2
 8001164:	e002      	b.n	800116c <HAL_GPIO_Init+0x204>
 8001166:	2301      	movs	r3, #1
 8001168:	e000      	b.n	800116c <HAL_GPIO_Init+0x204>
 800116a:	2300      	movs	r3, #0
 800116c:	69fa      	ldr	r2, [r7, #28]
 800116e:	f002 0203 	and.w	r2, r2, #3
 8001172:	0092      	lsls	r2, r2, #2
 8001174:	4093      	lsls	r3, r2
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4313      	orrs	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800117c:	4934      	ldr	r1, [pc, #208]	; (8001250 <HAL_GPIO_Init+0x2e8>)
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	089b      	lsrs	r3, r3, #2
 8001182:	3302      	adds	r3, #2
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800118a:	4b37      	ldr	r3, [pc, #220]	; (8001268 <HAL_GPIO_Init+0x300>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	43db      	mvns	r3, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011ae:	4a2e      	ldr	r2, [pc, #184]	; (8001268 <HAL_GPIO_Init+0x300>)
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011b4:	4b2c      	ldr	r3, [pc, #176]	; (8001268 <HAL_GPIO_Init+0x300>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011d8:	4a23      	ldr	r2, [pc, #140]	; (8001268 <HAL_GPIO_Init+0x300>)
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011de:	4b22      	ldr	r3, [pc, #136]	; (8001268 <HAL_GPIO_Init+0x300>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001202:	4a19      	ldr	r2, [pc, #100]	; (8001268 <HAL_GPIO_Init+0x300>)
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001208:	4b17      	ldr	r3, [pc, #92]	; (8001268 <HAL_GPIO_Init+0x300>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800122c:	4a0e      	ldr	r2, [pc, #56]	; (8001268 <HAL_GPIO_Init+0x300>)
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3301      	adds	r3, #1
 8001236:	61fb      	str	r3, [r7, #28]
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	2b0f      	cmp	r3, #15
 800123c:	f67f aea2 	bls.w	8000f84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001240:	bf00      	nop
 8001242:	3724      	adds	r7, #36	; 0x24
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	40023800 	.word	0x40023800
 8001250:	40013800 	.word	0x40013800
 8001254:	40020000 	.word	0x40020000
 8001258:	40020400 	.word	0x40020400
 800125c:	40020800 	.word	0x40020800
 8001260:	40020c00 	.word	0x40020c00
 8001264:	40021000 	.word	0x40021000
 8001268:	40013c00 	.word	0x40013c00

0800126c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	807b      	strh	r3, [r7, #2]
 8001278:	4613      	mov	r3, r2
 800127a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800127c:	787b      	ldrb	r3, [r7, #1]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001282:	887a      	ldrh	r2, [r7, #2]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001288:	e003      	b.n	8001292 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800128a:	887b      	ldrh	r3, [r7, #2]
 800128c:	041a      	lsls	r2, r3, #16
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	619a      	str	r2, [r3, #24]
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800129e:	b480      	push	{r7}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
 80012a6:	460b      	mov	r3, r1
 80012a8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	695a      	ldr	r2, [r3, #20]
 80012ae:	887b      	ldrh	r3, [r7, #2]
 80012b0:	401a      	ands	r2, r3
 80012b2:	887b      	ldrh	r3, [r7, #2]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d104      	bne.n	80012c2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80012b8:	887b      	ldrh	r3, [r7, #2]
 80012ba:	041a      	lsls	r2, r3, #16
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80012c0:	e002      	b.n	80012c8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80012c2:	887a      	ldrh	r2, [r7, #2]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	619a      	str	r2, [r3, #24]
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d101      	bne.n	80012e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e25b      	b.n	800179e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d075      	beq.n	80013de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012f2:	4ba3      	ldr	r3, [pc, #652]	; (8001580 <HAL_RCC_OscConfig+0x2ac>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 030c 	and.w	r3, r3, #12
 80012fa:	2b04      	cmp	r3, #4
 80012fc:	d00c      	beq.n	8001318 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012fe:	4ba0      	ldr	r3, [pc, #640]	; (8001580 <HAL_RCC_OscConfig+0x2ac>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001306:	2b08      	cmp	r3, #8
 8001308:	d112      	bne.n	8001330 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800130a:	4b9d      	ldr	r3, [pc, #628]	; (8001580 <HAL_RCC_OscConfig+0x2ac>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001312:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001316:	d10b      	bne.n	8001330 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001318:	4b99      	ldr	r3, [pc, #612]	; (8001580 <HAL_RCC_OscConfig+0x2ac>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d05b      	beq.n	80013dc <HAL_RCC_OscConfig+0x108>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d157      	bne.n	80013dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e236      	b.n	800179e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001338:	d106      	bne.n	8001348 <HAL_RCC_OscConfig+0x74>
 800133a:	4b91      	ldr	r3, [pc, #580]	; (8001580 <HAL_RCC_OscConfig+0x2ac>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a90      	ldr	r2, [pc, #576]	; (8001580 <HAL_RCC_OscConfig+0x2ac>)
 8001340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	e01d      	b.n	8001384 <HAL_RCC_OscConfig+0xb0>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001350:	d10c      	bne.n	800136c <HAL_RCC_OscConfig+0x98>
 8001352:	4b8b      	ldr	r3, [pc, #556]	; (8001580 <HAL_RCC_OscConfig+0x2ac>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a8a      	ldr	r2, [pc, #552]	; (8001580 <HAL_RCC_OscConfig+0x2ac>)
 8001358:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	4b88      	ldr	r3, [pc, #544]	; (8001580 <HAL_RCC_OscConfig+0x2ac>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a87      	ldr	r2, [pc, #540]	; (8001580 <HAL_RCC_OscConfig+0x2ac>)
 8001364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001368:	6013      	str	r3, [r2, #0]
 800136a:	e00b      	b.n	8001384 <HAL_RCC_OscConfig+0xb0>
 800136c:	4b84      	ldr	r3, [pc, #528]	; (8001580 <HAL_RCC_OscConfig+0x2ac>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a83      	ldr	r2, [pc, #524]	; (8001580 <HAL_RCC_OscConfig+0x2ac>)
 8001372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	4b81      	ldr	r3, [pc, #516]	; (8001580 <HAL_RCC_OscConfig+0x2ac>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a80      	ldr	r2, [pc, #512]	; (8001580 <HAL_RCC_OscConfig+0x2ac>)
 800137e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001382:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d013      	beq.n	80013b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138c:	f7ff fcfa 	bl	8000d84 <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001394:	f7ff fcf6 	bl	8000d84 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b64      	cmp	r3, #100	; 0x64
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e1fb      	b.n	800179e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013a6:	4b76      	ldr	r3, [pc, #472]	; (8001580 <HAL_RCC_OscConfig+0x2ac>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0f0      	beq.n	8001394 <HAL_RCC_OscConfig+0xc0>
 80013b2:	e014      	b.n	80013de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b4:	f7ff fce6 	bl	8000d84 <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013bc:	f7ff fce2 	bl	8000d84 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b64      	cmp	r3, #100	; 0x64
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e1e7      	b.n	800179e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ce:	4b6c      	ldr	r3, [pc, #432]	; (8001580 <HAL_RCC_OscConfig+0x2ac>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1f0      	bne.n	80013bc <HAL_RCC_OscConfig+0xe8>
 80013da:	e000      	b.n	80013de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d063      	beq.n	80014b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ea:	4b65      	ldr	r3, [pc, #404]	; (8001580 <HAL_RCC_OscConfig+0x2ac>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f003 030c 	and.w	r3, r3, #12
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d00b      	beq.n	800140e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013f6:	4b62      	ldr	r3, [pc, #392]	; (8001580 <HAL_RCC_OscConfig+0x2ac>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013fe:	2b08      	cmp	r3, #8
 8001400:	d11c      	bne.n	800143c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001402:	4b5f      	ldr	r3, [pc, #380]	; (8001580 <HAL_RCC_OscConfig+0x2ac>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d116      	bne.n	800143c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140e:	4b5c      	ldr	r3, [pc, #368]	; (8001580 <HAL_RCC_OscConfig+0x2ac>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d005      	beq.n	8001426 <HAL_RCC_OscConfig+0x152>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d001      	beq.n	8001426 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e1bb      	b.n	800179e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001426:	4b56      	ldr	r3, [pc, #344]	; (8001580 <HAL_RCC_OscConfig+0x2ac>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	4952      	ldr	r1, [pc, #328]	; (8001580 <HAL_RCC_OscConfig+0x2ac>)
 8001436:	4313      	orrs	r3, r2
 8001438:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800143a:	e03a      	b.n	80014b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d020      	beq.n	8001486 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001444:	4b4f      	ldr	r3, [pc, #316]	; (8001584 <HAL_RCC_OscConfig+0x2b0>)
 8001446:	2201      	movs	r2, #1
 8001448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144a:	f7ff fc9b 	bl	8000d84 <HAL_GetTick>
 800144e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001450:	e008      	b.n	8001464 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001452:	f7ff fc97 	bl	8000d84 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e19c      	b.n	800179e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001464:	4b46      	ldr	r3, [pc, #280]	; (8001580 <HAL_RCC_OscConfig+0x2ac>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d0f0      	beq.n	8001452 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001470:	4b43      	ldr	r3, [pc, #268]	; (8001580 <HAL_RCC_OscConfig+0x2ac>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	691b      	ldr	r3, [r3, #16]
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	4940      	ldr	r1, [pc, #256]	; (8001580 <HAL_RCC_OscConfig+0x2ac>)
 8001480:	4313      	orrs	r3, r2
 8001482:	600b      	str	r3, [r1, #0]
 8001484:	e015      	b.n	80014b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001486:	4b3f      	ldr	r3, [pc, #252]	; (8001584 <HAL_RCC_OscConfig+0x2b0>)
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148c:	f7ff fc7a 	bl	8000d84 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001494:	f7ff fc76 	bl	8000d84 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e17b      	b.n	800179e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a6:	4b36      	ldr	r3, [pc, #216]	; (8001580 <HAL_RCC_OscConfig+0x2ac>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1f0      	bne.n	8001494 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0308 	and.w	r3, r3, #8
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d030      	beq.n	8001520 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d016      	beq.n	80014f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014c6:	4b30      	ldr	r3, [pc, #192]	; (8001588 <HAL_RCC_OscConfig+0x2b4>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014cc:	f7ff fc5a 	bl	8000d84 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014d4:	f7ff fc56 	bl	8000d84 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e15b      	b.n	800179e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014e6:	4b26      	ldr	r3, [pc, #152]	; (8001580 <HAL_RCC_OscConfig+0x2ac>)
 80014e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0f0      	beq.n	80014d4 <HAL_RCC_OscConfig+0x200>
 80014f2:	e015      	b.n	8001520 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014f4:	4b24      	ldr	r3, [pc, #144]	; (8001588 <HAL_RCC_OscConfig+0x2b4>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014fa:	f7ff fc43 	bl	8000d84 <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001502:	f7ff fc3f 	bl	8000d84 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e144      	b.n	800179e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001514:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <HAL_RCC_OscConfig+0x2ac>)
 8001516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d1f0      	bne.n	8001502 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 80a0 	beq.w	800166e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800152e:	2300      	movs	r3, #0
 8001530:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001532:	4b13      	ldr	r3, [pc, #76]	; (8001580 <HAL_RCC_OscConfig+0x2ac>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d10f      	bne.n	800155e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <HAL_RCC_OscConfig+0x2ac>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	4a0e      	ldr	r2, [pc, #56]	; (8001580 <HAL_RCC_OscConfig+0x2ac>)
 8001548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800154c:	6413      	str	r3, [r2, #64]	; 0x40
 800154e:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <HAL_RCC_OscConfig+0x2ac>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800155a:	2301      	movs	r3, #1
 800155c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155e:	4b0b      	ldr	r3, [pc, #44]	; (800158c <HAL_RCC_OscConfig+0x2b8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001566:	2b00      	cmp	r3, #0
 8001568:	d121      	bne.n	80015ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <HAL_RCC_OscConfig+0x2b8>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a07      	ldr	r2, [pc, #28]	; (800158c <HAL_RCC_OscConfig+0x2b8>)
 8001570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001574:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001576:	f7ff fc05 	bl	8000d84 <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157c:	e011      	b.n	80015a2 <HAL_RCC_OscConfig+0x2ce>
 800157e:	bf00      	nop
 8001580:	40023800 	.word	0x40023800
 8001584:	42470000 	.word	0x42470000
 8001588:	42470e80 	.word	0x42470e80
 800158c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001590:	f7ff fbf8 	bl	8000d84 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e0fd      	b.n	800179e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a2:	4b81      	ldr	r3, [pc, #516]	; (80017a8 <HAL_RCC_OscConfig+0x4d4>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0f0      	beq.n	8001590 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d106      	bne.n	80015c4 <HAL_RCC_OscConfig+0x2f0>
 80015b6:	4b7d      	ldr	r3, [pc, #500]	; (80017ac <HAL_RCC_OscConfig+0x4d8>)
 80015b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ba:	4a7c      	ldr	r2, [pc, #496]	; (80017ac <HAL_RCC_OscConfig+0x4d8>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6713      	str	r3, [r2, #112]	; 0x70
 80015c2:	e01c      	b.n	80015fe <HAL_RCC_OscConfig+0x32a>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	2b05      	cmp	r3, #5
 80015ca:	d10c      	bne.n	80015e6 <HAL_RCC_OscConfig+0x312>
 80015cc:	4b77      	ldr	r3, [pc, #476]	; (80017ac <HAL_RCC_OscConfig+0x4d8>)
 80015ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d0:	4a76      	ldr	r2, [pc, #472]	; (80017ac <HAL_RCC_OscConfig+0x4d8>)
 80015d2:	f043 0304 	orr.w	r3, r3, #4
 80015d6:	6713      	str	r3, [r2, #112]	; 0x70
 80015d8:	4b74      	ldr	r3, [pc, #464]	; (80017ac <HAL_RCC_OscConfig+0x4d8>)
 80015da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015dc:	4a73      	ldr	r2, [pc, #460]	; (80017ac <HAL_RCC_OscConfig+0x4d8>)
 80015de:	f043 0301 	orr.w	r3, r3, #1
 80015e2:	6713      	str	r3, [r2, #112]	; 0x70
 80015e4:	e00b      	b.n	80015fe <HAL_RCC_OscConfig+0x32a>
 80015e6:	4b71      	ldr	r3, [pc, #452]	; (80017ac <HAL_RCC_OscConfig+0x4d8>)
 80015e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ea:	4a70      	ldr	r2, [pc, #448]	; (80017ac <HAL_RCC_OscConfig+0x4d8>)
 80015ec:	f023 0301 	bic.w	r3, r3, #1
 80015f0:	6713      	str	r3, [r2, #112]	; 0x70
 80015f2:	4b6e      	ldr	r3, [pc, #440]	; (80017ac <HAL_RCC_OscConfig+0x4d8>)
 80015f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f6:	4a6d      	ldr	r2, [pc, #436]	; (80017ac <HAL_RCC_OscConfig+0x4d8>)
 80015f8:	f023 0304 	bic.w	r3, r3, #4
 80015fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d015      	beq.n	8001632 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001606:	f7ff fbbd 	bl	8000d84 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800160c:	e00a      	b.n	8001624 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800160e:	f7ff fbb9 	bl	8000d84 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	f241 3288 	movw	r2, #5000	; 0x1388
 800161c:	4293      	cmp	r3, r2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e0bc      	b.n	800179e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001624:	4b61      	ldr	r3, [pc, #388]	; (80017ac <HAL_RCC_OscConfig+0x4d8>)
 8001626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0ee      	beq.n	800160e <HAL_RCC_OscConfig+0x33a>
 8001630:	e014      	b.n	800165c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001632:	f7ff fba7 	bl	8000d84 <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001638:	e00a      	b.n	8001650 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800163a:	f7ff fba3 	bl	8000d84 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	f241 3288 	movw	r2, #5000	; 0x1388
 8001648:	4293      	cmp	r3, r2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e0a6      	b.n	800179e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001650:	4b56      	ldr	r3, [pc, #344]	; (80017ac <HAL_RCC_OscConfig+0x4d8>)
 8001652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d1ee      	bne.n	800163a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800165c:	7dfb      	ldrb	r3, [r7, #23]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d105      	bne.n	800166e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001662:	4b52      	ldr	r3, [pc, #328]	; (80017ac <HAL_RCC_OscConfig+0x4d8>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	4a51      	ldr	r2, [pc, #324]	; (80017ac <HAL_RCC_OscConfig+0x4d8>)
 8001668:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800166c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	2b00      	cmp	r3, #0
 8001674:	f000 8092 	beq.w	800179c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001678:	4b4c      	ldr	r3, [pc, #304]	; (80017ac <HAL_RCC_OscConfig+0x4d8>)
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f003 030c 	and.w	r3, r3, #12
 8001680:	2b08      	cmp	r3, #8
 8001682:	d05c      	beq.n	800173e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	2b02      	cmp	r3, #2
 800168a:	d141      	bne.n	8001710 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800168c:	4b48      	ldr	r3, [pc, #288]	; (80017b0 <HAL_RCC_OscConfig+0x4dc>)
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001692:	f7ff fb77 	bl	8000d84 <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800169a:	f7ff fb73 	bl	8000d84 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e078      	b.n	800179e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ac:	4b3f      	ldr	r3, [pc, #252]	; (80017ac <HAL_RCC_OscConfig+0x4d8>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1f0      	bne.n	800169a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69da      	ldr	r2, [r3, #28]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	431a      	orrs	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c6:	019b      	lsls	r3, r3, #6
 80016c8:	431a      	orrs	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ce:	085b      	lsrs	r3, r3, #1
 80016d0:	3b01      	subs	r3, #1
 80016d2:	041b      	lsls	r3, r3, #16
 80016d4:	431a      	orrs	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016da:	061b      	lsls	r3, r3, #24
 80016dc:	4933      	ldr	r1, [pc, #204]	; (80017ac <HAL_RCC_OscConfig+0x4d8>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016e2:	4b33      	ldr	r3, [pc, #204]	; (80017b0 <HAL_RCC_OscConfig+0x4dc>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e8:	f7ff fb4c 	bl	8000d84 <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016f0:	f7ff fb48 	bl	8000d84 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e04d      	b.n	800179e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001702:	4b2a      	ldr	r3, [pc, #168]	; (80017ac <HAL_RCC_OscConfig+0x4d8>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d0f0      	beq.n	80016f0 <HAL_RCC_OscConfig+0x41c>
 800170e:	e045      	b.n	800179c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001710:	4b27      	ldr	r3, [pc, #156]	; (80017b0 <HAL_RCC_OscConfig+0x4dc>)
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001716:	f7ff fb35 	bl	8000d84 <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800171e:	f7ff fb31 	bl	8000d84 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e036      	b.n	800179e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001730:	4b1e      	ldr	r3, [pc, #120]	; (80017ac <HAL_RCC_OscConfig+0x4d8>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1f0      	bne.n	800171e <HAL_RCC_OscConfig+0x44a>
 800173c:	e02e      	b.n	800179c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d101      	bne.n	800174a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e029      	b.n	800179e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800174a:	4b18      	ldr	r3, [pc, #96]	; (80017ac <HAL_RCC_OscConfig+0x4d8>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	429a      	cmp	r2, r3
 800175c:	d11c      	bne.n	8001798 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001768:	429a      	cmp	r2, r3
 800176a:	d115      	bne.n	8001798 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001772:	4013      	ands	r3, r2
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001778:	4293      	cmp	r3, r2
 800177a:	d10d      	bne.n	8001798 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001786:	429a      	cmp	r2, r3
 8001788:	d106      	bne.n	8001798 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001794:	429a      	cmp	r2, r3
 8001796:	d001      	beq.n	800179c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e000      	b.n	800179e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40007000 	.word	0x40007000
 80017ac:	40023800 	.word	0x40023800
 80017b0:	42470060 	.word	0x42470060

080017b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d101      	bne.n	80017c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e0cc      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017c8:	4b68      	ldr	r3, [pc, #416]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 030f 	and.w	r3, r3, #15
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d90c      	bls.n	80017f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d6:	4b65      	ldr	r3, [pc, #404]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017de:	4b63      	ldr	r3, [pc, #396]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 030f 	and.w	r3, r3, #15
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d001      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e0b8      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d020      	beq.n	800183e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0304 	and.w	r3, r3, #4
 8001804:	2b00      	cmp	r3, #0
 8001806:	d005      	beq.n	8001814 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001808:	4b59      	ldr	r3, [pc, #356]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	4a58      	ldr	r2, [pc, #352]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001812:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0308 	and.w	r3, r3, #8
 800181c:	2b00      	cmp	r3, #0
 800181e:	d005      	beq.n	800182c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001820:	4b53      	ldr	r3, [pc, #332]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	4a52      	ldr	r2, [pc, #328]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800182a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800182c:	4b50      	ldr	r3, [pc, #320]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	494d      	ldr	r1, [pc, #308]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	4313      	orrs	r3, r2
 800183c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	d044      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d107      	bne.n	8001862 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001852:	4b47      	ldr	r3, [pc, #284]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d119      	bne.n	8001892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e07f      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d003      	beq.n	8001872 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800186e:	2b03      	cmp	r3, #3
 8001870:	d107      	bne.n	8001882 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001872:	4b3f      	ldr	r3, [pc, #252]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d109      	bne.n	8001892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e06f      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001882:	4b3b      	ldr	r3, [pc, #236]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e067      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001892:	4b37      	ldr	r3, [pc, #220]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f023 0203 	bic.w	r2, r3, #3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	4934      	ldr	r1, [pc, #208]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018a4:	f7ff fa6e 	bl	8000d84 <HAL_GetTick>
 80018a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018aa:	e00a      	b.n	80018c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ac:	f7ff fa6a 	bl	8000d84 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e04f      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c2:	4b2b      	ldr	r3, [pc, #172]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 020c 	and.w	r2, r3, #12
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d1eb      	bne.n	80018ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018d4:	4b25      	ldr	r3, [pc, #148]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 030f 	and.w	r3, r3, #15
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d20c      	bcs.n	80018fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e2:	4b22      	ldr	r3, [pc, #136]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ea:	4b20      	ldr	r3, [pc, #128]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d001      	beq.n	80018fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e032      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	2b00      	cmp	r3, #0
 8001906:	d008      	beq.n	800191a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001908:	4b19      	ldr	r3, [pc, #100]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	4916      	ldr	r1, [pc, #88]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	4313      	orrs	r3, r2
 8001918:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	2b00      	cmp	r3, #0
 8001924:	d009      	beq.n	800193a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001926:	4b12      	ldr	r3, [pc, #72]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	490e      	ldr	r1, [pc, #56]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001936:	4313      	orrs	r3, r2
 8001938:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800193a:	f000 f821 	bl	8001980 <HAL_RCC_GetSysClockFreq>
 800193e:	4601      	mov	r1, r0
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	091b      	lsrs	r3, r3, #4
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <HAL_RCC_ClockConfig+0x1c0>)
 800194c:	5cd3      	ldrb	r3, [r2, r3]
 800194e:	fa21 f303 	lsr.w	r3, r1, r3
 8001952:	4a09      	ldr	r2, [pc, #36]	; (8001978 <HAL_RCC_ClockConfig+0x1c4>)
 8001954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001956:	4b09      	ldr	r3, [pc, #36]	; (800197c <HAL_RCC_ClockConfig+0x1c8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff f9ce 	bl	8000cfc <HAL_InitTick>

  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40023c00 	.word	0x40023c00
 8001970:	40023800 	.word	0x40023800
 8001974:	08005fc4 	.word	0x08005fc4
 8001978:	20000000 	.word	0x20000000
 800197c:	20000004 	.word	0x20000004

08001980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001986:	2300      	movs	r3, #0
 8001988:	607b      	str	r3, [r7, #4]
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	2300      	movs	r3, #0
 8001990:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001992:	2300      	movs	r3, #0
 8001994:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001996:	4b63      	ldr	r3, [pc, #396]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 030c 	and.w	r3, r3, #12
 800199e:	2b04      	cmp	r3, #4
 80019a0:	d007      	beq.n	80019b2 <HAL_RCC_GetSysClockFreq+0x32>
 80019a2:	2b08      	cmp	r3, #8
 80019a4:	d008      	beq.n	80019b8 <HAL_RCC_GetSysClockFreq+0x38>
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f040 80b4 	bne.w	8001b14 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019ac:	4b5e      	ldr	r3, [pc, #376]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80019ae:	60bb      	str	r3, [r7, #8]
       break;
 80019b0:	e0b3      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019b2:	4b5e      	ldr	r3, [pc, #376]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80019b4:	60bb      	str	r3, [r7, #8]
      break;
 80019b6:	e0b0      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019b8:	4b5a      	ldr	r3, [pc, #360]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019c2:	4b58      	ldr	r3, [pc, #352]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d04a      	beq.n	8001a64 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ce:	4b55      	ldr	r3, [pc, #340]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	099b      	lsrs	r3, r3, #6
 80019d4:	f04f 0400 	mov.w	r4, #0
 80019d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	ea03 0501 	and.w	r5, r3, r1
 80019e4:	ea04 0602 	and.w	r6, r4, r2
 80019e8:	4629      	mov	r1, r5
 80019ea:	4632      	mov	r2, r6
 80019ec:	f04f 0300 	mov.w	r3, #0
 80019f0:	f04f 0400 	mov.w	r4, #0
 80019f4:	0154      	lsls	r4, r2, #5
 80019f6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019fa:	014b      	lsls	r3, r1, #5
 80019fc:	4619      	mov	r1, r3
 80019fe:	4622      	mov	r2, r4
 8001a00:	1b49      	subs	r1, r1, r5
 8001a02:	eb62 0206 	sbc.w	r2, r2, r6
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	f04f 0400 	mov.w	r4, #0
 8001a0e:	0194      	lsls	r4, r2, #6
 8001a10:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a14:	018b      	lsls	r3, r1, #6
 8001a16:	1a5b      	subs	r3, r3, r1
 8001a18:	eb64 0402 	sbc.w	r4, r4, r2
 8001a1c:	f04f 0100 	mov.w	r1, #0
 8001a20:	f04f 0200 	mov.w	r2, #0
 8001a24:	00e2      	lsls	r2, r4, #3
 8001a26:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a2a:	00d9      	lsls	r1, r3, #3
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	4614      	mov	r4, r2
 8001a30:	195b      	adds	r3, r3, r5
 8001a32:	eb44 0406 	adc.w	r4, r4, r6
 8001a36:	f04f 0100 	mov.w	r1, #0
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	0262      	lsls	r2, r4, #9
 8001a40:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001a44:	0259      	lsls	r1, r3, #9
 8001a46:	460b      	mov	r3, r1
 8001a48:	4614      	mov	r4, r2
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	4621      	mov	r1, r4
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f04f 0400 	mov.w	r4, #0
 8001a54:	461a      	mov	r2, r3
 8001a56:	4623      	mov	r3, r4
 8001a58:	f7fe fc1a 	bl	8000290 <__aeabi_uldivmod>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	460c      	mov	r4, r1
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	e049      	b.n	8001af8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a64:	4b2f      	ldr	r3, [pc, #188]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	099b      	lsrs	r3, r3, #6
 8001a6a:	f04f 0400 	mov.w	r4, #0
 8001a6e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	ea03 0501 	and.w	r5, r3, r1
 8001a7a:	ea04 0602 	and.w	r6, r4, r2
 8001a7e:	4629      	mov	r1, r5
 8001a80:	4632      	mov	r2, r6
 8001a82:	f04f 0300 	mov.w	r3, #0
 8001a86:	f04f 0400 	mov.w	r4, #0
 8001a8a:	0154      	lsls	r4, r2, #5
 8001a8c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a90:	014b      	lsls	r3, r1, #5
 8001a92:	4619      	mov	r1, r3
 8001a94:	4622      	mov	r2, r4
 8001a96:	1b49      	subs	r1, r1, r5
 8001a98:	eb62 0206 	sbc.w	r2, r2, r6
 8001a9c:	f04f 0300 	mov.w	r3, #0
 8001aa0:	f04f 0400 	mov.w	r4, #0
 8001aa4:	0194      	lsls	r4, r2, #6
 8001aa6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001aaa:	018b      	lsls	r3, r1, #6
 8001aac:	1a5b      	subs	r3, r3, r1
 8001aae:	eb64 0402 	sbc.w	r4, r4, r2
 8001ab2:	f04f 0100 	mov.w	r1, #0
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	00e2      	lsls	r2, r4, #3
 8001abc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001ac0:	00d9      	lsls	r1, r3, #3
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4614      	mov	r4, r2
 8001ac6:	195b      	adds	r3, r3, r5
 8001ac8:	eb44 0406 	adc.w	r4, r4, r6
 8001acc:	f04f 0100 	mov.w	r1, #0
 8001ad0:	f04f 0200 	mov.w	r2, #0
 8001ad4:	02a2      	lsls	r2, r4, #10
 8001ad6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001ada:	0299      	lsls	r1, r3, #10
 8001adc:	460b      	mov	r3, r1
 8001ade:	4614      	mov	r4, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	4621      	mov	r1, r4
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f04f 0400 	mov.w	r4, #0
 8001aea:	461a      	mov	r2, r3
 8001aec:	4623      	mov	r3, r4
 8001aee:	f7fe fbcf 	bl	8000290 <__aeabi_uldivmod>
 8001af2:	4603      	mov	r3, r0
 8001af4:	460c      	mov	r4, r1
 8001af6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001af8:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	0c1b      	lsrs	r3, r3, #16
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	3301      	adds	r3, #1
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b10:	60bb      	str	r3, [r7, #8]
      break;
 8001b12:	e002      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b14:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001b16:	60bb      	str	r3, [r7, #8]
      break;
 8001b18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b1a:	68bb      	ldr	r3, [r7, #8]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b24:	40023800 	.word	0x40023800
 8001b28:	00f42400 	.word	0x00f42400
 8001b2c:	007a1200 	.word	0x007a1200

08001b30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b34:	4b03      	ldr	r3, [pc, #12]	; (8001b44 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b36:	681b      	ldr	r3, [r3, #0]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	20000000 	.word	0x20000000

08001b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b4c:	f7ff fff0 	bl	8001b30 <HAL_RCC_GetHCLKFreq>
 8001b50:	4601      	mov	r1, r0
 8001b52:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	0a9b      	lsrs	r3, r3, #10
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	4a03      	ldr	r2, [pc, #12]	; (8001b6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b5e:	5cd3      	ldrb	r3, [r2, r3]
 8001b60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	08005fd4 	.word	0x08005fd4

08001b70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b74:	f7ff ffdc 	bl	8001b30 <HAL_RCC_GetHCLKFreq>
 8001b78:	4601      	mov	r1, r0
 8001b7a:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	0b5b      	lsrs	r3, r3, #13
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	4a03      	ldr	r2, [pc, #12]	; (8001b94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b86:	5cd3      	ldrb	r3, [r2, r3]
 8001b88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40023800 	.word	0x40023800
 8001b94:	08005fd4 	.word	0x08005fd4

08001b98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e03f      	b.n	8001c2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d106      	bne.n	8001bc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7fe ff98 	bl	8000af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2224      	movs	r2, #36	; 0x24
 8001bc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68da      	ldr	r2, [r3, #12]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 f90b 	bl	8001df8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	691a      	ldr	r2, [r3, #16]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001bf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	695a      	ldr	r2, [r3, #20]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68da      	ldr	r2, [r3, #12]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2220      	movs	r2, #32
 8001c24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b088      	sub	sp, #32
 8001c36:	af02      	add	r7, sp, #8
 8001c38:	60f8      	str	r0, [r7, #12]
 8001c3a:	60b9      	str	r1, [r7, #8]
 8001c3c:	603b      	str	r3, [r7, #0]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b20      	cmp	r3, #32
 8001c50:	f040 8083 	bne.w	8001d5a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d002      	beq.n	8001c60 <HAL_UART_Transmit+0x2e>
 8001c5a:	88fb      	ldrh	r3, [r7, #6]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d101      	bne.n	8001c64 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e07b      	b.n	8001d5c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d101      	bne.n	8001c72 <HAL_UART_Transmit+0x40>
 8001c6e:	2302      	movs	r3, #2
 8001c70:	e074      	b.n	8001d5c <HAL_UART_Transmit+0x12a>
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2221      	movs	r2, #33	; 0x21
 8001c84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001c88:	f7ff f87c 	bl	8000d84 <HAL_GetTick>
 8001c8c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	88fa      	ldrh	r2, [r7, #6]
 8001c92:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	88fa      	ldrh	r2, [r7, #6]
 8001c98:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001ca2:	e042      	b.n	8001d2a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	3b01      	subs	r3, #1
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cba:	d122      	bne.n	8001d02 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2180      	movs	r1, #128	; 0x80
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f000 f84c 	bl	8001d64 <UART_WaitOnFlagUntilTimeout>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e042      	b.n	8001d5c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	881b      	ldrh	r3, [r3, #0]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ce8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d103      	bne.n	8001cfa <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	3302      	adds	r3, #2
 8001cf6:	60bb      	str	r3, [r7, #8]
 8001cf8:	e017      	b.n	8001d2a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	e013      	b.n	8001d2a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2180      	movs	r1, #128	; 0x80
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f000 f829 	bl	8001d64 <UART_WaitOnFlagUntilTimeout>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e01f      	b.n	8001d5c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	1c5a      	adds	r2, r3, #1
 8001d20:	60ba      	str	r2, [r7, #8]
 8001d22:	781a      	ldrb	r2, [r3, #0]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1b7      	bne.n	8001ca4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2140      	movs	r1, #64	; 0x40
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f000 f810 	bl	8001d64 <UART_WaitOnFlagUntilTimeout>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e006      	b.n	8001d5c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2220      	movs	r2, #32
 8001d52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001d56:	2300      	movs	r3, #0
 8001d58:	e000      	b.n	8001d5c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001d5a:	2302      	movs	r3, #2
  }
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	603b      	str	r3, [r7, #0]
 8001d70:	4613      	mov	r3, r2
 8001d72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d74:	e02c      	b.n	8001dd0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d7c:	d028      	beq.n	8001dd0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d007      	beq.n	8001d94 <UART_WaitOnFlagUntilTimeout+0x30>
 8001d84:	f7fe fffe 	bl	8000d84 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d21d      	bcs.n	8001dd0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68da      	ldr	r2, [r3, #12]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001da2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	695a      	ldr	r2, [r3, #20]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f022 0201 	bic.w	r2, r2, #1
 8001db2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2220      	movs	r2, #32
 8001db8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e00f      	b.n	8001df0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	bf0c      	ite	eq
 8001de0:	2301      	moveq	r3, #1
 8001de2:	2300      	movne	r3, #0
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	461a      	mov	r2, r3
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d0c3      	beq.n	8001d76 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dfc:	b085      	sub	sp, #20
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68da      	ldr	r2, [r3, #12]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	431a      	orrs	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	431a      	orrs	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	69db      	ldr	r3, [r3, #28]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001e3a:	f023 030c 	bic.w	r3, r3, #12
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6812      	ldr	r2, [r2, #0]
 8001e42:	68f9      	ldr	r1, [r7, #12]
 8001e44:	430b      	orrs	r3, r1
 8001e46:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	699a      	ldr	r2, [r3, #24]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e66:	f040 818b 	bne.w	8002180 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4ac1      	ldr	r2, [pc, #772]	; (8002174 <UART_SetConfig+0x37c>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d005      	beq.n	8001e80 <UART_SetConfig+0x88>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4abf      	ldr	r2, [pc, #764]	; (8002178 <UART_SetConfig+0x380>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	f040 80bd 	bne.w	8001ffa <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001e80:	f7ff fe76 	bl	8001b70 <HAL_RCC_GetPCLK2Freq>
 8001e84:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	461d      	mov	r5, r3
 8001e8a:	f04f 0600 	mov.w	r6, #0
 8001e8e:	46a8      	mov	r8, r5
 8001e90:	46b1      	mov	r9, r6
 8001e92:	eb18 0308 	adds.w	r3, r8, r8
 8001e96:	eb49 0409 	adc.w	r4, r9, r9
 8001e9a:	4698      	mov	r8, r3
 8001e9c:	46a1      	mov	r9, r4
 8001e9e:	eb18 0805 	adds.w	r8, r8, r5
 8001ea2:	eb49 0906 	adc.w	r9, r9, r6
 8001ea6:	f04f 0100 	mov.w	r1, #0
 8001eaa:	f04f 0200 	mov.w	r2, #0
 8001eae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001eb2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001eb6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001eba:	4688      	mov	r8, r1
 8001ebc:	4691      	mov	r9, r2
 8001ebe:	eb18 0005 	adds.w	r0, r8, r5
 8001ec2:	eb49 0106 	adc.w	r1, r9, r6
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	461d      	mov	r5, r3
 8001ecc:	f04f 0600 	mov.w	r6, #0
 8001ed0:	196b      	adds	r3, r5, r5
 8001ed2:	eb46 0406 	adc.w	r4, r6, r6
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	4623      	mov	r3, r4
 8001eda:	f7fe f9d9 	bl	8000290 <__aeabi_uldivmod>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	460c      	mov	r4, r1
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	4ba5      	ldr	r3, [pc, #660]	; (800217c <UART_SetConfig+0x384>)
 8001ee6:	fba3 2302 	umull	r2, r3, r3, r2
 8001eea:	095b      	lsrs	r3, r3, #5
 8001eec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	461d      	mov	r5, r3
 8001ef4:	f04f 0600 	mov.w	r6, #0
 8001ef8:	46a9      	mov	r9, r5
 8001efa:	46b2      	mov	sl, r6
 8001efc:	eb19 0309 	adds.w	r3, r9, r9
 8001f00:	eb4a 040a 	adc.w	r4, sl, sl
 8001f04:	4699      	mov	r9, r3
 8001f06:	46a2      	mov	sl, r4
 8001f08:	eb19 0905 	adds.w	r9, r9, r5
 8001f0c:	eb4a 0a06 	adc.w	sl, sl, r6
 8001f10:	f04f 0100 	mov.w	r1, #0
 8001f14:	f04f 0200 	mov.w	r2, #0
 8001f18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f1c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001f20:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001f24:	4689      	mov	r9, r1
 8001f26:	4692      	mov	sl, r2
 8001f28:	eb19 0005 	adds.w	r0, r9, r5
 8001f2c:	eb4a 0106 	adc.w	r1, sl, r6
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	461d      	mov	r5, r3
 8001f36:	f04f 0600 	mov.w	r6, #0
 8001f3a:	196b      	adds	r3, r5, r5
 8001f3c:	eb46 0406 	adc.w	r4, r6, r6
 8001f40:	461a      	mov	r2, r3
 8001f42:	4623      	mov	r3, r4
 8001f44:	f7fe f9a4 	bl	8000290 <__aeabi_uldivmod>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	460c      	mov	r4, r1
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4b8b      	ldr	r3, [pc, #556]	; (800217c <UART_SetConfig+0x384>)
 8001f50:	fba3 1302 	umull	r1, r3, r3, r2
 8001f54:	095b      	lsrs	r3, r3, #5
 8001f56:	2164      	movs	r1, #100	; 0x64
 8001f58:	fb01 f303 	mul.w	r3, r1, r3
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	3332      	adds	r3, #50	; 0x32
 8001f62:	4a86      	ldr	r2, [pc, #536]	; (800217c <UART_SetConfig+0x384>)
 8001f64:	fba2 2303 	umull	r2, r3, r2, r3
 8001f68:	095b      	lsrs	r3, r3, #5
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001f70:	4498      	add	r8, r3
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	461d      	mov	r5, r3
 8001f76:	f04f 0600 	mov.w	r6, #0
 8001f7a:	46a9      	mov	r9, r5
 8001f7c:	46b2      	mov	sl, r6
 8001f7e:	eb19 0309 	adds.w	r3, r9, r9
 8001f82:	eb4a 040a 	adc.w	r4, sl, sl
 8001f86:	4699      	mov	r9, r3
 8001f88:	46a2      	mov	sl, r4
 8001f8a:	eb19 0905 	adds.w	r9, r9, r5
 8001f8e:	eb4a 0a06 	adc.w	sl, sl, r6
 8001f92:	f04f 0100 	mov.w	r1, #0
 8001f96:	f04f 0200 	mov.w	r2, #0
 8001f9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f9e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001fa2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001fa6:	4689      	mov	r9, r1
 8001fa8:	4692      	mov	sl, r2
 8001faa:	eb19 0005 	adds.w	r0, r9, r5
 8001fae:	eb4a 0106 	adc.w	r1, sl, r6
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	461d      	mov	r5, r3
 8001fb8:	f04f 0600 	mov.w	r6, #0
 8001fbc:	196b      	adds	r3, r5, r5
 8001fbe:	eb46 0406 	adc.w	r4, r6, r6
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	4623      	mov	r3, r4
 8001fc6:	f7fe f963 	bl	8000290 <__aeabi_uldivmod>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	460c      	mov	r4, r1
 8001fce:	461a      	mov	r2, r3
 8001fd0:	4b6a      	ldr	r3, [pc, #424]	; (800217c <UART_SetConfig+0x384>)
 8001fd2:	fba3 1302 	umull	r1, r3, r3, r2
 8001fd6:	095b      	lsrs	r3, r3, #5
 8001fd8:	2164      	movs	r1, #100	; 0x64
 8001fda:	fb01 f303 	mul.w	r3, r1, r3
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	3332      	adds	r3, #50	; 0x32
 8001fe4:	4a65      	ldr	r2, [pc, #404]	; (800217c <UART_SetConfig+0x384>)
 8001fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fea:	095b      	lsrs	r3, r3, #5
 8001fec:	f003 0207 	and.w	r2, r3, #7
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4442      	add	r2, r8
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	e26f      	b.n	80024da <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001ffa:	f7ff fda5 	bl	8001b48 <HAL_RCC_GetPCLK1Freq>
 8001ffe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	461d      	mov	r5, r3
 8002004:	f04f 0600 	mov.w	r6, #0
 8002008:	46a8      	mov	r8, r5
 800200a:	46b1      	mov	r9, r6
 800200c:	eb18 0308 	adds.w	r3, r8, r8
 8002010:	eb49 0409 	adc.w	r4, r9, r9
 8002014:	4698      	mov	r8, r3
 8002016:	46a1      	mov	r9, r4
 8002018:	eb18 0805 	adds.w	r8, r8, r5
 800201c:	eb49 0906 	adc.w	r9, r9, r6
 8002020:	f04f 0100 	mov.w	r1, #0
 8002024:	f04f 0200 	mov.w	r2, #0
 8002028:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800202c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002030:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002034:	4688      	mov	r8, r1
 8002036:	4691      	mov	r9, r2
 8002038:	eb18 0005 	adds.w	r0, r8, r5
 800203c:	eb49 0106 	adc.w	r1, r9, r6
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	461d      	mov	r5, r3
 8002046:	f04f 0600 	mov.w	r6, #0
 800204a:	196b      	adds	r3, r5, r5
 800204c:	eb46 0406 	adc.w	r4, r6, r6
 8002050:	461a      	mov	r2, r3
 8002052:	4623      	mov	r3, r4
 8002054:	f7fe f91c 	bl	8000290 <__aeabi_uldivmod>
 8002058:	4603      	mov	r3, r0
 800205a:	460c      	mov	r4, r1
 800205c:	461a      	mov	r2, r3
 800205e:	4b47      	ldr	r3, [pc, #284]	; (800217c <UART_SetConfig+0x384>)
 8002060:	fba3 2302 	umull	r2, r3, r3, r2
 8002064:	095b      	lsrs	r3, r3, #5
 8002066:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	461d      	mov	r5, r3
 800206e:	f04f 0600 	mov.w	r6, #0
 8002072:	46a9      	mov	r9, r5
 8002074:	46b2      	mov	sl, r6
 8002076:	eb19 0309 	adds.w	r3, r9, r9
 800207a:	eb4a 040a 	adc.w	r4, sl, sl
 800207e:	4699      	mov	r9, r3
 8002080:	46a2      	mov	sl, r4
 8002082:	eb19 0905 	adds.w	r9, r9, r5
 8002086:	eb4a 0a06 	adc.w	sl, sl, r6
 800208a:	f04f 0100 	mov.w	r1, #0
 800208e:	f04f 0200 	mov.w	r2, #0
 8002092:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002096:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800209a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800209e:	4689      	mov	r9, r1
 80020a0:	4692      	mov	sl, r2
 80020a2:	eb19 0005 	adds.w	r0, r9, r5
 80020a6:	eb4a 0106 	adc.w	r1, sl, r6
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	461d      	mov	r5, r3
 80020b0:	f04f 0600 	mov.w	r6, #0
 80020b4:	196b      	adds	r3, r5, r5
 80020b6:	eb46 0406 	adc.w	r4, r6, r6
 80020ba:	461a      	mov	r2, r3
 80020bc:	4623      	mov	r3, r4
 80020be:	f7fe f8e7 	bl	8000290 <__aeabi_uldivmod>
 80020c2:	4603      	mov	r3, r0
 80020c4:	460c      	mov	r4, r1
 80020c6:	461a      	mov	r2, r3
 80020c8:	4b2c      	ldr	r3, [pc, #176]	; (800217c <UART_SetConfig+0x384>)
 80020ca:	fba3 1302 	umull	r1, r3, r3, r2
 80020ce:	095b      	lsrs	r3, r3, #5
 80020d0:	2164      	movs	r1, #100	; 0x64
 80020d2:	fb01 f303 	mul.w	r3, r1, r3
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	3332      	adds	r3, #50	; 0x32
 80020dc:	4a27      	ldr	r2, [pc, #156]	; (800217c <UART_SetConfig+0x384>)
 80020de:	fba2 2303 	umull	r2, r3, r2, r3
 80020e2:	095b      	lsrs	r3, r3, #5
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80020ea:	4498      	add	r8, r3
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	461d      	mov	r5, r3
 80020f0:	f04f 0600 	mov.w	r6, #0
 80020f4:	46a9      	mov	r9, r5
 80020f6:	46b2      	mov	sl, r6
 80020f8:	eb19 0309 	adds.w	r3, r9, r9
 80020fc:	eb4a 040a 	adc.w	r4, sl, sl
 8002100:	4699      	mov	r9, r3
 8002102:	46a2      	mov	sl, r4
 8002104:	eb19 0905 	adds.w	r9, r9, r5
 8002108:	eb4a 0a06 	adc.w	sl, sl, r6
 800210c:	f04f 0100 	mov.w	r1, #0
 8002110:	f04f 0200 	mov.w	r2, #0
 8002114:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002118:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800211c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002120:	4689      	mov	r9, r1
 8002122:	4692      	mov	sl, r2
 8002124:	eb19 0005 	adds.w	r0, r9, r5
 8002128:	eb4a 0106 	adc.w	r1, sl, r6
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	461d      	mov	r5, r3
 8002132:	f04f 0600 	mov.w	r6, #0
 8002136:	196b      	adds	r3, r5, r5
 8002138:	eb46 0406 	adc.w	r4, r6, r6
 800213c:	461a      	mov	r2, r3
 800213e:	4623      	mov	r3, r4
 8002140:	f7fe f8a6 	bl	8000290 <__aeabi_uldivmod>
 8002144:	4603      	mov	r3, r0
 8002146:	460c      	mov	r4, r1
 8002148:	461a      	mov	r2, r3
 800214a:	4b0c      	ldr	r3, [pc, #48]	; (800217c <UART_SetConfig+0x384>)
 800214c:	fba3 1302 	umull	r1, r3, r3, r2
 8002150:	095b      	lsrs	r3, r3, #5
 8002152:	2164      	movs	r1, #100	; 0x64
 8002154:	fb01 f303 	mul.w	r3, r1, r3
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	3332      	adds	r3, #50	; 0x32
 800215e:	4a07      	ldr	r2, [pc, #28]	; (800217c <UART_SetConfig+0x384>)
 8002160:	fba2 2303 	umull	r2, r3, r2, r3
 8002164:	095b      	lsrs	r3, r3, #5
 8002166:	f003 0207 	and.w	r2, r3, #7
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4442      	add	r2, r8
 8002170:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002172:	e1b2      	b.n	80024da <UART_SetConfig+0x6e2>
 8002174:	40011000 	.word	0x40011000
 8002178:	40011400 	.word	0x40011400
 800217c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4ad7      	ldr	r2, [pc, #860]	; (80024e4 <UART_SetConfig+0x6ec>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d005      	beq.n	8002196 <UART_SetConfig+0x39e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4ad6      	ldr	r2, [pc, #856]	; (80024e8 <UART_SetConfig+0x6f0>)
 8002190:	4293      	cmp	r3, r2
 8002192:	f040 80d1 	bne.w	8002338 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002196:	f7ff fceb 	bl	8001b70 <HAL_RCC_GetPCLK2Freq>
 800219a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	469a      	mov	sl, r3
 80021a0:	f04f 0b00 	mov.w	fp, #0
 80021a4:	46d0      	mov	r8, sl
 80021a6:	46d9      	mov	r9, fp
 80021a8:	eb18 0308 	adds.w	r3, r8, r8
 80021ac:	eb49 0409 	adc.w	r4, r9, r9
 80021b0:	4698      	mov	r8, r3
 80021b2:	46a1      	mov	r9, r4
 80021b4:	eb18 080a 	adds.w	r8, r8, sl
 80021b8:	eb49 090b 	adc.w	r9, r9, fp
 80021bc:	f04f 0100 	mov.w	r1, #0
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80021c8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80021cc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80021d0:	4688      	mov	r8, r1
 80021d2:	4691      	mov	r9, r2
 80021d4:	eb1a 0508 	adds.w	r5, sl, r8
 80021d8:	eb4b 0609 	adc.w	r6, fp, r9
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	4619      	mov	r1, r3
 80021e2:	f04f 0200 	mov.w	r2, #0
 80021e6:	f04f 0300 	mov.w	r3, #0
 80021ea:	f04f 0400 	mov.w	r4, #0
 80021ee:	0094      	lsls	r4, r2, #2
 80021f0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80021f4:	008b      	lsls	r3, r1, #2
 80021f6:	461a      	mov	r2, r3
 80021f8:	4623      	mov	r3, r4
 80021fa:	4628      	mov	r0, r5
 80021fc:	4631      	mov	r1, r6
 80021fe:	f7fe f847 	bl	8000290 <__aeabi_uldivmod>
 8002202:	4603      	mov	r3, r0
 8002204:	460c      	mov	r4, r1
 8002206:	461a      	mov	r2, r3
 8002208:	4bb8      	ldr	r3, [pc, #736]	; (80024ec <UART_SetConfig+0x6f4>)
 800220a:	fba3 2302 	umull	r2, r3, r3, r2
 800220e:	095b      	lsrs	r3, r3, #5
 8002210:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	469b      	mov	fp, r3
 8002218:	f04f 0c00 	mov.w	ip, #0
 800221c:	46d9      	mov	r9, fp
 800221e:	46e2      	mov	sl, ip
 8002220:	eb19 0309 	adds.w	r3, r9, r9
 8002224:	eb4a 040a 	adc.w	r4, sl, sl
 8002228:	4699      	mov	r9, r3
 800222a:	46a2      	mov	sl, r4
 800222c:	eb19 090b 	adds.w	r9, r9, fp
 8002230:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002234:	f04f 0100 	mov.w	r1, #0
 8002238:	f04f 0200 	mov.w	r2, #0
 800223c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002240:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002244:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002248:	4689      	mov	r9, r1
 800224a:	4692      	mov	sl, r2
 800224c:	eb1b 0509 	adds.w	r5, fp, r9
 8002250:	eb4c 060a 	adc.w	r6, ip, sl
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	4619      	mov	r1, r3
 800225a:	f04f 0200 	mov.w	r2, #0
 800225e:	f04f 0300 	mov.w	r3, #0
 8002262:	f04f 0400 	mov.w	r4, #0
 8002266:	0094      	lsls	r4, r2, #2
 8002268:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800226c:	008b      	lsls	r3, r1, #2
 800226e:	461a      	mov	r2, r3
 8002270:	4623      	mov	r3, r4
 8002272:	4628      	mov	r0, r5
 8002274:	4631      	mov	r1, r6
 8002276:	f7fe f80b 	bl	8000290 <__aeabi_uldivmod>
 800227a:	4603      	mov	r3, r0
 800227c:	460c      	mov	r4, r1
 800227e:	461a      	mov	r2, r3
 8002280:	4b9a      	ldr	r3, [pc, #616]	; (80024ec <UART_SetConfig+0x6f4>)
 8002282:	fba3 1302 	umull	r1, r3, r3, r2
 8002286:	095b      	lsrs	r3, r3, #5
 8002288:	2164      	movs	r1, #100	; 0x64
 800228a:	fb01 f303 	mul.w	r3, r1, r3
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	011b      	lsls	r3, r3, #4
 8002292:	3332      	adds	r3, #50	; 0x32
 8002294:	4a95      	ldr	r2, [pc, #596]	; (80024ec <UART_SetConfig+0x6f4>)
 8002296:	fba2 2303 	umull	r2, r3, r2, r3
 800229a:	095b      	lsrs	r3, r3, #5
 800229c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022a0:	4498      	add	r8, r3
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	469b      	mov	fp, r3
 80022a6:	f04f 0c00 	mov.w	ip, #0
 80022aa:	46d9      	mov	r9, fp
 80022ac:	46e2      	mov	sl, ip
 80022ae:	eb19 0309 	adds.w	r3, r9, r9
 80022b2:	eb4a 040a 	adc.w	r4, sl, sl
 80022b6:	4699      	mov	r9, r3
 80022b8:	46a2      	mov	sl, r4
 80022ba:	eb19 090b 	adds.w	r9, r9, fp
 80022be:	eb4a 0a0c 	adc.w	sl, sl, ip
 80022c2:	f04f 0100 	mov.w	r1, #0
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80022d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80022d6:	4689      	mov	r9, r1
 80022d8:	4692      	mov	sl, r2
 80022da:	eb1b 0509 	adds.w	r5, fp, r9
 80022de:	eb4c 060a 	adc.w	r6, ip, sl
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	4619      	mov	r1, r3
 80022e8:	f04f 0200 	mov.w	r2, #0
 80022ec:	f04f 0300 	mov.w	r3, #0
 80022f0:	f04f 0400 	mov.w	r4, #0
 80022f4:	0094      	lsls	r4, r2, #2
 80022f6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80022fa:	008b      	lsls	r3, r1, #2
 80022fc:	461a      	mov	r2, r3
 80022fe:	4623      	mov	r3, r4
 8002300:	4628      	mov	r0, r5
 8002302:	4631      	mov	r1, r6
 8002304:	f7fd ffc4 	bl	8000290 <__aeabi_uldivmod>
 8002308:	4603      	mov	r3, r0
 800230a:	460c      	mov	r4, r1
 800230c:	461a      	mov	r2, r3
 800230e:	4b77      	ldr	r3, [pc, #476]	; (80024ec <UART_SetConfig+0x6f4>)
 8002310:	fba3 1302 	umull	r1, r3, r3, r2
 8002314:	095b      	lsrs	r3, r3, #5
 8002316:	2164      	movs	r1, #100	; 0x64
 8002318:	fb01 f303 	mul.w	r3, r1, r3
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	011b      	lsls	r3, r3, #4
 8002320:	3332      	adds	r3, #50	; 0x32
 8002322:	4a72      	ldr	r2, [pc, #456]	; (80024ec <UART_SetConfig+0x6f4>)
 8002324:	fba2 2303 	umull	r2, r3, r2, r3
 8002328:	095b      	lsrs	r3, r3, #5
 800232a:	f003 020f 	and.w	r2, r3, #15
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4442      	add	r2, r8
 8002334:	609a      	str	r2, [r3, #8]
 8002336:	e0d0      	b.n	80024da <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002338:	f7ff fc06 	bl	8001b48 <HAL_RCC_GetPCLK1Freq>
 800233c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	469a      	mov	sl, r3
 8002342:	f04f 0b00 	mov.w	fp, #0
 8002346:	46d0      	mov	r8, sl
 8002348:	46d9      	mov	r9, fp
 800234a:	eb18 0308 	adds.w	r3, r8, r8
 800234e:	eb49 0409 	adc.w	r4, r9, r9
 8002352:	4698      	mov	r8, r3
 8002354:	46a1      	mov	r9, r4
 8002356:	eb18 080a 	adds.w	r8, r8, sl
 800235a:	eb49 090b 	adc.w	r9, r9, fp
 800235e:	f04f 0100 	mov.w	r1, #0
 8002362:	f04f 0200 	mov.w	r2, #0
 8002366:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800236a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800236e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002372:	4688      	mov	r8, r1
 8002374:	4691      	mov	r9, r2
 8002376:	eb1a 0508 	adds.w	r5, sl, r8
 800237a:	eb4b 0609 	adc.w	r6, fp, r9
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	4619      	mov	r1, r3
 8002384:	f04f 0200 	mov.w	r2, #0
 8002388:	f04f 0300 	mov.w	r3, #0
 800238c:	f04f 0400 	mov.w	r4, #0
 8002390:	0094      	lsls	r4, r2, #2
 8002392:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002396:	008b      	lsls	r3, r1, #2
 8002398:	461a      	mov	r2, r3
 800239a:	4623      	mov	r3, r4
 800239c:	4628      	mov	r0, r5
 800239e:	4631      	mov	r1, r6
 80023a0:	f7fd ff76 	bl	8000290 <__aeabi_uldivmod>
 80023a4:	4603      	mov	r3, r0
 80023a6:	460c      	mov	r4, r1
 80023a8:	461a      	mov	r2, r3
 80023aa:	4b50      	ldr	r3, [pc, #320]	; (80024ec <UART_SetConfig+0x6f4>)
 80023ac:	fba3 2302 	umull	r2, r3, r3, r2
 80023b0:	095b      	lsrs	r3, r3, #5
 80023b2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	469b      	mov	fp, r3
 80023ba:	f04f 0c00 	mov.w	ip, #0
 80023be:	46d9      	mov	r9, fp
 80023c0:	46e2      	mov	sl, ip
 80023c2:	eb19 0309 	adds.w	r3, r9, r9
 80023c6:	eb4a 040a 	adc.w	r4, sl, sl
 80023ca:	4699      	mov	r9, r3
 80023cc:	46a2      	mov	sl, r4
 80023ce:	eb19 090b 	adds.w	r9, r9, fp
 80023d2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80023d6:	f04f 0100 	mov.w	r1, #0
 80023da:	f04f 0200 	mov.w	r2, #0
 80023de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023ea:	4689      	mov	r9, r1
 80023ec:	4692      	mov	sl, r2
 80023ee:	eb1b 0509 	adds.w	r5, fp, r9
 80023f2:	eb4c 060a 	adc.w	r6, ip, sl
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	4619      	mov	r1, r3
 80023fc:	f04f 0200 	mov.w	r2, #0
 8002400:	f04f 0300 	mov.w	r3, #0
 8002404:	f04f 0400 	mov.w	r4, #0
 8002408:	0094      	lsls	r4, r2, #2
 800240a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800240e:	008b      	lsls	r3, r1, #2
 8002410:	461a      	mov	r2, r3
 8002412:	4623      	mov	r3, r4
 8002414:	4628      	mov	r0, r5
 8002416:	4631      	mov	r1, r6
 8002418:	f7fd ff3a 	bl	8000290 <__aeabi_uldivmod>
 800241c:	4603      	mov	r3, r0
 800241e:	460c      	mov	r4, r1
 8002420:	461a      	mov	r2, r3
 8002422:	4b32      	ldr	r3, [pc, #200]	; (80024ec <UART_SetConfig+0x6f4>)
 8002424:	fba3 1302 	umull	r1, r3, r3, r2
 8002428:	095b      	lsrs	r3, r3, #5
 800242a:	2164      	movs	r1, #100	; 0x64
 800242c:	fb01 f303 	mul.w	r3, r1, r3
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	011b      	lsls	r3, r3, #4
 8002434:	3332      	adds	r3, #50	; 0x32
 8002436:	4a2d      	ldr	r2, [pc, #180]	; (80024ec <UART_SetConfig+0x6f4>)
 8002438:	fba2 2303 	umull	r2, r3, r2, r3
 800243c:	095b      	lsrs	r3, r3, #5
 800243e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002442:	4498      	add	r8, r3
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	469b      	mov	fp, r3
 8002448:	f04f 0c00 	mov.w	ip, #0
 800244c:	46d9      	mov	r9, fp
 800244e:	46e2      	mov	sl, ip
 8002450:	eb19 0309 	adds.w	r3, r9, r9
 8002454:	eb4a 040a 	adc.w	r4, sl, sl
 8002458:	4699      	mov	r9, r3
 800245a:	46a2      	mov	sl, r4
 800245c:	eb19 090b 	adds.w	r9, r9, fp
 8002460:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002464:	f04f 0100 	mov.w	r1, #0
 8002468:	f04f 0200 	mov.w	r2, #0
 800246c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002470:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002474:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002478:	4689      	mov	r9, r1
 800247a:	4692      	mov	sl, r2
 800247c:	eb1b 0509 	adds.w	r5, fp, r9
 8002480:	eb4c 060a 	adc.w	r6, ip, sl
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	4619      	mov	r1, r3
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	f04f 0300 	mov.w	r3, #0
 8002492:	f04f 0400 	mov.w	r4, #0
 8002496:	0094      	lsls	r4, r2, #2
 8002498:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800249c:	008b      	lsls	r3, r1, #2
 800249e:	461a      	mov	r2, r3
 80024a0:	4623      	mov	r3, r4
 80024a2:	4628      	mov	r0, r5
 80024a4:	4631      	mov	r1, r6
 80024a6:	f7fd fef3 	bl	8000290 <__aeabi_uldivmod>
 80024aa:	4603      	mov	r3, r0
 80024ac:	460c      	mov	r4, r1
 80024ae:	461a      	mov	r2, r3
 80024b0:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <UART_SetConfig+0x6f4>)
 80024b2:	fba3 1302 	umull	r1, r3, r3, r2
 80024b6:	095b      	lsrs	r3, r3, #5
 80024b8:	2164      	movs	r1, #100	; 0x64
 80024ba:	fb01 f303 	mul.w	r3, r1, r3
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	3332      	adds	r3, #50	; 0x32
 80024c4:	4a09      	ldr	r2, [pc, #36]	; (80024ec <UART_SetConfig+0x6f4>)
 80024c6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ca:	095b      	lsrs	r3, r3, #5
 80024cc:	f003 020f 	and.w	r2, r3, #15
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4442      	add	r2, r8
 80024d6:	609a      	str	r2, [r3, #8]
}
 80024d8:	e7ff      	b.n	80024da <UART_SetConfig+0x6e2>
 80024da:	bf00      	nop
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024e4:	40011000 	.word	0x40011000
 80024e8:	40011400 	.word	0x40011400
 80024ec:	51eb851f 	.word	0x51eb851f

080024f0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80024fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002502:	2b84      	cmp	r3, #132	; 0x84
 8002504:	d005      	beq.n	8002512 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002506:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	4413      	add	r3, r2
 800250e:	3303      	adds	r3, #3
 8002510:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002512:	68fb      	ldr	r3, [r7, #12]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002526:	f3ef 8305 	mrs	r3, IPSR
 800252a:	607b      	str	r3, [r7, #4]
  return(result);
 800252c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800252e:	2b00      	cmp	r3, #0
 8002530:	bf14      	ite	ne
 8002532:	2301      	movne	r3, #1
 8002534:	2300      	moveq	r3, #0
 8002536:	b2db      	uxtb	r3, r3
}
 8002538:	4618      	mov	r0, r3
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002548:	f001 fade 	bl	8003b08 <vTaskStartScheduler>
  
  return osOK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	bd80      	pop	{r7, pc}

08002552 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002552:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002554:	b089      	sub	sp, #36	; 0x24
 8002556:	af04      	add	r7, sp, #16
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d020      	beq.n	80025a6 <osThreadCreate+0x54>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d01c      	beq.n	80025a6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685c      	ldr	r4, [r3, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681d      	ldr	r5, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691e      	ldr	r6, [r3, #16]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff ffb6 	bl	80024f0 <makeFreeRtosPriority>
 8002584:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800258e:	9202      	str	r2, [sp, #8]
 8002590:	9301      	str	r3, [sp, #4]
 8002592:	9100      	str	r1, [sp, #0]
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	4632      	mov	r2, r6
 8002598:	4629      	mov	r1, r5
 800259a:	4620      	mov	r0, r4
 800259c:	f001 f8f0 	bl	8003780 <xTaskCreateStatic>
 80025a0:	4603      	mov	r3, r0
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	e01c      	b.n	80025e0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685c      	ldr	r4, [r3, #4]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80025b2:	b29e      	uxth	r6, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff ff98 	bl	80024f0 <makeFreeRtosPriority>
 80025c0:	4602      	mov	r2, r0
 80025c2:	f107 030c 	add.w	r3, r7, #12
 80025c6:	9301      	str	r3, [sp, #4]
 80025c8:	9200      	str	r2, [sp, #0]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	4632      	mov	r2, r6
 80025ce:	4629      	mov	r1, r5
 80025d0:	4620      	mov	r0, r4
 80025d2:	f001 f92f 	bl	8003834 <xTaskCreate>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d001      	beq.n	80025e0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80025dc:	2300      	movs	r3, #0
 80025de:	e000      	b.n	80025e2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80025e0:	68fb      	ldr	r3, [r7, #12]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080025ec <osThreadYield>:
* @brief  Pass control to next thread that is in state \b READY.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadYield shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadYield (void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  taskYIELD();
 80025f0:	4b06      	ldr	r3, [pc, #24]	; (800260c <osThreadYield+0x20>)
 80025f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	f3bf 8f4f 	dsb	sy
 80025fc:	f3bf 8f6f 	isb	sy
  
  return osOK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	e000ed04 	.word	0xe000ed04

08002610 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <osDelay+0x16>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	e000      	b.n	8002628 <osDelay+0x18>
 8002626:	2301      	movs	r3, #1
 8002628:	4618      	mov	r0, r3
 800262a:	f001 fa39 	bl	8003aa0 <vTaskDelay>
  
  return osOK;
 800262e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002630:	4618      	mov	r0, r3
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af02      	add	r7, sp, #8
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d010      	beq.n	800266c <osSemaphoreCreate+0x34>
    if (count == 1) {
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d10b      	bne.n	8002668 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	2303      	movs	r3, #3
 8002656:	9300      	str	r3, [sp, #0]
 8002658:	4613      	mov	r3, r2
 800265a:	2200      	movs	r2, #0
 800265c:	2100      	movs	r1, #0
 800265e:	2001      	movs	r0, #1
 8002660:	f000 f9be 	bl	80029e0 <xQueueGenericCreateStatic>
 8002664:	4603      	mov	r3, r0
 8002666:	e016      	b.n	8002696 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8002668:	2300      	movs	r3, #0
 800266a:	e014      	b.n	8002696 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d110      	bne.n	8002694 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8002672:	2203      	movs	r2, #3
 8002674:	2100      	movs	r1, #0
 8002676:	2001      	movs	r0, #1
 8002678:	f000 fa25 	bl	8002ac6 <xQueueGenericCreate>
 800267c:	60f8      	str	r0, [r7, #12]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d005      	beq.n	8002690 <osSemaphoreCreate+0x58>
 8002684:	2300      	movs	r3, #0
 8002686:	2200      	movs	r2, #0
 8002688:	2100      	movs	r1, #0
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 fa7a 	bl	8002b84 <xQueueGenericSend>
      return sema;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	e000      	b.n	8002696 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8002694:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8002696:	4618      	mov	r0, r3
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
	...

080026a0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80026aa:	2300      	movs	r3, #0
 80026ac:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d101      	bne.n	80026b8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80026b4:	2380      	movs	r3, #128	; 0x80
 80026b6:	e03a      	b.n	800272e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80026b8:	2300      	movs	r3, #0
 80026ba:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c2:	d103      	bne.n	80026cc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80026c4:	f04f 33ff 	mov.w	r3, #4294967295
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	e009      	b.n	80026e0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d006      	beq.n	80026e0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <osSemaphoreWait+0x40>
      ticks = 1;
 80026dc:	2301      	movs	r3, #1
 80026de:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80026e0:	f7ff ff1e 	bl	8002520 <inHandlerMode>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d017      	beq.n	800271a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80026ea:	f107 0308 	add.w	r3, r7, #8
 80026ee:	461a      	mov	r2, r3
 80026f0:	2100      	movs	r1, #0
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 fe42 	bl	800337c <xQueueReceiveFromISR>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d001      	beq.n	8002702 <osSemaphoreWait+0x62>
      return osErrorOS;
 80026fe:	23ff      	movs	r3, #255	; 0xff
 8002700:	e015      	b.n	800272e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d011      	beq.n	800272c <osSemaphoreWait+0x8c>
 8002708:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <osSemaphoreWait+0x98>)
 800270a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	f3bf 8f4f 	dsb	sy
 8002714:	f3bf 8f6f 	isb	sy
 8002718:	e008      	b.n	800272c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800271a:	68f9      	ldr	r1, [r7, #12]
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 fd25 	bl	800316c <xQueueSemaphoreTake>
 8002722:	4603      	mov	r3, r0
 8002724:	2b01      	cmp	r3, #1
 8002726:	d001      	beq.n	800272c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8002728:	23ff      	movs	r3, #255	; 0xff
 800272a:	e000      	b.n	800272e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	e000ed04 	.word	0xe000ed04

0800273c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002744:	2300      	movs	r3, #0
 8002746:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002748:	2300      	movs	r3, #0
 800274a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800274c:	f7ff fee8 	bl	8002520 <inHandlerMode>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d016      	beq.n	8002784 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002756:	f107 0308 	add.w	r3, r7, #8
 800275a:	4619      	mov	r1, r3
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 fb9f 	bl	8002ea0 <xQueueGiveFromISR>
 8002762:	4603      	mov	r3, r0
 8002764:	2b01      	cmp	r3, #1
 8002766:	d001      	beq.n	800276c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8002768:	23ff      	movs	r3, #255	; 0xff
 800276a:	e017      	b.n	800279c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d013      	beq.n	800279a <osSemaphoreRelease+0x5e>
 8002772:	4b0c      	ldr	r3, [pc, #48]	; (80027a4 <osSemaphoreRelease+0x68>)
 8002774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	f3bf 8f4f 	dsb	sy
 800277e:	f3bf 8f6f 	isb	sy
 8002782:	e00a      	b.n	800279a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002784:	2300      	movs	r3, #0
 8002786:	2200      	movs	r2, #0
 8002788:	2100      	movs	r1, #0
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f9fa 	bl	8002b84 <xQueueGenericSend>
 8002790:	4603      	mov	r3, r0
 8002792:	2b01      	cmp	r3, #1
 8002794:	d001      	beq.n	800279a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8002796:	23ff      	movs	r3, #255	; 0xff
 8002798:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800279a:	68fb      	ldr	r3, [r7, #12]
}
 800279c:	4618      	mov	r0, r3
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	e000ed04 	.word	0xe000ed04

080027a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f103 0208 	add.w	r2, r3, #8
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f04f 32ff 	mov.w	r2, #4294967295
 80027c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f103 0208 	add.w	r2, r3, #8
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f103 0208 	add.w	r2, r3, #8
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002802:	b480      	push	{r7}
 8002804:	b085      	sub	sp, #20
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
 800280a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	1c5a      	adds	r2, r3, #1
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	601a      	str	r2, [r3, #0]
}
 800283e:	bf00      	nop
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800284a:	b480      	push	{r7}
 800284c:	b085      	sub	sp, #20
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
 8002852:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002860:	d103      	bne.n	800286a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	e00c      	b.n	8002884 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	3308      	adds	r3, #8
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	e002      	b.n	8002878 <vListInsert+0x2e>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68ba      	ldr	r2, [r7, #8]
 8002880:	429a      	cmp	r2, r3
 8002882:	d2f6      	bcs.n	8002872 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	1c5a      	adds	r2, r3, #1
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	601a      	str	r2, [r3, #0]
}
 80028b0:	bf00      	nop
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6892      	ldr	r2, [r2, #8]
 80028d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6852      	ldr	r2, [r2, #4]
 80028dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d103      	bne.n	80028f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	1e5a      	subs	r2, r3, #1
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3714      	adds	r7, #20
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d109      	bne.n	8002938 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002928:	f383 8811 	msr	BASEPRI, r3
 800292c:	f3bf 8f6f 	isb	sy
 8002930:	f3bf 8f4f 	dsb	sy
 8002934:	60bb      	str	r3, [r7, #8]
 8002936:	e7fe      	b.n	8002936 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002938:	f002 fba0 	bl	800507c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002944:	68f9      	ldr	r1, [r7, #12]
 8002946:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002948:	fb01 f303 	mul.w	r3, r1, r3
 800294c:	441a      	add	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002968:	3b01      	subs	r3, #1
 800296a:	68f9      	ldr	r1, [r7, #12]
 800296c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800296e:	fb01 f303 	mul.w	r3, r1, r3
 8002972:	441a      	add	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	22ff      	movs	r2, #255	; 0xff
 800297c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	22ff      	movs	r2, #255	; 0xff
 8002984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d114      	bne.n	80029b8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d01a      	beq.n	80029cc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	3310      	adds	r3, #16
 800299a:	4618      	mov	r0, r3
 800299c:	f001 fb32 	bl	8004004 <xTaskRemoveFromEventList>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d012      	beq.n	80029cc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80029a6:	4b0d      	ldr	r3, [pc, #52]	; (80029dc <xQueueGenericReset+0xcc>)
 80029a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	f3bf 8f4f 	dsb	sy
 80029b2:	f3bf 8f6f 	isb	sy
 80029b6:	e009      	b.n	80029cc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	3310      	adds	r3, #16
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff fef3 	bl	80027a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	3324      	adds	r3, #36	; 0x24
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff feee 	bl	80027a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80029cc:	f002 fb84 	bl	80050d8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80029d0:	2301      	movs	r3, #1
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	e000ed04 	.word	0xe000ed04

080029e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08e      	sub	sp, #56	; 0x38
 80029e4:	af02      	add	r7, sp, #8
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
 80029ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d109      	bne.n	8002a08 <xQueueGenericCreateStatic+0x28>
 80029f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f8:	f383 8811 	msr	BASEPRI, r3
 80029fc:	f3bf 8f6f 	isb	sy
 8002a00:	f3bf 8f4f 	dsb	sy
 8002a04:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a06:	e7fe      	b.n	8002a06 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d109      	bne.n	8002a22 <xQueueGenericCreateStatic+0x42>
 8002a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a12:	f383 8811 	msr	BASEPRI, r3
 8002a16:	f3bf 8f6f 	isb	sy
 8002a1a:	f3bf 8f4f 	dsb	sy
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a20:	e7fe      	b.n	8002a20 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d002      	beq.n	8002a2e <xQueueGenericCreateStatic+0x4e>
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <xQueueGenericCreateStatic+0x52>
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e000      	b.n	8002a34 <xQueueGenericCreateStatic+0x54>
 8002a32:	2300      	movs	r3, #0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d109      	bne.n	8002a4c <xQueueGenericCreateStatic+0x6c>
 8002a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a3c:	f383 8811 	msr	BASEPRI, r3
 8002a40:	f3bf 8f6f 	isb	sy
 8002a44:	f3bf 8f4f 	dsb	sy
 8002a48:	623b      	str	r3, [r7, #32]
 8002a4a:	e7fe      	b.n	8002a4a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d102      	bne.n	8002a58 <xQueueGenericCreateStatic+0x78>
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <xQueueGenericCreateStatic+0x7c>
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e000      	b.n	8002a5e <xQueueGenericCreateStatic+0x7e>
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d109      	bne.n	8002a76 <xQueueGenericCreateStatic+0x96>
 8002a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a66:	f383 8811 	msr	BASEPRI, r3
 8002a6a:	f3bf 8f6f 	isb	sy
 8002a6e:	f3bf 8f4f 	dsb	sy
 8002a72:	61fb      	str	r3, [r7, #28]
 8002a74:	e7fe      	b.n	8002a74 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002a76:	2348      	movs	r3, #72	; 0x48
 8002a78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	2b48      	cmp	r3, #72	; 0x48
 8002a7e:	d009      	beq.n	8002a94 <xQueueGenericCreateStatic+0xb4>
 8002a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a84:	f383 8811 	msr	BASEPRI, r3
 8002a88:	f3bf 8f6f 	isb	sy
 8002a8c:	f3bf 8f4f 	dsb	sy
 8002a90:	61bb      	str	r3, [r7, #24]
 8002a92:	e7fe      	b.n	8002a92 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002a94:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00d      	beq.n	8002abc <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002aa8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	68b9      	ldr	r1, [r7, #8]
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f000 f844 	bl	8002b44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3730      	adds	r7, #48	; 0x30
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b08a      	sub	sp, #40	; 0x28
 8002aca:	af02      	add	r7, sp, #8
 8002acc:	60f8      	str	r0, [r7, #12]
 8002ace:	60b9      	str	r1, [r7, #8]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d109      	bne.n	8002aee <xQueueGenericCreate+0x28>
 8002ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ade:	f383 8811 	msr	BASEPRI, r3
 8002ae2:	f3bf 8f6f 	isb	sy
 8002ae6:	f3bf 8f4f 	dsb	sy
 8002aea:	613b      	str	r3, [r7, #16]
 8002aec:	e7fe      	b.n	8002aec <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d102      	bne.n	8002afa <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	61fb      	str	r3, [r7, #28]
 8002af8:	e004      	b.n	8002b04 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	fb02 f303 	mul.w	r3, r2, r3
 8002b02:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	3348      	adds	r3, #72	; 0x48
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f002 fbd1 	bl	80052b0 <pvPortMalloc>
 8002b0e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d011      	beq.n	8002b3a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	3348      	adds	r3, #72	; 0x48
 8002b1e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b28:	79fa      	ldrb	r2, [r7, #7]
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	68b9      	ldr	r1, [r7, #8]
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 f805 	bl	8002b44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002b3a:	69bb      	ldr	r3, [r7, #24]
	}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3720      	adds	r7, #32
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
 8002b50:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d103      	bne.n	8002b60 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	e002      	b.n	8002b66 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b72:	2101      	movs	r1, #1
 8002b74:	69b8      	ldr	r0, [r7, #24]
 8002b76:	f7ff fecb 	bl	8002910 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002b7a:	bf00      	nop
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
	...

08002b84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08e      	sub	sp, #56	; 0x38
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
 8002b90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b92:	2300      	movs	r3, #0
 8002b94:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d109      	bne.n	8002bb4 <xQueueGenericSend+0x30>
 8002ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba4:	f383 8811 	msr	BASEPRI, r3
 8002ba8:	f3bf 8f6f 	isb	sy
 8002bac:	f3bf 8f4f 	dsb	sy
 8002bb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bb2:	e7fe      	b.n	8002bb2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d103      	bne.n	8002bc2 <xQueueGenericSend+0x3e>
 8002bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <xQueueGenericSend+0x42>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e000      	b.n	8002bc8 <xQueueGenericSend+0x44>
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d109      	bne.n	8002be0 <xQueueGenericSend+0x5c>
 8002bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd0:	f383 8811 	msr	BASEPRI, r3
 8002bd4:	f3bf 8f6f 	isb	sy
 8002bd8:	f3bf 8f4f 	dsb	sy
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bde:	e7fe      	b.n	8002bde <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d103      	bne.n	8002bee <xQueueGenericSend+0x6a>
 8002be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d101      	bne.n	8002bf2 <xQueueGenericSend+0x6e>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e000      	b.n	8002bf4 <xQueueGenericSend+0x70>
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d109      	bne.n	8002c0c <xQueueGenericSend+0x88>
 8002bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfc:	f383 8811 	msr	BASEPRI, r3
 8002c00:	f3bf 8f6f 	isb	sy
 8002c04:	f3bf 8f4f 	dsb	sy
 8002c08:	623b      	str	r3, [r7, #32]
 8002c0a:	e7fe      	b.n	8002c0a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c0c:	f001 fbb0 	bl	8004370 <xTaskGetSchedulerState>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d102      	bne.n	8002c1c <xQueueGenericSend+0x98>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <xQueueGenericSend+0x9c>
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e000      	b.n	8002c22 <xQueueGenericSend+0x9e>
 8002c20:	2300      	movs	r3, #0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d109      	bne.n	8002c3a <xQueueGenericSend+0xb6>
 8002c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2a:	f383 8811 	msr	BASEPRI, r3
 8002c2e:	f3bf 8f6f 	isb	sy
 8002c32:	f3bf 8f4f 	dsb	sy
 8002c36:	61fb      	str	r3, [r7, #28]
 8002c38:	e7fe      	b.n	8002c38 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c3a:	f002 fa1f 	bl	800507c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d302      	bcc.n	8002c50 <xQueueGenericSend+0xcc>
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d129      	bne.n	8002ca4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	68b9      	ldr	r1, [r7, #8]
 8002c54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c56:	f000 fc26 	bl	80034a6 <prvCopyDataToQueue>
 8002c5a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d010      	beq.n	8002c86 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c66:	3324      	adds	r3, #36	; 0x24
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f001 f9cb 	bl	8004004 <xTaskRemoveFromEventList>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d013      	beq.n	8002c9c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002c74:	4b3f      	ldr	r3, [pc, #252]	; (8002d74 <xQueueGenericSend+0x1f0>)
 8002c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	f3bf 8f4f 	dsb	sy
 8002c80:	f3bf 8f6f 	isb	sy
 8002c84:	e00a      	b.n	8002c9c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d007      	beq.n	8002c9c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002c8c:	4b39      	ldr	r3, [pc, #228]	; (8002d74 <xQueueGenericSend+0x1f0>)
 8002c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	f3bf 8f4f 	dsb	sy
 8002c98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002c9c:	f002 fa1c 	bl	80050d8 <vPortExitCritical>
				return pdPASS;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e063      	b.n	8002d6c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d103      	bne.n	8002cb2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002caa:	f002 fa15 	bl	80050d8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	e05c      	b.n	8002d6c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d106      	bne.n	8002cc6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002cb8:	f107 0314 	add.w	r3, r7, #20
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f001 fa03 	bl	80040c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002cc6:	f002 fa07 	bl	80050d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002cca:	f000 ff81 	bl	8003bd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002cce:	f002 f9d5 	bl	800507c <vPortEnterCritical>
 8002cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cd8:	b25b      	sxtb	r3, r3
 8002cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cde:	d103      	bne.n	8002ce8 <xQueueGenericSend+0x164>
 8002ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cee:	b25b      	sxtb	r3, r3
 8002cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf4:	d103      	bne.n	8002cfe <xQueueGenericSend+0x17a>
 8002cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cfe:	f002 f9eb 	bl	80050d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d02:	1d3a      	adds	r2, r7, #4
 8002d04:	f107 0314 	add.w	r3, r7, #20
 8002d08:	4611      	mov	r1, r2
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f001 f9f2 	bl	80040f4 <xTaskCheckForTimeOut>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d124      	bne.n	8002d60 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002d16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d18:	f000 fcbd 	bl	8003696 <prvIsQueueFull>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d018      	beq.n	8002d54 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d24:	3310      	adds	r3, #16
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	4611      	mov	r1, r2
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f001 f91c 	bl	8003f68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002d30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d32:	f000 fc48 	bl	80035c6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002d36:	f000 ff59 	bl	8003bec <xTaskResumeAll>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f47f af7c 	bne.w	8002c3a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002d42:	4b0c      	ldr	r3, [pc, #48]	; (8002d74 <xQueueGenericSend+0x1f0>)
 8002d44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	f3bf 8f4f 	dsb	sy
 8002d4e:	f3bf 8f6f 	isb	sy
 8002d52:	e772      	b.n	8002c3a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002d54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d56:	f000 fc36 	bl	80035c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d5a:	f000 ff47 	bl	8003bec <xTaskResumeAll>
 8002d5e:	e76c      	b.n	8002c3a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002d60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d62:	f000 fc30 	bl	80035c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d66:	f000 ff41 	bl	8003bec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002d6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3738      	adds	r7, #56	; 0x38
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	e000ed04 	.word	0xe000ed04

08002d78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b08e      	sub	sp, #56	; 0x38
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
 8002d84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d109      	bne.n	8002da4 <xQueueGenericSendFromISR+0x2c>
 8002d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d94:	f383 8811 	msr	BASEPRI, r3
 8002d98:	f3bf 8f6f 	isb	sy
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
 8002da2:	e7fe      	b.n	8002da2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d103      	bne.n	8002db2 <xQueueGenericSendFromISR+0x3a>
 8002daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <xQueueGenericSendFromISR+0x3e>
 8002db2:	2301      	movs	r3, #1
 8002db4:	e000      	b.n	8002db8 <xQueueGenericSendFromISR+0x40>
 8002db6:	2300      	movs	r3, #0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d109      	bne.n	8002dd0 <xQueueGenericSendFromISR+0x58>
 8002dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc0:	f383 8811 	msr	BASEPRI, r3
 8002dc4:	f3bf 8f6f 	isb	sy
 8002dc8:	f3bf 8f4f 	dsb	sy
 8002dcc:	623b      	str	r3, [r7, #32]
 8002dce:	e7fe      	b.n	8002dce <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d103      	bne.n	8002dde <xQueueGenericSendFromISR+0x66>
 8002dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d101      	bne.n	8002de2 <xQueueGenericSendFromISR+0x6a>
 8002dde:	2301      	movs	r3, #1
 8002de0:	e000      	b.n	8002de4 <xQueueGenericSendFromISR+0x6c>
 8002de2:	2300      	movs	r3, #0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d109      	bne.n	8002dfc <xQueueGenericSendFromISR+0x84>
 8002de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dec:	f383 8811 	msr	BASEPRI, r3
 8002df0:	f3bf 8f6f 	isb	sy
 8002df4:	f3bf 8f4f 	dsb	sy
 8002df8:	61fb      	str	r3, [r7, #28]
 8002dfa:	e7fe      	b.n	8002dfa <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002dfc:	f002 fa1a 	bl	8005234 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002e00:	f3ef 8211 	mrs	r2, BASEPRI
 8002e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e08:	f383 8811 	msr	BASEPRI, r3
 8002e0c:	f3bf 8f6f 	isb	sy
 8002e10:	f3bf 8f4f 	dsb	sy
 8002e14:	61ba      	str	r2, [r7, #24]
 8002e16:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002e18:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d302      	bcc.n	8002e2e <xQueueGenericSendFromISR+0xb6>
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d12c      	bne.n	8002e88 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	68b9      	ldr	r1, [r7, #8]
 8002e3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e3e:	f000 fb32 	bl	80034a6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002e42:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4a:	d112      	bne.n	8002e72 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d016      	beq.n	8002e82 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e56:	3324      	adds	r3, #36	; 0x24
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f001 f8d3 	bl	8004004 <xTaskRemoveFromEventList>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00e      	beq.n	8002e82 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00b      	beq.n	8002e82 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	e007      	b.n	8002e82 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002e72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002e76:	3301      	adds	r3, #1
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	b25a      	sxtb	r2, r3
 8002e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002e82:	2301      	movs	r3, #1
 8002e84:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002e86:	e001      	b.n	8002e8c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	637b      	str	r3, [r7, #52]	; 0x34
 8002e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3738      	adds	r7, #56	; 0x38
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b08e      	sub	sp, #56	; 0x38
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d109      	bne.n	8002ec8 <xQueueGiveFromISR+0x28>
	__asm volatile
 8002eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb8:	f383 8811 	msr	BASEPRI, r3
 8002ebc:	f3bf 8f6f 	isb	sy
 8002ec0:	f3bf 8f4f 	dsb	sy
 8002ec4:	623b      	str	r3, [r7, #32]
 8002ec6:	e7fe      	b.n	8002ec6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d009      	beq.n	8002ee4 <xQueueGiveFromISR+0x44>
 8002ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed4:	f383 8811 	msr	BASEPRI, r3
 8002ed8:	f3bf 8f6f 	isb	sy
 8002edc:	f3bf 8f4f 	dsb	sy
 8002ee0:	61fb      	str	r3, [r7, #28]
 8002ee2:	e7fe      	b.n	8002ee2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d103      	bne.n	8002ef4 <xQueueGiveFromISR+0x54>
 8002eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <xQueueGiveFromISR+0x58>
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e000      	b.n	8002efa <xQueueGiveFromISR+0x5a>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d109      	bne.n	8002f12 <xQueueGiveFromISR+0x72>
 8002efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f02:	f383 8811 	msr	BASEPRI, r3
 8002f06:	f3bf 8f6f 	isb	sy
 8002f0a:	f3bf 8f4f 	dsb	sy
 8002f0e:	61bb      	str	r3, [r7, #24]
 8002f10:	e7fe      	b.n	8002f10 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f12:	f002 f98f 	bl	8005234 <vPortValidateInterruptPriority>
	__asm volatile
 8002f16:	f3ef 8211 	mrs	r2, BASEPRI
 8002f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1e:	f383 8811 	msr	BASEPRI, r3
 8002f22:	f3bf 8f6f 	isb	sy
 8002f26:	f3bf 8f4f 	dsb	sy
 8002f2a:	617a      	str	r2, [r7, #20]
 8002f2c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8002f2e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d22b      	bcs.n	8002f9a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4e:	1c5a      	adds	r2, r3, #1
 8002f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f52:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002f54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5c:	d112      	bne.n	8002f84 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d016      	beq.n	8002f94 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f68:	3324      	adds	r3, #36	; 0x24
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f001 f84a 	bl	8004004 <xTaskRemoveFromEventList>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00e      	beq.n	8002f94 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00b      	beq.n	8002f94 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	e007      	b.n	8002f94 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002f84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f88:	3301      	adds	r3, #1
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	b25a      	sxtb	r2, r3
 8002f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002f94:	2301      	movs	r3, #1
 8002f96:	637b      	str	r3, [r7, #52]	; 0x34
 8002f98:	e001      	b.n	8002f9e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3738      	adds	r7, #56	; 0x38
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b08c      	sub	sp, #48	; 0x30
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d109      	bne.n	8002fe2 <xQueueReceive+0x2e>
	__asm volatile
 8002fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd2:	f383 8811 	msr	BASEPRI, r3
 8002fd6:	f3bf 8f6f 	isb	sy
 8002fda:	f3bf 8f4f 	dsb	sy
 8002fde:	623b      	str	r3, [r7, #32]
 8002fe0:	e7fe      	b.n	8002fe0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d103      	bne.n	8002ff0 <xQueueReceive+0x3c>
 8002fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <xQueueReceive+0x40>
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e000      	b.n	8002ff6 <xQueueReceive+0x42>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d109      	bne.n	800300e <xQueueReceive+0x5a>
 8002ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffe:	f383 8811 	msr	BASEPRI, r3
 8003002:	f3bf 8f6f 	isb	sy
 8003006:	f3bf 8f4f 	dsb	sy
 800300a:	61fb      	str	r3, [r7, #28]
 800300c:	e7fe      	b.n	800300c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800300e:	f001 f9af 	bl	8004370 <xTaskGetSchedulerState>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d102      	bne.n	800301e <xQueueReceive+0x6a>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <xQueueReceive+0x6e>
 800301e:	2301      	movs	r3, #1
 8003020:	e000      	b.n	8003024 <xQueueReceive+0x70>
 8003022:	2300      	movs	r3, #0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d109      	bne.n	800303c <xQueueReceive+0x88>
 8003028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800302c:	f383 8811 	msr	BASEPRI, r3
 8003030:	f3bf 8f6f 	isb	sy
 8003034:	f3bf 8f4f 	dsb	sy
 8003038:	61bb      	str	r3, [r7, #24]
 800303a:	e7fe      	b.n	800303a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800303c:	f002 f81e 	bl	800507c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003044:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	2b00      	cmp	r3, #0
 800304a:	d01f      	beq.n	800308c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800304c:	68b9      	ldr	r1, [r7, #8]
 800304e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003050:	f000 fa93 	bl	800357a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	1e5a      	subs	r2, r3, #1
 8003058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800305c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00f      	beq.n	8003084 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003066:	3310      	adds	r3, #16
 8003068:	4618      	mov	r0, r3
 800306a:	f000 ffcb 	bl	8004004 <xTaskRemoveFromEventList>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d007      	beq.n	8003084 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003074:	4b3c      	ldr	r3, [pc, #240]	; (8003168 <xQueueReceive+0x1b4>)
 8003076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	f3bf 8f4f 	dsb	sy
 8003080:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003084:	f002 f828 	bl	80050d8 <vPortExitCritical>
				return pdPASS;
 8003088:	2301      	movs	r3, #1
 800308a:	e069      	b.n	8003160 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d103      	bne.n	800309a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003092:	f002 f821 	bl	80050d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003096:	2300      	movs	r3, #0
 8003098:	e062      	b.n	8003160 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800309a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800309c:	2b00      	cmp	r3, #0
 800309e:	d106      	bne.n	80030ae <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030a0:	f107 0310 	add.w	r3, r7, #16
 80030a4:	4618      	mov	r0, r3
 80030a6:	f001 f80f 	bl	80040c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030aa:	2301      	movs	r3, #1
 80030ac:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030ae:	f002 f813 	bl	80050d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030b2:	f000 fd8d 	bl	8003bd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030b6:	f001 ffe1 	bl	800507c <vPortEnterCritical>
 80030ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030c0:	b25b      	sxtb	r3, r3
 80030c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c6:	d103      	bne.n	80030d0 <xQueueReceive+0x11c>
 80030c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030d6:	b25b      	sxtb	r3, r3
 80030d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030dc:	d103      	bne.n	80030e6 <xQueueReceive+0x132>
 80030de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030e6:	f001 fff7 	bl	80050d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030ea:	1d3a      	adds	r2, r7, #4
 80030ec:	f107 0310 	add.w	r3, r7, #16
 80030f0:	4611      	mov	r1, r2
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 fffe 	bl	80040f4 <xTaskCheckForTimeOut>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d123      	bne.n	8003146 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003100:	f000 fab3 	bl	800366a <prvIsQueueEmpty>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d017      	beq.n	800313a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800310a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800310c:	3324      	adds	r3, #36	; 0x24
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	4611      	mov	r1, r2
 8003112:	4618      	mov	r0, r3
 8003114:	f000 ff28 	bl	8003f68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003118:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800311a:	f000 fa54 	bl	80035c6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800311e:	f000 fd65 	bl	8003bec <xTaskResumeAll>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d189      	bne.n	800303c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003128:	4b0f      	ldr	r3, [pc, #60]	; (8003168 <xQueueReceive+0x1b4>)
 800312a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	f3bf 8f4f 	dsb	sy
 8003134:	f3bf 8f6f 	isb	sy
 8003138:	e780      	b.n	800303c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800313a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800313c:	f000 fa43 	bl	80035c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003140:	f000 fd54 	bl	8003bec <xTaskResumeAll>
 8003144:	e77a      	b.n	800303c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003146:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003148:	f000 fa3d 	bl	80035c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800314c:	f000 fd4e 	bl	8003bec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003150:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003152:	f000 fa8a 	bl	800366a <prvIsQueueEmpty>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	f43f af6f 	beq.w	800303c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800315e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003160:	4618      	mov	r0, r3
 8003162:	3730      	adds	r7, #48	; 0x30
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	e000ed04 	.word	0xe000ed04

0800316c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b08e      	sub	sp, #56	; 0x38
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003176:	2300      	movs	r3, #0
 8003178:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800317e:	2300      	movs	r3, #0
 8003180:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003184:	2b00      	cmp	r3, #0
 8003186:	d109      	bne.n	800319c <xQueueSemaphoreTake+0x30>
 8003188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318c:	f383 8811 	msr	BASEPRI, r3
 8003190:	f3bf 8f6f 	isb	sy
 8003194:	f3bf 8f4f 	dsb	sy
 8003198:	623b      	str	r3, [r7, #32]
 800319a:	e7fe      	b.n	800319a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800319c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d009      	beq.n	80031b8 <xQueueSemaphoreTake+0x4c>
 80031a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a8:	f383 8811 	msr	BASEPRI, r3
 80031ac:	f3bf 8f6f 	isb	sy
 80031b0:	f3bf 8f4f 	dsb	sy
 80031b4:	61fb      	str	r3, [r7, #28]
 80031b6:	e7fe      	b.n	80031b6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031b8:	f001 f8da 	bl	8004370 <xTaskGetSchedulerState>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d102      	bne.n	80031c8 <xQueueSemaphoreTake+0x5c>
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <xQueueSemaphoreTake+0x60>
 80031c8:	2301      	movs	r3, #1
 80031ca:	e000      	b.n	80031ce <xQueueSemaphoreTake+0x62>
 80031cc:	2300      	movs	r3, #0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d109      	bne.n	80031e6 <xQueueSemaphoreTake+0x7a>
 80031d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d6:	f383 8811 	msr	BASEPRI, r3
 80031da:	f3bf 8f6f 	isb	sy
 80031de:	f3bf 8f4f 	dsb	sy
 80031e2:	61bb      	str	r3, [r7, #24]
 80031e4:	e7fe      	b.n	80031e4 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80031e6:	f001 ff49 	bl	800507c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80031ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ee:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80031f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d024      	beq.n	8003240 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80031f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f8:	1e5a      	subs	r2, r3, #1
 80031fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fc:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d104      	bne.n	8003210 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003206:	f001 fa6d 	bl	80046e4 <pvTaskIncrementMutexHeldCount>
 800320a:	4602      	mov	r2, r0
 800320c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00f      	beq.n	8003238 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800321a:	3310      	adds	r3, #16
 800321c:	4618      	mov	r0, r3
 800321e:	f000 fef1 	bl	8004004 <xTaskRemoveFromEventList>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d007      	beq.n	8003238 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003228:	4b53      	ldr	r3, [pc, #332]	; (8003378 <xQueueSemaphoreTake+0x20c>)
 800322a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	f3bf 8f4f 	dsb	sy
 8003234:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003238:	f001 ff4e 	bl	80050d8 <vPortExitCritical>
				return pdPASS;
 800323c:	2301      	movs	r3, #1
 800323e:	e096      	b.n	800336e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d110      	bne.n	8003268 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003248:	2b00      	cmp	r3, #0
 800324a:	d009      	beq.n	8003260 <xQueueSemaphoreTake+0xf4>
 800324c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003250:	f383 8811 	msr	BASEPRI, r3
 8003254:	f3bf 8f6f 	isb	sy
 8003258:	f3bf 8f4f 	dsb	sy
 800325c:	617b      	str	r3, [r7, #20]
 800325e:	e7fe      	b.n	800325e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003260:	f001 ff3a 	bl	80050d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003264:	2300      	movs	r3, #0
 8003266:	e082      	b.n	800336e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800326a:	2b00      	cmp	r3, #0
 800326c:	d106      	bne.n	800327c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800326e:	f107 030c 	add.w	r3, r7, #12
 8003272:	4618      	mov	r0, r3
 8003274:	f000 ff28 	bl	80040c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003278:	2301      	movs	r3, #1
 800327a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800327c:	f001 ff2c 	bl	80050d8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003280:	f000 fca6 	bl	8003bd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003284:	f001 fefa 	bl	800507c <vPortEnterCritical>
 8003288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800328e:	b25b      	sxtb	r3, r3
 8003290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003294:	d103      	bne.n	800329e <xQueueSemaphoreTake+0x132>
 8003296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800329e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032a4:	b25b      	sxtb	r3, r3
 80032a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032aa:	d103      	bne.n	80032b4 <xQueueSemaphoreTake+0x148>
 80032ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032b4:	f001 ff10 	bl	80050d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032b8:	463a      	mov	r2, r7
 80032ba:	f107 030c 	add.w	r3, r7, #12
 80032be:	4611      	mov	r1, r2
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 ff17 	bl	80040f4 <xTaskCheckForTimeOut>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d132      	bne.n	8003332 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032ce:	f000 f9cc 	bl	800366a <prvIsQueueEmpty>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d026      	beq.n	8003326 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d109      	bne.n	80032f4 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80032e0:	f001 fecc 	bl	800507c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80032e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f001 f85f 	bl	80043ac <xTaskPriorityInherit>
 80032ee:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80032f0:	f001 fef2 	bl	80050d8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80032f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f6:	3324      	adds	r3, #36	; 0x24
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	4611      	mov	r1, r2
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 fe33 	bl	8003f68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003302:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003304:	f000 f95f 	bl	80035c6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003308:	f000 fc70 	bl	8003bec <xTaskResumeAll>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	f47f af69 	bne.w	80031e6 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8003314:	4b18      	ldr	r3, [pc, #96]	; (8003378 <xQueueSemaphoreTake+0x20c>)
 8003316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	f3bf 8f4f 	dsb	sy
 8003320:	f3bf 8f6f 	isb	sy
 8003324:	e75f      	b.n	80031e6 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003326:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003328:	f000 f94d 	bl	80035c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800332c:	f000 fc5e 	bl	8003bec <xTaskResumeAll>
 8003330:	e759      	b.n	80031e6 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003332:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003334:	f000 f947 	bl	80035c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003338:	f000 fc58 	bl	8003bec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800333c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800333e:	f000 f994 	bl	800366a <prvIsQueueEmpty>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	f43f af4e 	beq.w	80031e6 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800334a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00d      	beq.n	800336c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8003350:	f001 fe94 	bl	800507c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003354:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003356:	f000 f88e 	bl	8003476 <prvGetDisinheritPriorityAfterTimeout>
 800335a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800335c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003362:	4618      	mov	r0, r3
 8003364:	f001 f926 	bl	80045b4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003368:	f001 feb6 	bl	80050d8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800336c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800336e:	4618      	mov	r0, r3
 8003370:	3738      	adds	r7, #56	; 0x38
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	e000ed04 	.word	0xe000ed04

0800337c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b08e      	sub	sp, #56	; 0x38
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800338c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338e:	2b00      	cmp	r3, #0
 8003390:	d109      	bne.n	80033a6 <xQueueReceiveFromISR+0x2a>
 8003392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003396:	f383 8811 	msr	BASEPRI, r3
 800339a:	f3bf 8f6f 	isb	sy
 800339e:	f3bf 8f4f 	dsb	sy
 80033a2:	623b      	str	r3, [r7, #32]
 80033a4:	e7fe      	b.n	80033a4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d103      	bne.n	80033b4 <xQueueReceiveFromISR+0x38>
 80033ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <xQueueReceiveFromISR+0x3c>
 80033b4:	2301      	movs	r3, #1
 80033b6:	e000      	b.n	80033ba <xQueueReceiveFromISR+0x3e>
 80033b8:	2300      	movs	r3, #0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d109      	bne.n	80033d2 <xQueueReceiveFromISR+0x56>
 80033be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c2:	f383 8811 	msr	BASEPRI, r3
 80033c6:	f3bf 8f6f 	isb	sy
 80033ca:	f3bf 8f4f 	dsb	sy
 80033ce:	61fb      	str	r3, [r7, #28]
 80033d0:	e7fe      	b.n	80033d0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80033d2:	f001 ff2f 	bl	8005234 <vPortValidateInterruptPriority>
	__asm volatile
 80033d6:	f3ef 8211 	mrs	r2, BASEPRI
 80033da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033de:	f383 8811 	msr	BASEPRI, r3
 80033e2:	f3bf 8f6f 	isb	sy
 80033e6:	f3bf 8f4f 	dsb	sy
 80033ea:	61ba      	str	r2, [r7, #24]
 80033ec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80033ee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80033f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d02f      	beq.n	800345e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80033fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003400:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003408:	68b9      	ldr	r1, [r7, #8]
 800340a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800340c:	f000 f8b5 	bl	800357a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003412:	1e5a      	subs	r2, r3, #1
 8003414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003416:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003418:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800341c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003420:	d112      	bne.n	8003448 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d016      	beq.n	8003458 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800342a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342c:	3310      	adds	r3, #16
 800342e:	4618      	mov	r0, r3
 8003430:	f000 fde8 	bl	8004004 <xTaskRemoveFromEventList>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00e      	beq.n	8003458 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00b      	beq.n	8003458 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	e007      	b.n	8003458 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003448:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800344c:	3301      	adds	r3, #1
 800344e:	b2db      	uxtb	r3, r3
 8003450:	b25a      	sxtb	r2, r3
 8003452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003458:	2301      	movs	r3, #1
 800345a:	637b      	str	r3, [r7, #52]	; 0x34
 800345c:	e001      	b.n	8003462 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800345e:	2300      	movs	r3, #0
 8003460:	637b      	str	r3, [r7, #52]	; 0x34
 8003462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003464:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800346c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800346e:	4618      	mov	r0, r3
 8003470:	3738      	adds	r7, #56	; 0x38
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003476:	b480      	push	{r7}
 8003478:	b085      	sub	sp, #20
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003482:	2b00      	cmp	r3, #0
 8003484:	d006      	beq.n	8003494 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f1c3 0307 	rsb	r3, r3, #7
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	e001      	b.n	8003498 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003494:	2300      	movs	r3, #0
 8003496:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003498:	68fb      	ldr	r3, [r7, #12]
	}
 800349a:	4618      	mov	r0, r3
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b086      	sub	sp, #24
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	60b9      	str	r1, [r7, #8]
 80034b0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80034b2:	2300      	movs	r3, #0
 80034b4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ba:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10d      	bne.n	80034e0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d14d      	bne.n	8003568 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 ffeb 	bl	80044ac <xTaskPriorityDisinherit>
 80034d6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	609a      	str	r2, [r3, #8]
 80034de:	e043      	b.n	8003568 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d119      	bne.n	800351a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6858      	ldr	r0, [r3, #4]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	461a      	mov	r2, r3
 80034f0:	68b9      	ldr	r1, [r7, #8]
 80034f2:	f002 f8dd 	bl	80056b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	441a      	add	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	429a      	cmp	r2, r3
 800350e:	d32b      	bcc.n	8003568 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	605a      	str	r2, [r3, #4]
 8003518:	e026      	b.n	8003568 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	68d8      	ldr	r0, [r3, #12]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	461a      	mov	r2, r3
 8003524:	68b9      	ldr	r1, [r7, #8]
 8003526:	f002 f8c3 	bl	80056b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	68da      	ldr	r2, [r3, #12]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	425b      	negs	r3, r3
 8003534:	441a      	add	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	429a      	cmp	r2, r3
 8003544:	d207      	bcs.n	8003556 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	689a      	ldr	r2, [r3, #8]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	425b      	negs	r3, r3
 8003550:	441a      	add	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2b02      	cmp	r3, #2
 800355a:	d105      	bne.n	8003568 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d002      	beq.n	8003568 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	3b01      	subs	r3, #1
 8003566:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1c5a      	adds	r2, r3, #1
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003570:	697b      	ldr	r3, [r7, #20]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b082      	sub	sp, #8
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
 8003582:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003588:	2b00      	cmp	r3, #0
 800358a:	d018      	beq.n	80035be <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68da      	ldr	r2, [r3, #12]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003594:	441a      	add	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d303      	bcc.n	80035ae <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68d9      	ldr	r1, [r3, #12]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	461a      	mov	r2, r3
 80035b8:	6838      	ldr	r0, [r7, #0]
 80035ba:	f002 f879 	bl	80056b0 <memcpy>
	}
}
 80035be:	bf00      	nop
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b084      	sub	sp, #16
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80035ce:	f001 fd55 	bl	800507c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035d8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80035da:	e011      	b.n	8003600 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d012      	beq.n	800360a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3324      	adds	r3, #36	; 0x24
 80035e8:	4618      	mov	r0, r3
 80035ea:	f000 fd0b 	bl	8004004 <xTaskRemoveFromEventList>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80035f4:	f000 fdde 	bl	80041b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003604:	2b00      	cmp	r3, #0
 8003606:	dce9      	bgt.n	80035dc <prvUnlockQueue+0x16>
 8003608:	e000      	b.n	800360c <prvUnlockQueue+0x46>
					break;
 800360a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	22ff      	movs	r2, #255	; 0xff
 8003610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003614:	f001 fd60 	bl	80050d8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003618:	f001 fd30 	bl	800507c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003622:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003624:	e011      	b.n	800364a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d012      	beq.n	8003654 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	3310      	adds	r3, #16
 8003632:	4618      	mov	r0, r3
 8003634:	f000 fce6 	bl	8004004 <xTaskRemoveFromEventList>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800363e:	f000 fdb9 	bl	80041b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003642:	7bbb      	ldrb	r3, [r7, #14]
 8003644:	3b01      	subs	r3, #1
 8003646:	b2db      	uxtb	r3, r3
 8003648:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800364a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800364e:	2b00      	cmp	r3, #0
 8003650:	dce9      	bgt.n	8003626 <prvUnlockQueue+0x60>
 8003652:	e000      	b.n	8003656 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003654:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	22ff      	movs	r2, #255	; 0xff
 800365a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800365e:	f001 fd3b 	bl	80050d8 <vPortExitCritical>
}
 8003662:	bf00      	nop
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b084      	sub	sp, #16
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003672:	f001 fd03 	bl	800507c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367a:	2b00      	cmp	r3, #0
 800367c:	d102      	bne.n	8003684 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800367e:	2301      	movs	r3, #1
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	e001      	b.n	8003688 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003684:	2300      	movs	r3, #0
 8003686:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003688:	f001 fd26 	bl	80050d8 <vPortExitCritical>

	return xReturn;
 800368c:	68fb      	ldr	r3, [r7, #12]
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b084      	sub	sp, #16
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800369e:	f001 fced 	bl	800507c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d102      	bne.n	80036b4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80036ae:	2301      	movs	r3, #1
 80036b0:	60fb      	str	r3, [r7, #12]
 80036b2:	e001      	b.n	80036b8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80036b4:	2300      	movs	r3, #0
 80036b6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80036b8:	f001 fd0e 	bl	80050d8 <vPortExitCritical>

	return xReturn;
 80036bc:	68fb      	ldr	r3, [r7, #12]
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
	...

080036c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80036d2:	2300      	movs	r3, #0
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	e014      	b.n	8003702 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80036d8:	4a0e      	ldr	r2, [pc, #56]	; (8003714 <vQueueAddToRegistry+0x4c>)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10b      	bne.n	80036fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80036e4:	490b      	ldr	r1, [pc, #44]	; (8003714 <vQueueAddToRegistry+0x4c>)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80036ee:	4a09      	ldr	r2, [pc, #36]	; (8003714 <vQueueAddToRegistry+0x4c>)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	4413      	add	r3, r2
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80036fa:	e005      	b.n	8003708 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	3301      	adds	r3, #1
 8003700:	60fb      	str	r3, [r7, #12]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2b07      	cmp	r3, #7
 8003706:	d9e7      	bls.n	80036d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003708:	bf00      	nop
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	200045e8 	.word	0x200045e8

08003718 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003728:	f001 fca8 	bl	800507c <vPortEnterCritical>
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003732:	b25b      	sxtb	r3, r3
 8003734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003738:	d103      	bne.n	8003742 <vQueueWaitForMessageRestricted+0x2a>
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003748:	b25b      	sxtb	r3, r3
 800374a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374e:	d103      	bne.n	8003758 <vQueueWaitForMessageRestricted+0x40>
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003758:	f001 fcbe 	bl	80050d8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003760:	2b00      	cmp	r3, #0
 8003762:	d106      	bne.n	8003772 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	3324      	adds	r3, #36	; 0x24
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	68b9      	ldr	r1, [r7, #8]
 800376c:	4618      	mov	r0, r3
 800376e:	f000 fc1f 	bl	8003fb0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003772:	6978      	ldr	r0, [r7, #20]
 8003774:	f7ff ff27 	bl	80035c6 <prvUnlockQueue>
	}
 8003778:	bf00      	nop
 800377a:	3718      	adds	r7, #24
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003780:	b580      	push	{r7, lr}
 8003782:	b08e      	sub	sp, #56	; 0x38
 8003784:	af04      	add	r7, sp, #16
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
 800378c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800378e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003790:	2b00      	cmp	r3, #0
 8003792:	d109      	bne.n	80037a8 <xTaskCreateStatic+0x28>
	__asm volatile
 8003794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003798:	f383 8811 	msr	BASEPRI, r3
 800379c:	f3bf 8f6f 	isb	sy
 80037a0:	f3bf 8f4f 	dsb	sy
 80037a4:	623b      	str	r3, [r7, #32]
 80037a6:	e7fe      	b.n	80037a6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80037a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d109      	bne.n	80037c2 <xTaskCreateStatic+0x42>
 80037ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b2:	f383 8811 	msr	BASEPRI, r3
 80037b6:	f3bf 8f6f 	isb	sy
 80037ba:	f3bf 8f4f 	dsb	sy
 80037be:	61fb      	str	r3, [r7, #28]
 80037c0:	e7fe      	b.n	80037c0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80037c2:	2354      	movs	r3, #84	; 0x54
 80037c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	2b54      	cmp	r3, #84	; 0x54
 80037ca:	d009      	beq.n	80037e0 <xTaskCreateStatic+0x60>
 80037cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d0:	f383 8811 	msr	BASEPRI, r3
 80037d4:	f3bf 8f6f 	isb	sy
 80037d8:	f3bf 8f4f 	dsb	sy
 80037dc:	61bb      	str	r3, [r7, #24]
 80037de:	e7fe      	b.n	80037de <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80037e0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80037e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d01e      	beq.n	8003826 <xTaskCreateStatic+0xa6>
 80037e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d01b      	beq.n	8003826 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037f6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003800:	2300      	movs	r3, #0
 8003802:	9303      	str	r3, [sp, #12]
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003806:	9302      	str	r3, [sp, #8]
 8003808:	f107 0314 	add.w	r3, r7, #20
 800380c:	9301      	str	r3, [sp, #4]
 800380e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	68b9      	ldr	r1, [r7, #8]
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 f850 	bl	80038be <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800381e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003820:	f000 f8d4 	bl	80039cc <prvAddNewTaskToReadyList>
 8003824:	e001      	b.n	800382a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8003826:	2300      	movs	r3, #0
 8003828:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800382a:	697b      	ldr	r3, [r7, #20]
	}
 800382c:	4618      	mov	r0, r3
 800382e:	3728      	adds	r7, #40	; 0x28
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003834:	b580      	push	{r7, lr}
 8003836:	b08c      	sub	sp, #48	; 0x30
 8003838:	af04      	add	r7, sp, #16
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	603b      	str	r3, [r7, #0]
 8003840:	4613      	mov	r3, r2
 8003842:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003844:	88fb      	ldrh	r3, [r7, #6]
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4618      	mov	r0, r3
 800384a:	f001 fd31 	bl	80052b0 <pvPortMalloc>
 800384e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00e      	beq.n	8003874 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003856:	2054      	movs	r0, #84	; 0x54
 8003858:	f001 fd2a 	bl	80052b0 <pvPortMalloc>
 800385c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d003      	beq.n	800386c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	631a      	str	r2, [r3, #48]	; 0x30
 800386a:	e005      	b.n	8003878 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800386c:	6978      	ldr	r0, [r7, #20]
 800386e:	f001 fde1 	bl	8005434 <vPortFree>
 8003872:	e001      	b.n	8003878 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003874:	2300      	movs	r3, #0
 8003876:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d017      	beq.n	80038ae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003886:	88fa      	ldrh	r2, [r7, #6]
 8003888:	2300      	movs	r3, #0
 800388a:	9303      	str	r3, [sp, #12]
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	9302      	str	r3, [sp, #8]
 8003890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003892:	9301      	str	r3, [sp, #4]
 8003894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	68b9      	ldr	r1, [r7, #8]
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 f80e 	bl	80038be <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038a2:	69f8      	ldr	r0, [r7, #28]
 80038a4:	f000 f892 	bl	80039cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80038a8:	2301      	movs	r3, #1
 80038aa:	61bb      	str	r3, [r7, #24]
 80038ac:	e002      	b.n	80038b4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80038ae:	f04f 33ff 	mov.w	r3, #4294967295
 80038b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80038b4:	69bb      	ldr	r3, [r7, #24]
	}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3720      	adds	r7, #32
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b088      	sub	sp, #32
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	60f8      	str	r0, [r7, #12]
 80038c6:	60b9      	str	r1, [r7, #8]
 80038c8:	607a      	str	r2, [r7, #4]
 80038ca:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80038cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80038d6:	3b01      	subs	r3, #1
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4413      	add	r3, r2
 80038dc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	f023 0307 	bic.w	r3, r3, #7
 80038e4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d009      	beq.n	8003904 <prvInitialiseNewTask+0x46>
 80038f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f4:	f383 8811 	msr	BASEPRI, r3
 80038f8:	f3bf 8f6f 	isb	sy
 80038fc:	f3bf 8f4f 	dsb	sy
 8003900:	617b      	str	r3, [r7, #20]
 8003902:	e7fe      	b.n	8003902 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d01f      	beq.n	800394a <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800390a:	2300      	movs	r3, #0
 800390c:	61fb      	str	r3, [r7, #28]
 800390e:	e012      	b.n	8003936 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003910:	68ba      	ldr	r2, [r7, #8]
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	4413      	add	r3, r2
 8003916:	7819      	ldrb	r1, [r3, #0]
 8003918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	4413      	add	r3, r2
 800391e:	3334      	adds	r3, #52	; 0x34
 8003920:	460a      	mov	r2, r1
 8003922:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	4413      	add	r3, r2
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d006      	beq.n	800393e <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	3301      	adds	r3, #1
 8003934:	61fb      	str	r3, [r7, #28]
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	2b0f      	cmp	r3, #15
 800393a:	d9e9      	bls.n	8003910 <prvInitialiseNewTask+0x52>
 800393c:	e000      	b.n	8003940 <prvInitialiseNewTask+0x82>
			{
				break;
 800393e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003948:	e003      	b.n	8003952 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800394a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003954:	2b06      	cmp	r3, #6
 8003956:	d901      	bls.n	800395c <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003958:	2306      	movs	r3, #6
 800395a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800395c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003960:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003964:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003966:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396a:	2200      	movs	r2, #0
 800396c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800396e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003970:	3304      	adds	r3, #4
 8003972:	4618      	mov	r0, r3
 8003974:	f7fe ff38 	bl	80027e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397a:	3318      	adds	r3, #24
 800397c:	4618      	mov	r0, r3
 800397e:	f7fe ff33 	bl	80027e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003986:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398a:	f1c3 0207 	rsb	r2, r3, #7
 800398e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003990:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003996:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399a:	2200      	movs	r2, #0
 800399c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800399e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	68f9      	ldr	r1, [r7, #12]
 80039aa:	69b8      	ldr	r0, [r7, #24]
 80039ac:	f001 fa42 	bl	8004e34 <pxPortInitialiseStack>
 80039b0:	4602      	mov	r2, r0
 80039b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80039b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d002      	beq.n	80039c2 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80039bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039c2:	bf00      	nop
 80039c4:	3720      	adds	r7, #32
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
	...

080039cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80039d4:	f001 fb52 	bl	800507c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80039d8:	4b2a      	ldr	r3, [pc, #168]	; (8003a84 <prvAddNewTaskToReadyList+0xb8>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	3301      	adds	r3, #1
 80039de:	4a29      	ldr	r2, [pc, #164]	; (8003a84 <prvAddNewTaskToReadyList+0xb8>)
 80039e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80039e2:	4b29      	ldr	r3, [pc, #164]	; (8003a88 <prvAddNewTaskToReadyList+0xbc>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d109      	bne.n	80039fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80039ea:	4a27      	ldr	r2, [pc, #156]	; (8003a88 <prvAddNewTaskToReadyList+0xbc>)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80039f0:	4b24      	ldr	r3, [pc, #144]	; (8003a84 <prvAddNewTaskToReadyList+0xb8>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d110      	bne.n	8003a1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80039f8:	f000 fc00 	bl	80041fc <prvInitialiseTaskLists>
 80039fc:	e00d      	b.n	8003a1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80039fe:	4b23      	ldr	r3, [pc, #140]	; (8003a8c <prvAddNewTaskToReadyList+0xc0>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d109      	bne.n	8003a1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a06:	4b20      	ldr	r3, [pc, #128]	; (8003a88 <prvAddNewTaskToReadyList+0xbc>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d802      	bhi.n	8003a1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003a14:	4a1c      	ldr	r2, [pc, #112]	; (8003a88 <prvAddNewTaskToReadyList+0xbc>)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003a1a:	4b1d      	ldr	r3, [pc, #116]	; (8003a90 <prvAddNewTaskToReadyList+0xc4>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	4a1b      	ldr	r2, [pc, #108]	; (8003a90 <prvAddNewTaskToReadyList+0xc4>)
 8003a22:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a28:	2201      	movs	r2, #1
 8003a2a:	409a      	lsls	r2, r3
 8003a2c:	4b19      	ldr	r3, [pc, #100]	; (8003a94 <prvAddNewTaskToReadyList+0xc8>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	4a18      	ldr	r2, [pc, #96]	; (8003a94 <prvAddNewTaskToReadyList+0xc8>)
 8003a34:	6013      	str	r3, [r2, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4a15      	ldr	r2, [pc, #84]	; (8003a98 <prvAddNewTaskToReadyList+0xcc>)
 8003a44:	441a      	add	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	3304      	adds	r3, #4
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	4610      	mov	r0, r2
 8003a4e:	f7fe fed8 	bl	8002802 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003a52:	f001 fb41 	bl	80050d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003a56:	4b0d      	ldr	r3, [pc, #52]	; (8003a8c <prvAddNewTaskToReadyList+0xc0>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00e      	beq.n	8003a7c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a5e:	4b0a      	ldr	r3, [pc, #40]	; (8003a88 <prvAddNewTaskToReadyList+0xbc>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d207      	bcs.n	8003a7c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003a6c:	4b0b      	ldr	r3, [pc, #44]	; (8003a9c <prvAddNewTaskToReadyList+0xd0>)
 8003a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	f3bf 8f4f 	dsb	sy
 8003a78:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a7c:	bf00      	nop
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	2000083c 	.word	0x2000083c
 8003a88:	2000073c 	.word	0x2000073c
 8003a8c:	20000848 	.word	0x20000848
 8003a90:	20000858 	.word	0x20000858
 8003a94:	20000844 	.word	0x20000844
 8003a98:	20000740 	.word	0x20000740
 8003a9c:	e000ed04 	.word	0xe000ed04

08003aa0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d016      	beq.n	8003ae0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003ab2:	4b13      	ldr	r3, [pc, #76]	; (8003b00 <vTaskDelay+0x60>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d009      	beq.n	8003ace <vTaskDelay+0x2e>
 8003aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003abe:	f383 8811 	msr	BASEPRI, r3
 8003ac2:	f3bf 8f6f 	isb	sy
 8003ac6:	f3bf 8f4f 	dsb	sy
 8003aca:	60bb      	str	r3, [r7, #8]
 8003acc:	e7fe      	b.n	8003acc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003ace:	f000 f87f 	bl	8003bd0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 fe19 	bl	800470c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ada:	f000 f887 	bl	8003bec <xTaskResumeAll>
 8003ade:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d107      	bne.n	8003af6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003ae6:	4b07      	ldr	r3, [pc, #28]	; (8003b04 <vTaskDelay+0x64>)
 8003ae8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aec:	601a      	str	r2, [r3, #0]
 8003aee:	f3bf 8f4f 	dsb	sy
 8003af2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003af6:	bf00      	nop
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	20000864 	.word	0x20000864
 8003b04:	e000ed04 	.word	0xe000ed04

08003b08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b08a      	sub	sp, #40	; 0x28
 8003b0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b12:	2300      	movs	r3, #0
 8003b14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b16:	463a      	mov	r2, r7
 8003b18:	1d39      	adds	r1, r7, #4
 8003b1a:	f107 0308 	add.w	r3, r7, #8
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7fc fd36 	bl	8000590 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b24:	6839      	ldr	r1, [r7, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	9202      	str	r2, [sp, #8]
 8003b2c:	9301      	str	r3, [sp, #4]
 8003b2e:	2300      	movs	r3, #0
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	2300      	movs	r3, #0
 8003b34:	460a      	mov	r2, r1
 8003b36:	4920      	ldr	r1, [pc, #128]	; (8003bb8 <vTaskStartScheduler+0xb0>)
 8003b38:	4820      	ldr	r0, [pc, #128]	; (8003bbc <vTaskStartScheduler+0xb4>)
 8003b3a:	f7ff fe21 	bl	8003780 <xTaskCreateStatic>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	4b1f      	ldr	r3, [pc, #124]	; (8003bc0 <vTaskStartScheduler+0xb8>)
 8003b42:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b44:	4b1e      	ldr	r3, [pc, #120]	; (8003bc0 <vTaskStartScheduler+0xb8>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d002      	beq.n	8003b52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	617b      	str	r3, [r7, #20]
 8003b50:	e001      	b.n	8003b56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b52:	2300      	movs	r3, #0
 8003b54:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d102      	bne.n	8003b62 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003b5c:	f000 fe3c 	bl	80047d8 <xTimerCreateTimerTask>
 8003b60:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d115      	bne.n	8003b94 <vTaskStartScheduler+0x8c>
 8003b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6c:	f383 8811 	msr	BASEPRI, r3
 8003b70:	f3bf 8f6f 	isb	sy
 8003b74:	f3bf 8f4f 	dsb	sy
 8003b78:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003b7a:	4b12      	ldr	r3, [pc, #72]	; (8003bc4 <vTaskStartScheduler+0xbc>)
 8003b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b80:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b82:	4b11      	ldr	r3, [pc, #68]	; (8003bc8 <vTaskStartScheduler+0xc0>)
 8003b84:	2201      	movs	r2, #1
 8003b86:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003b88:	4b10      	ldr	r3, [pc, #64]	; (8003bcc <vTaskStartScheduler+0xc4>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003b8e:	f001 f9d7 	bl	8004f40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003b92:	e00d      	b.n	8003bb0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9a:	d109      	bne.n	8003bb0 <vTaskStartScheduler+0xa8>
 8003b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba0:	f383 8811 	msr	BASEPRI, r3
 8003ba4:	f3bf 8f6f 	isb	sy
 8003ba8:	f3bf 8f4f 	dsb	sy
 8003bac:	60fb      	str	r3, [r7, #12]
 8003bae:	e7fe      	b.n	8003bae <vTaskStartScheduler+0xa6>
}
 8003bb0:	bf00      	nop
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	08005fac 	.word	0x08005fac
 8003bbc:	080041cd 	.word	0x080041cd
 8003bc0:	20000860 	.word	0x20000860
 8003bc4:	2000085c 	.word	0x2000085c
 8003bc8:	20000848 	.word	0x20000848
 8003bcc:	20000840 	.word	0x20000840

08003bd0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003bd4:	4b04      	ldr	r3, [pc, #16]	; (8003be8 <vTaskSuspendAll+0x18>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	4a03      	ldr	r2, [pc, #12]	; (8003be8 <vTaskSuspendAll+0x18>)
 8003bdc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003bde:	bf00      	nop
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	20000864 	.word	0x20000864

08003bec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003bfa:	4b41      	ldr	r3, [pc, #260]	; (8003d00 <xTaskResumeAll+0x114>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d109      	bne.n	8003c16 <xTaskResumeAll+0x2a>
 8003c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c06:	f383 8811 	msr	BASEPRI, r3
 8003c0a:	f3bf 8f6f 	isb	sy
 8003c0e:	f3bf 8f4f 	dsb	sy
 8003c12:	603b      	str	r3, [r7, #0]
 8003c14:	e7fe      	b.n	8003c14 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c16:	f001 fa31 	bl	800507c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c1a:	4b39      	ldr	r3, [pc, #228]	; (8003d00 <xTaskResumeAll+0x114>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	4a37      	ldr	r2, [pc, #220]	; (8003d00 <xTaskResumeAll+0x114>)
 8003c22:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c24:	4b36      	ldr	r3, [pc, #216]	; (8003d00 <xTaskResumeAll+0x114>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d161      	bne.n	8003cf0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c2c:	4b35      	ldr	r3, [pc, #212]	; (8003d04 <xTaskResumeAll+0x118>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d05d      	beq.n	8003cf0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c34:	e02e      	b.n	8003c94 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c36:	4b34      	ldr	r3, [pc, #208]	; (8003d08 <xTaskResumeAll+0x11c>)
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	3318      	adds	r3, #24
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fe fe3a 	bl	80028bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7fe fe35 	bl	80028bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c56:	2201      	movs	r2, #1
 8003c58:	409a      	lsls	r2, r3
 8003c5a:	4b2c      	ldr	r3, [pc, #176]	; (8003d0c <xTaskResumeAll+0x120>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	4a2a      	ldr	r2, [pc, #168]	; (8003d0c <xTaskResumeAll+0x120>)
 8003c62:	6013      	str	r3, [r2, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c68:	4613      	mov	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4a27      	ldr	r2, [pc, #156]	; (8003d10 <xTaskResumeAll+0x124>)
 8003c72:	441a      	add	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	3304      	adds	r3, #4
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4610      	mov	r0, r2
 8003c7c:	f7fe fdc1 	bl	8002802 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c84:	4b23      	ldr	r3, [pc, #140]	; (8003d14 <xTaskResumeAll+0x128>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d302      	bcc.n	8003c94 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003c8e:	4b22      	ldr	r3, [pc, #136]	; (8003d18 <xTaskResumeAll+0x12c>)
 8003c90:	2201      	movs	r2, #1
 8003c92:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c94:	4b1c      	ldr	r3, [pc, #112]	; (8003d08 <xTaskResumeAll+0x11c>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1cc      	bne.n	8003c36 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003ca2:	f000 fb45 	bl	8004330 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003ca6:	4b1d      	ldr	r3, [pc, #116]	; (8003d1c <xTaskResumeAll+0x130>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d010      	beq.n	8003cd4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003cb2:	f000 f847 	bl	8003d44 <xTaskIncrementTick>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d002      	beq.n	8003cc2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003cbc:	4b16      	ldr	r3, [pc, #88]	; (8003d18 <xTaskResumeAll+0x12c>)
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1f1      	bne.n	8003cb2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003cce:	4b13      	ldr	r3, [pc, #76]	; (8003d1c <xTaskResumeAll+0x130>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003cd4:	4b10      	ldr	r3, [pc, #64]	; (8003d18 <xTaskResumeAll+0x12c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d009      	beq.n	8003cf0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003ce0:	4b0f      	ldr	r3, [pc, #60]	; (8003d20 <xTaskResumeAll+0x134>)
 8003ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003cf0:	f001 f9f2 	bl	80050d8 <vPortExitCritical>

	return xAlreadyYielded;
 8003cf4:	68bb      	ldr	r3, [r7, #8]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	20000864 	.word	0x20000864
 8003d04:	2000083c 	.word	0x2000083c
 8003d08:	200007fc 	.word	0x200007fc
 8003d0c:	20000844 	.word	0x20000844
 8003d10:	20000740 	.word	0x20000740
 8003d14:	2000073c 	.word	0x2000073c
 8003d18:	20000850 	.word	0x20000850
 8003d1c:	2000084c 	.word	0x2000084c
 8003d20:	e000ed04 	.word	0xe000ed04

08003d24 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003d2a:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <xTaskGetTickCount+0x1c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003d30:	687b      	ldr	r3, [r7, #4]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	20000840 	.word	0x20000840

08003d44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d4e:	4b4e      	ldr	r3, [pc, #312]	; (8003e88 <xTaskIncrementTick+0x144>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f040 8087 	bne.w	8003e66 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d58:	4b4c      	ldr	r3, [pc, #304]	; (8003e8c <xTaskIncrementTick+0x148>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d60:	4a4a      	ldr	r2, [pc, #296]	; (8003e8c <xTaskIncrementTick+0x148>)
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d11f      	bne.n	8003dac <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d6c:	4b48      	ldr	r3, [pc, #288]	; (8003e90 <xTaskIncrementTick+0x14c>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d009      	beq.n	8003d8a <xTaskIncrementTick+0x46>
 8003d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7a:	f383 8811 	msr	BASEPRI, r3
 8003d7e:	f3bf 8f6f 	isb	sy
 8003d82:	f3bf 8f4f 	dsb	sy
 8003d86:	603b      	str	r3, [r7, #0]
 8003d88:	e7fe      	b.n	8003d88 <xTaskIncrementTick+0x44>
 8003d8a:	4b41      	ldr	r3, [pc, #260]	; (8003e90 <xTaskIncrementTick+0x14c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	4b40      	ldr	r3, [pc, #256]	; (8003e94 <xTaskIncrementTick+0x150>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a3e      	ldr	r2, [pc, #248]	; (8003e90 <xTaskIncrementTick+0x14c>)
 8003d96:	6013      	str	r3, [r2, #0]
 8003d98:	4a3e      	ldr	r2, [pc, #248]	; (8003e94 <xTaskIncrementTick+0x150>)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	4b3e      	ldr	r3, [pc, #248]	; (8003e98 <xTaskIncrementTick+0x154>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	3301      	adds	r3, #1
 8003da4:	4a3c      	ldr	r2, [pc, #240]	; (8003e98 <xTaskIncrementTick+0x154>)
 8003da6:	6013      	str	r3, [r2, #0]
 8003da8:	f000 fac2 	bl	8004330 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003dac:	4b3b      	ldr	r3, [pc, #236]	; (8003e9c <xTaskIncrementTick+0x158>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d348      	bcc.n	8003e48 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003db6:	4b36      	ldr	r3, [pc, #216]	; (8003e90 <xTaskIncrementTick+0x14c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d104      	bne.n	8003dca <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dc0:	4b36      	ldr	r3, [pc, #216]	; (8003e9c <xTaskIncrementTick+0x158>)
 8003dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc6:	601a      	str	r2, [r3, #0]
					break;
 8003dc8:	e03e      	b.n	8003e48 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dca:	4b31      	ldr	r3, [pc, #196]	; (8003e90 <xTaskIncrementTick+0x14c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d203      	bcs.n	8003dea <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003de2:	4a2e      	ldr	r2, [pc, #184]	; (8003e9c <xTaskIncrementTick+0x158>)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003de8:	e02e      	b.n	8003e48 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	3304      	adds	r3, #4
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fe fd64 	bl	80028bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d004      	beq.n	8003e06 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	3318      	adds	r3, #24
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fe fd5b 	bl	80028bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	409a      	lsls	r2, r3
 8003e0e:	4b24      	ldr	r3, [pc, #144]	; (8003ea0 <xTaskIncrementTick+0x15c>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	4a22      	ldr	r2, [pc, #136]	; (8003ea0 <xTaskIncrementTick+0x15c>)
 8003e16:	6013      	str	r3, [r2, #0]
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4413      	add	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4a1f      	ldr	r2, [pc, #124]	; (8003ea4 <xTaskIncrementTick+0x160>)
 8003e26:	441a      	add	r2, r3
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	4610      	mov	r0, r2
 8003e30:	f7fe fce7 	bl	8002802 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e38:	4b1b      	ldr	r3, [pc, #108]	; (8003ea8 <xTaskIncrementTick+0x164>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d3b9      	bcc.n	8003db6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003e42:	2301      	movs	r3, #1
 8003e44:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e46:	e7b6      	b.n	8003db6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e48:	4b17      	ldr	r3, [pc, #92]	; (8003ea8 <xTaskIncrementTick+0x164>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e4e:	4915      	ldr	r1, [pc, #84]	; (8003ea4 <xTaskIncrementTick+0x160>)
 8003e50:	4613      	mov	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d907      	bls.n	8003e70 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8003e60:	2301      	movs	r3, #1
 8003e62:	617b      	str	r3, [r7, #20]
 8003e64:	e004      	b.n	8003e70 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003e66:	4b11      	ldr	r3, [pc, #68]	; (8003eac <xTaskIncrementTick+0x168>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	4a0f      	ldr	r2, [pc, #60]	; (8003eac <xTaskIncrementTick+0x168>)
 8003e6e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003e70:	4b0f      	ldr	r3, [pc, #60]	; (8003eb0 <xTaskIncrementTick+0x16c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003e7c:	697b      	ldr	r3, [r7, #20]
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3718      	adds	r7, #24
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	20000864 	.word	0x20000864
 8003e8c:	20000840 	.word	0x20000840
 8003e90:	200007f4 	.word	0x200007f4
 8003e94:	200007f8 	.word	0x200007f8
 8003e98:	20000854 	.word	0x20000854
 8003e9c:	2000085c 	.word	0x2000085c
 8003ea0:	20000844 	.word	0x20000844
 8003ea4:	20000740 	.word	0x20000740
 8003ea8:	2000073c 	.word	0x2000073c
 8003eac:	2000084c 	.word	0x2000084c
 8003eb0:	20000850 	.word	0x20000850

08003eb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b087      	sub	sp, #28
 8003eb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003eba:	4b26      	ldr	r3, [pc, #152]	; (8003f54 <vTaskSwitchContext+0xa0>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d003      	beq.n	8003eca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ec2:	4b25      	ldr	r3, [pc, #148]	; (8003f58 <vTaskSwitchContext+0xa4>)
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ec8:	e03e      	b.n	8003f48 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003eca:	4b23      	ldr	r3, [pc, #140]	; (8003f58 <vTaskSwitchContext+0xa4>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ed0:	4b22      	ldr	r3, [pc, #136]	; (8003f5c <vTaskSwitchContext+0xa8>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	fab3 f383 	clz	r3, r3
 8003edc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003ede:	7afb      	ldrb	r3, [r7, #11]
 8003ee0:	f1c3 031f 	rsb	r3, r3, #31
 8003ee4:	617b      	str	r3, [r7, #20]
 8003ee6:	491e      	ldr	r1, [pc, #120]	; (8003f60 <vTaskSwitchContext+0xac>)
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	4613      	mov	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	4413      	add	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	440b      	add	r3, r1
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d109      	bne.n	8003f0e <vTaskSwitchContext+0x5a>
	__asm volatile
 8003efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efe:	f383 8811 	msr	BASEPRI, r3
 8003f02:	f3bf 8f6f 	isb	sy
 8003f06:	f3bf 8f4f 	dsb	sy
 8003f0a:	607b      	str	r3, [r7, #4]
 8003f0c:	e7fe      	b.n	8003f0c <vTaskSwitchContext+0x58>
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	4613      	mov	r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	4413      	add	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4a11      	ldr	r2, [pc, #68]	; (8003f60 <vTaskSwitchContext+0xac>)
 8003f1a:	4413      	add	r3, r2
 8003f1c:	613b      	str	r3, [r7, #16]
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	605a      	str	r2, [r3, #4]
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	3308      	adds	r3, #8
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d104      	bne.n	8003f3e <vTaskSwitchContext+0x8a>
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	605a      	str	r2, [r3, #4]
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	4a07      	ldr	r2, [pc, #28]	; (8003f64 <vTaskSwitchContext+0xb0>)
 8003f46:	6013      	str	r3, [r2, #0]
}
 8003f48:	bf00      	nop
 8003f4a:	371c      	adds	r7, #28
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	20000864 	.word	0x20000864
 8003f58:	20000850 	.word	0x20000850
 8003f5c:	20000844 	.word	0x20000844
 8003f60:	20000740 	.word	0x20000740
 8003f64:	2000073c 	.word	0x2000073c

08003f68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d109      	bne.n	8003f8c <vTaskPlaceOnEventList+0x24>
 8003f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7c:	f383 8811 	msr	BASEPRI, r3
 8003f80:	f3bf 8f6f 	isb	sy
 8003f84:	f3bf 8f4f 	dsb	sy
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	e7fe      	b.n	8003f8a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f8c:	4b07      	ldr	r3, [pc, #28]	; (8003fac <vTaskPlaceOnEventList+0x44>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	3318      	adds	r3, #24
 8003f92:	4619      	mov	r1, r3
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f7fe fc58 	bl	800284a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	6838      	ldr	r0, [r7, #0]
 8003f9e:	f000 fbb5 	bl	800470c <prvAddCurrentTaskToDelayedList>
}
 8003fa2:	bf00      	nop
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	2000073c 	.word	0x2000073c

08003fb0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d109      	bne.n	8003fd6 <vTaskPlaceOnEventListRestricted+0x26>
 8003fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc6:	f383 8811 	msr	BASEPRI, r3
 8003fca:	f3bf 8f6f 	isb	sy
 8003fce:	f3bf 8f4f 	dsb	sy
 8003fd2:	617b      	str	r3, [r7, #20]
 8003fd4:	e7fe      	b.n	8003fd4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003fd6:	4b0a      	ldr	r3, [pc, #40]	; (8004000 <vTaskPlaceOnEventListRestricted+0x50>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	3318      	adds	r3, #24
 8003fdc:	4619      	mov	r1, r3
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f7fe fc0f 	bl	8002802 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d002      	beq.n	8003ff0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8003fea:	f04f 33ff 	mov.w	r3, #4294967295
 8003fee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003ff0:	6879      	ldr	r1, [r7, #4]
 8003ff2:	68b8      	ldr	r0, [r7, #8]
 8003ff4:	f000 fb8a 	bl	800470c <prvAddCurrentTaskToDelayedList>
	}
 8003ff8:	bf00      	nop
 8003ffa:	3718      	adds	r7, #24
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	2000073c 	.word	0x2000073c

08004004 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d109      	bne.n	800402e <xTaskRemoveFromEventList+0x2a>
 800401a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401e:	f383 8811 	msr	BASEPRI, r3
 8004022:	f3bf 8f6f 	isb	sy
 8004026:	f3bf 8f4f 	dsb	sy
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	e7fe      	b.n	800402c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	3318      	adds	r3, #24
 8004032:	4618      	mov	r0, r3
 8004034:	f7fe fc42 	bl	80028bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004038:	4b1d      	ldr	r3, [pc, #116]	; (80040b0 <xTaskRemoveFromEventList+0xac>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d11c      	bne.n	800407a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	3304      	adds	r3, #4
 8004044:	4618      	mov	r0, r3
 8004046:	f7fe fc39 	bl	80028bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404e:	2201      	movs	r2, #1
 8004050:	409a      	lsls	r2, r3
 8004052:	4b18      	ldr	r3, [pc, #96]	; (80040b4 <xTaskRemoveFromEventList+0xb0>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4313      	orrs	r3, r2
 8004058:	4a16      	ldr	r2, [pc, #88]	; (80040b4 <xTaskRemoveFromEventList+0xb0>)
 800405a:	6013      	str	r3, [r2, #0]
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004060:	4613      	mov	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4a13      	ldr	r2, [pc, #76]	; (80040b8 <xTaskRemoveFromEventList+0xb4>)
 800406a:	441a      	add	r2, r3
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	3304      	adds	r3, #4
 8004070:	4619      	mov	r1, r3
 8004072:	4610      	mov	r0, r2
 8004074:	f7fe fbc5 	bl	8002802 <vListInsertEnd>
 8004078:	e005      	b.n	8004086 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	3318      	adds	r3, #24
 800407e:	4619      	mov	r1, r3
 8004080:	480e      	ldr	r0, [pc, #56]	; (80040bc <xTaskRemoveFromEventList+0xb8>)
 8004082:	f7fe fbbe 	bl	8002802 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800408a:	4b0d      	ldr	r3, [pc, #52]	; (80040c0 <xTaskRemoveFromEventList+0xbc>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004090:	429a      	cmp	r2, r3
 8004092:	d905      	bls.n	80040a0 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004094:	2301      	movs	r3, #1
 8004096:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004098:	4b0a      	ldr	r3, [pc, #40]	; (80040c4 <xTaskRemoveFromEventList+0xc0>)
 800409a:	2201      	movs	r2, #1
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	e001      	b.n	80040a4 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80040a0:	2300      	movs	r3, #0
 80040a2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80040a4:	697b      	ldr	r3, [r7, #20]
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3718      	adds	r7, #24
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	20000864 	.word	0x20000864
 80040b4:	20000844 	.word	0x20000844
 80040b8:	20000740 	.word	0x20000740
 80040bc:	200007fc 	.word	0x200007fc
 80040c0:	2000073c 	.word	0x2000073c
 80040c4:	20000850 	.word	0x20000850

080040c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80040d0:	4b06      	ldr	r3, [pc, #24]	; (80040ec <vTaskInternalSetTimeOutState+0x24>)
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80040d8:	4b05      	ldr	r3, [pc, #20]	; (80040f0 <vTaskInternalSetTimeOutState+0x28>)
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	605a      	str	r2, [r3, #4]
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	20000854 	.word	0x20000854
 80040f0:	20000840 	.word	0x20000840

080040f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b088      	sub	sp, #32
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d109      	bne.n	8004118 <xTaskCheckForTimeOut+0x24>
 8004104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004108:	f383 8811 	msr	BASEPRI, r3
 800410c:	f3bf 8f6f 	isb	sy
 8004110:	f3bf 8f4f 	dsb	sy
 8004114:	613b      	str	r3, [r7, #16]
 8004116:	e7fe      	b.n	8004116 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d109      	bne.n	8004132 <xTaskCheckForTimeOut+0x3e>
 800411e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004122:	f383 8811 	msr	BASEPRI, r3
 8004126:	f3bf 8f6f 	isb	sy
 800412a:	f3bf 8f4f 	dsb	sy
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	e7fe      	b.n	8004130 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004132:	f000 ffa3 	bl	800507c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004136:	4b1d      	ldr	r3, [pc, #116]	; (80041ac <xTaskCheckForTimeOut+0xb8>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800414e:	d102      	bne.n	8004156 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004150:	2300      	movs	r3, #0
 8004152:	61fb      	str	r3, [r7, #28]
 8004154:	e023      	b.n	800419e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	4b15      	ldr	r3, [pc, #84]	; (80041b0 <xTaskCheckForTimeOut+0xbc>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	429a      	cmp	r2, r3
 8004160:	d007      	beq.n	8004172 <xTaskCheckForTimeOut+0x7e>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	429a      	cmp	r2, r3
 800416a:	d302      	bcc.n	8004172 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800416c:	2301      	movs	r3, #1
 800416e:	61fb      	str	r3, [r7, #28]
 8004170:	e015      	b.n	800419e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	429a      	cmp	r2, r3
 800417a:	d20b      	bcs.n	8004194 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	1ad2      	subs	r2, r2, r3
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f7ff ff9d 	bl	80040c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800418e:	2300      	movs	r3, #0
 8004190:	61fb      	str	r3, [r7, #28]
 8004192:	e004      	b.n	800419e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	2200      	movs	r2, #0
 8004198:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800419a:	2301      	movs	r3, #1
 800419c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800419e:	f000 ff9b 	bl	80050d8 <vPortExitCritical>

	return xReturn;
 80041a2:	69fb      	ldr	r3, [r7, #28]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3720      	adds	r7, #32
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	20000840 	.word	0x20000840
 80041b0:	20000854 	.word	0x20000854

080041b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80041b8:	4b03      	ldr	r3, [pc, #12]	; (80041c8 <vTaskMissedYield+0x14>)
 80041ba:	2201      	movs	r2, #1
 80041bc:	601a      	str	r2, [r3, #0]
}
 80041be:	bf00      	nop
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr
 80041c8:	20000850 	.word	0x20000850

080041cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80041d4:	f000 f852 	bl	800427c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80041d8:	4b06      	ldr	r3, [pc, #24]	; (80041f4 <prvIdleTask+0x28>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d9f9      	bls.n	80041d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80041e0:	4b05      	ldr	r3, [pc, #20]	; (80041f8 <prvIdleTask+0x2c>)
 80041e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80041f0:	e7f0      	b.n	80041d4 <prvIdleTask+0x8>
 80041f2:	bf00      	nop
 80041f4:	20000740 	.word	0x20000740
 80041f8:	e000ed04 	.word	0xe000ed04

080041fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004202:	2300      	movs	r3, #0
 8004204:	607b      	str	r3, [r7, #4]
 8004206:	e00c      	b.n	8004222 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	4613      	mov	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4413      	add	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4a12      	ldr	r2, [pc, #72]	; (800425c <prvInitialiseTaskLists+0x60>)
 8004214:	4413      	add	r3, r2
 8004216:	4618      	mov	r0, r3
 8004218:	f7fe fac6 	bl	80027a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	3301      	adds	r3, #1
 8004220:	607b      	str	r3, [r7, #4]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b06      	cmp	r3, #6
 8004226:	d9ef      	bls.n	8004208 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004228:	480d      	ldr	r0, [pc, #52]	; (8004260 <prvInitialiseTaskLists+0x64>)
 800422a:	f7fe fabd 	bl	80027a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800422e:	480d      	ldr	r0, [pc, #52]	; (8004264 <prvInitialiseTaskLists+0x68>)
 8004230:	f7fe faba 	bl	80027a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004234:	480c      	ldr	r0, [pc, #48]	; (8004268 <prvInitialiseTaskLists+0x6c>)
 8004236:	f7fe fab7 	bl	80027a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800423a:	480c      	ldr	r0, [pc, #48]	; (800426c <prvInitialiseTaskLists+0x70>)
 800423c:	f7fe fab4 	bl	80027a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004240:	480b      	ldr	r0, [pc, #44]	; (8004270 <prvInitialiseTaskLists+0x74>)
 8004242:	f7fe fab1 	bl	80027a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004246:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <prvInitialiseTaskLists+0x78>)
 8004248:	4a05      	ldr	r2, [pc, #20]	; (8004260 <prvInitialiseTaskLists+0x64>)
 800424a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800424c:	4b0a      	ldr	r3, [pc, #40]	; (8004278 <prvInitialiseTaskLists+0x7c>)
 800424e:	4a05      	ldr	r2, [pc, #20]	; (8004264 <prvInitialiseTaskLists+0x68>)
 8004250:	601a      	str	r2, [r3, #0]
}
 8004252:	bf00      	nop
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	20000740 	.word	0x20000740
 8004260:	200007cc 	.word	0x200007cc
 8004264:	200007e0 	.word	0x200007e0
 8004268:	200007fc 	.word	0x200007fc
 800426c:	20000810 	.word	0x20000810
 8004270:	20000828 	.word	0x20000828
 8004274:	200007f4 	.word	0x200007f4
 8004278:	200007f8 	.word	0x200007f8

0800427c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004282:	e019      	b.n	80042b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004284:	f000 fefa 	bl	800507c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004288:	4b0f      	ldr	r3, [pc, #60]	; (80042c8 <prvCheckTasksWaitingTermination+0x4c>)
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3304      	adds	r3, #4
 8004294:	4618      	mov	r0, r3
 8004296:	f7fe fb11 	bl	80028bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800429a:	4b0c      	ldr	r3, [pc, #48]	; (80042cc <prvCheckTasksWaitingTermination+0x50>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	3b01      	subs	r3, #1
 80042a0:	4a0a      	ldr	r2, [pc, #40]	; (80042cc <prvCheckTasksWaitingTermination+0x50>)
 80042a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80042a4:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <prvCheckTasksWaitingTermination+0x54>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	3b01      	subs	r3, #1
 80042aa:	4a09      	ldr	r2, [pc, #36]	; (80042d0 <prvCheckTasksWaitingTermination+0x54>)
 80042ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80042ae:	f000 ff13 	bl	80050d8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f80e 	bl	80042d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042b8:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <prvCheckTasksWaitingTermination+0x54>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1e1      	bne.n	8004284 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80042c0:	bf00      	nop
 80042c2:	3708      	adds	r7, #8
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	20000810 	.word	0x20000810
 80042cc:	2000083c 	.word	0x2000083c
 80042d0:	20000824 	.word	0x20000824

080042d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d108      	bne.n	80042f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ea:	4618      	mov	r0, r3
 80042ec:	f001 f8a2 	bl	8005434 <vPortFree>
				vPortFree( pxTCB );
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f001 f89f 	bl	8005434 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80042f6:	e017      	b.n	8004328 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d103      	bne.n	800430a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f001 f896 	bl	8005434 <vPortFree>
	}
 8004308:	e00e      	b.n	8004328 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004310:	2b02      	cmp	r3, #2
 8004312:	d009      	beq.n	8004328 <prvDeleteTCB+0x54>
 8004314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004318:	f383 8811 	msr	BASEPRI, r3
 800431c:	f3bf 8f6f 	isb	sy
 8004320:	f3bf 8f4f 	dsb	sy
 8004324:	60fb      	str	r3, [r7, #12]
 8004326:	e7fe      	b.n	8004326 <prvDeleteTCB+0x52>
	}
 8004328:	bf00      	nop
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004336:	4b0c      	ldr	r3, [pc, #48]	; (8004368 <prvResetNextTaskUnblockTime+0x38>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d104      	bne.n	800434a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004340:	4b0a      	ldr	r3, [pc, #40]	; (800436c <prvResetNextTaskUnblockTime+0x3c>)
 8004342:	f04f 32ff 	mov.w	r2, #4294967295
 8004346:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004348:	e008      	b.n	800435c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800434a:	4b07      	ldr	r3, [pc, #28]	; (8004368 <prvResetNextTaskUnblockTime+0x38>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	4a04      	ldr	r2, [pc, #16]	; (800436c <prvResetNextTaskUnblockTime+0x3c>)
 800435a:	6013      	str	r3, [r2, #0]
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	200007f4 	.word	0x200007f4
 800436c:	2000085c 	.word	0x2000085c

08004370 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004376:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <xTaskGetSchedulerState+0x34>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d102      	bne.n	8004384 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800437e:	2301      	movs	r3, #1
 8004380:	607b      	str	r3, [r7, #4]
 8004382:	e008      	b.n	8004396 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004384:	4b08      	ldr	r3, [pc, #32]	; (80043a8 <xTaskGetSchedulerState+0x38>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d102      	bne.n	8004392 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800438c:	2302      	movs	r3, #2
 800438e:	607b      	str	r3, [r7, #4]
 8004390:	e001      	b.n	8004396 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004392:	2300      	movs	r3, #0
 8004394:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004396:	687b      	ldr	r3, [r7, #4]
	}
 8004398:	4618      	mov	r0, r3
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr
 80043a4:	20000848 	.word	0x20000848
 80043a8:	20000864 	.word	0x20000864

080043ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80043b8:	2300      	movs	r3, #0
 80043ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d069      	beq.n	8004496 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c6:	4b36      	ldr	r3, [pc, #216]	; (80044a0 <xTaskPriorityInherit+0xf4>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d259      	bcs.n	8004484 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	db06      	blt.n	80043e6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043d8:	4b31      	ldr	r3, [pc, #196]	; (80044a0 <xTaskPriorityInherit+0xf4>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043de:	f1c3 0207 	rsb	r2, r3, #7
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	6959      	ldr	r1, [r3, #20]
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ee:	4613      	mov	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	4413      	add	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4a2b      	ldr	r2, [pc, #172]	; (80044a4 <xTaskPriorityInherit+0xf8>)
 80043f8:	4413      	add	r3, r2
 80043fa:	4299      	cmp	r1, r3
 80043fc:	d13a      	bne.n	8004474 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	3304      	adds	r3, #4
 8004402:	4618      	mov	r0, r3
 8004404:	f7fe fa5a 	bl	80028bc <uxListRemove>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d115      	bne.n	800443a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004412:	4924      	ldr	r1, [pc, #144]	; (80044a4 <xTaskPriorityInherit+0xf8>)
 8004414:	4613      	mov	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4413      	add	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	440b      	add	r3, r1
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10a      	bne.n	800443a <xTaskPriorityInherit+0x8e>
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004428:	2201      	movs	r2, #1
 800442a:	fa02 f303 	lsl.w	r3, r2, r3
 800442e:	43da      	mvns	r2, r3
 8004430:	4b1d      	ldr	r3, [pc, #116]	; (80044a8 <xTaskPriorityInherit+0xfc>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4013      	ands	r3, r2
 8004436:	4a1c      	ldr	r2, [pc, #112]	; (80044a8 <xTaskPriorityInherit+0xfc>)
 8004438:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800443a:	4b19      	ldr	r3, [pc, #100]	; (80044a0 <xTaskPriorityInherit+0xf4>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004448:	2201      	movs	r2, #1
 800444a:	409a      	lsls	r2, r3
 800444c:	4b16      	ldr	r3, [pc, #88]	; (80044a8 <xTaskPriorityInherit+0xfc>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4313      	orrs	r3, r2
 8004452:	4a15      	ldr	r2, [pc, #84]	; (80044a8 <xTaskPriorityInherit+0xfc>)
 8004454:	6013      	str	r3, [r2, #0]
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800445a:	4613      	mov	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4413      	add	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4a10      	ldr	r2, [pc, #64]	; (80044a4 <xTaskPriorityInherit+0xf8>)
 8004464:	441a      	add	r2, r3
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	3304      	adds	r3, #4
 800446a:	4619      	mov	r1, r3
 800446c:	4610      	mov	r0, r2
 800446e:	f7fe f9c8 	bl	8002802 <vListInsertEnd>
 8004472:	e004      	b.n	800447e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004474:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <xTaskPriorityInherit+0xf4>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800447e:	2301      	movs	r3, #1
 8004480:	60fb      	str	r3, [r7, #12]
 8004482:	e008      	b.n	8004496 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004488:	4b05      	ldr	r3, [pc, #20]	; (80044a0 <xTaskPriorityInherit+0xf4>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448e:	429a      	cmp	r2, r3
 8004490:	d201      	bcs.n	8004496 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004492:	2301      	movs	r3, #1
 8004494:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004496:	68fb      	ldr	r3, [r7, #12]
	}
 8004498:	4618      	mov	r0, r3
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	2000073c 	.word	0x2000073c
 80044a4:	20000740 	.word	0x20000740
 80044a8:	20000844 	.word	0x20000844

080044ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80044b8:	2300      	movs	r3, #0
 80044ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d06c      	beq.n	800459c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80044c2:	4b39      	ldr	r3, [pc, #228]	; (80045a8 <xTaskPriorityDisinherit+0xfc>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d009      	beq.n	80044e0 <xTaskPriorityDisinherit+0x34>
 80044cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d0:	f383 8811 	msr	BASEPRI, r3
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	60fb      	str	r3, [r7, #12]
 80044de:	e7fe      	b.n	80044de <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d109      	bne.n	80044fc <xTaskPriorityDisinherit+0x50>
 80044e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ec:	f383 8811 	msr	BASEPRI, r3
 80044f0:	f3bf 8f6f 	isb	sy
 80044f4:	f3bf 8f4f 	dsb	sy
 80044f8:	60bb      	str	r3, [r7, #8]
 80044fa:	e7fe      	b.n	80044fa <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004500:	1e5a      	subs	r2, r3, #1
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800450e:	429a      	cmp	r2, r3
 8004510:	d044      	beq.n	800459c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004516:	2b00      	cmp	r3, #0
 8004518:	d140      	bne.n	800459c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	3304      	adds	r3, #4
 800451e:	4618      	mov	r0, r3
 8004520:	f7fe f9cc 	bl	80028bc <uxListRemove>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d115      	bne.n	8004556 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800452e:	491f      	ldr	r1, [pc, #124]	; (80045ac <xTaskPriorityDisinherit+0x100>)
 8004530:	4613      	mov	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	440b      	add	r3, r1
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10a      	bne.n	8004556 <xTaskPriorityDisinherit+0xaa>
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004544:	2201      	movs	r2, #1
 8004546:	fa02 f303 	lsl.w	r3, r2, r3
 800454a:	43da      	mvns	r2, r3
 800454c:	4b18      	ldr	r3, [pc, #96]	; (80045b0 <xTaskPriorityDisinherit+0x104>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4013      	ands	r3, r2
 8004552:	4a17      	ldr	r2, [pc, #92]	; (80045b0 <xTaskPriorityDisinherit+0x104>)
 8004554:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004562:	f1c3 0207 	rsb	r2, r3, #7
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456e:	2201      	movs	r2, #1
 8004570:	409a      	lsls	r2, r3
 8004572:	4b0f      	ldr	r3, [pc, #60]	; (80045b0 <xTaskPriorityDisinherit+0x104>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4313      	orrs	r3, r2
 8004578:	4a0d      	ldr	r2, [pc, #52]	; (80045b0 <xTaskPriorityDisinherit+0x104>)
 800457a:	6013      	str	r3, [r2, #0]
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004580:	4613      	mov	r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4413      	add	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4a08      	ldr	r2, [pc, #32]	; (80045ac <xTaskPriorityDisinherit+0x100>)
 800458a:	441a      	add	r2, r3
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	3304      	adds	r3, #4
 8004590:	4619      	mov	r1, r3
 8004592:	4610      	mov	r0, r2
 8004594:	f7fe f935 	bl	8002802 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004598:	2301      	movs	r3, #1
 800459a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800459c:	697b      	ldr	r3, [r7, #20]
	}
 800459e:	4618      	mov	r0, r3
 80045a0:	3718      	adds	r7, #24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	2000073c 	.word	0x2000073c
 80045ac:	20000740 	.word	0x20000740
 80045b0:	20000844 	.word	0x20000844

080045b4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b088      	sub	sp, #32
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80045c2:	2301      	movs	r3, #1
 80045c4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 8081 	beq.w	80046d0 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d109      	bne.n	80045ea <vTaskPriorityDisinheritAfterTimeout+0x36>
 80045d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045da:	f383 8811 	msr	BASEPRI, r3
 80045de:	f3bf 8f6f 	isb	sy
 80045e2:	f3bf 8f4f 	dsb	sy
 80045e6:	60fb      	str	r3, [r7, #12]
 80045e8:	e7fe      	b.n	80045e8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d902      	bls.n	80045fa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	61fb      	str	r3, [r7, #28]
 80045f8:	e002      	b.n	8004600 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fe:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004604:	69fa      	ldr	r2, [r7, #28]
 8004606:	429a      	cmp	r2, r3
 8004608:	d062      	beq.n	80046d0 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	429a      	cmp	r2, r3
 8004612:	d15d      	bne.n	80046d0 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004614:	4b30      	ldr	r3, [pc, #192]	; (80046d8 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	429a      	cmp	r2, r3
 800461c:	d109      	bne.n	8004632 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800461e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004622:	f383 8811 	msr	BASEPRI, r3
 8004626:	f3bf 8f6f 	isb	sy
 800462a:	f3bf 8f4f 	dsb	sy
 800462e:	60bb      	str	r3, [r7, #8]
 8004630:	e7fe      	b.n	8004630 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004636:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	69fa      	ldr	r2, [r7, #28]
 800463c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	2b00      	cmp	r3, #0
 8004644:	db04      	blt.n	8004650 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	f1c3 0207 	rsb	r2, r3, #7
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	6959      	ldr	r1, [r3, #20]
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	4613      	mov	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4413      	add	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4a1f      	ldr	r2, [pc, #124]	; (80046dc <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8004660:	4413      	add	r3, r2
 8004662:	4299      	cmp	r1, r3
 8004664:	d134      	bne.n	80046d0 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	3304      	adds	r3, #4
 800466a:	4618      	mov	r0, r3
 800466c:	f7fe f926 	bl	80028bc <uxListRemove>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d115      	bne.n	80046a2 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800467a:	4918      	ldr	r1, [pc, #96]	; (80046dc <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800467c:	4613      	mov	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4413      	add	r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	440b      	add	r3, r1
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10a      	bne.n	80046a2 <vTaskPriorityDisinheritAfterTimeout+0xee>
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004690:	2201      	movs	r2, #1
 8004692:	fa02 f303 	lsl.w	r3, r2, r3
 8004696:	43da      	mvns	r2, r3
 8004698:	4b11      	ldr	r3, [pc, #68]	; (80046e0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4013      	ands	r3, r2
 800469e:	4a10      	ldr	r2, [pc, #64]	; (80046e0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80046a0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a6:	2201      	movs	r2, #1
 80046a8:	409a      	lsls	r2, r3
 80046aa:	4b0d      	ldr	r3, [pc, #52]	; (80046e0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	4a0b      	ldr	r2, [pc, #44]	; (80046e0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80046b2:	6013      	str	r3, [r2, #0]
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b8:	4613      	mov	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4413      	add	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4a06      	ldr	r2, [pc, #24]	; (80046dc <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80046c2:	441a      	add	r2, r3
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	3304      	adds	r3, #4
 80046c8:	4619      	mov	r1, r3
 80046ca:	4610      	mov	r0, r2
 80046cc:	f7fe f899 	bl	8002802 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80046d0:	bf00      	nop
 80046d2:	3720      	adds	r7, #32
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	2000073c 	.word	0x2000073c
 80046dc:	20000740 	.word	0x20000740
 80046e0:	20000844 	.word	0x20000844

080046e4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80046e4:	b480      	push	{r7}
 80046e6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80046e8:	4b07      	ldr	r3, [pc, #28]	; (8004708 <pvTaskIncrementMutexHeldCount+0x24>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d004      	beq.n	80046fa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80046f0:	4b05      	ldr	r3, [pc, #20]	; (8004708 <pvTaskIncrementMutexHeldCount+0x24>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046f6:	3201      	adds	r2, #1
 80046f8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80046fa:	4b03      	ldr	r3, [pc, #12]	; (8004708 <pvTaskIncrementMutexHeldCount+0x24>)
 80046fc:	681b      	ldr	r3, [r3, #0]
	}
 80046fe:	4618      	mov	r0, r3
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	2000073c 	.word	0x2000073c

0800470c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004716:	4b29      	ldr	r3, [pc, #164]	; (80047bc <prvAddCurrentTaskToDelayedList+0xb0>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800471c:	4b28      	ldr	r3, [pc, #160]	; (80047c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	3304      	adds	r3, #4
 8004722:	4618      	mov	r0, r3
 8004724:	f7fe f8ca 	bl	80028bc <uxListRemove>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10b      	bne.n	8004746 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800472e:	4b24      	ldr	r3, [pc, #144]	; (80047c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004734:	2201      	movs	r2, #1
 8004736:	fa02 f303 	lsl.w	r3, r2, r3
 800473a:	43da      	mvns	r2, r3
 800473c:	4b21      	ldr	r3, [pc, #132]	; (80047c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4013      	ands	r3, r2
 8004742:	4a20      	ldr	r2, [pc, #128]	; (80047c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004744:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474c:	d10a      	bne.n	8004764 <prvAddCurrentTaskToDelayedList+0x58>
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d007      	beq.n	8004764 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004754:	4b1a      	ldr	r3, [pc, #104]	; (80047c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	3304      	adds	r3, #4
 800475a:	4619      	mov	r1, r3
 800475c:	481a      	ldr	r0, [pc, #104]	; (80047c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800475e:	f7fe f850 	bl	8002802 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004762:	e026      	b.n	80047b2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4413      	add	r3, r2
 800476a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800476c:	4b14      	ldr	r3, [pc, #80]	; (80047c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	429a      	cmp	r2, r3
 800477a:	d209      	bcs.n	8004790 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800477c:	4b13      	ldr	r3, [pc, #76]	; (80047cc <prvAddCurrentTaskToDelayedList+0xc0>)
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	4b0f      	ldr	r3, [pc, #60]	; (80047c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3304      	adds	r3, #4
 8004786:	4619      	mov	r1, r3
 8004788:	4610      	mov	r0, r2
 800478a:	f7fe f85e 	bl	800284a <vListInsert>
}
 800478e:	e010      	b.n	80047b2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004790:	4b0f      	ldr	r3, [pc, #60]	; (80047d0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	4b0a      	ldr	r3, [pc, #40]	; (80047c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	3304      	adds	r3, #4
 800479a:	4619      	mov	r1, r3
 800479c:	4610      	mov	r0, r2
 800479e:	f7fe f854 	bl	800284a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80047a2:	4b0c      	ldr	r3, [pc, #48]	; (80047d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d202      	bcs.n	80047b2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80047ac:	4a09      	ldr	r2, [pc, #36]	; (80047d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	6013      	str	r3, [r2, #0]
}
 80047b2:	bf00      	nop
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	20000840 	.word	0x20000840
 80047c0:	2000073c 	.word	0x2000073c
 80047c4:	20000844 	.word	0x20000844
 80047c8:	20000828 	.word	0x20000828
 80047cc:	200007f8 	.word	0x200007f8
 80047d0:	200007f4 	.word	0x200007f4
 80047d4:	2000085c 	.word	0x2000085c

080047d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b08a      	sub	sp, #40	; 0x28
 80047dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80047de:	2300      	movs	r3, #0
 80047e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80047e2:	f000 fae7 	bl	8004db4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80047e6:	4b1c      	ldr	r3, [pc, #112]	; (8004858 <xTimerCreateTimerTask+0x80>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d021      	beq.n	8004832 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80047ee:	2300      	movs	r3, #0
 80047f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80047f2:	2300      	movs	r3, #0
 80047f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80047f6:	1d3a      	adds	r2, r7, #4
 80047f8:	f107 0108 	add.w	r1, r7, #8
 80047fc:	f107 030c 	add.w	r3, r7, #12
 8004800:	4618      	mov	r0, r3
 8004802:	f7fb fedf 	bl	80005c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004806:	6879      	ldr	r1, [r7, #4]
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	9202      	str	r2, [sp, #8]
 800480e:	9301      	str	r3, [sp, #4]
 8004810:	2302      	movs	r3, #2
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	2300      	movs	r3, #0
 8004816:	460a      	mov	r2, r1
 8004818:	4910      	ldr	r1, [pc, #64]	; (800485c <xTimerCreateTimerTask+0x84>)
 800481a:	4811      	ldr	r0, [pc, #68]	; (8004860 <xTimerCreateTimerTask+0x88>)
 800481c:	f7fe ffb0 	bl	8003780 <xTaskCreateStatic>
 8004820:	4602      	mov	r2, r0
 8004822:	4b10      	ldr	r3, [pc, #64]	; (8004864 <xTimerCreateTimerTask+0x8c>)
 8004824:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004826:	4b0f      	ldr	r3, [pc, #60]	; (8004864 <xTimerCreateTimerTask+0x8c>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800482e:	2301      	movs	r3, #1
 8004830:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d109      	bne.n	800484c <xTimerCreateTimerTask+0x74>
 8004838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483c:	f383 8811 	msr	BASEPRI, r3
 8004840:	f3bf 8f6f 	isb	sy
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	613b      	str	r3, [r7, #16]
 800484a:	e7fe      	b.n	800484a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800484c:	697b      	ldr	r3, [r7, #20]
}
 800484e:	4618      	mov	r0, r3
 8004850:	3718      	adds	r7, #24
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	20000898 	.word	0x20000898
 800485c:	08005fb4 	.word	0x08005fb4
 8004860:	08004999 	.word	0x08004999
 8004864:	2000089c 	.word	0x2000089c

08004868 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b08a      	sub	sp, #40	; 0x28
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
 8004874:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004876:	2300      	movs	r3, #0
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d109      	bne.n	8004894 <xTimerGenericCommand+0x2c>
 8004880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004884:	f383 8811 	msr	BASEPRI, r3
 8004888:	f3bf 8f6f 	isb	sy
 800488c:	f3bf 8f4f 	dsb	sy
 8004890:	623b      	str	r3, [r7, #32]
 8004892:	e7fe      	b.n	8004892 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004894:	4b19      	ldr	r3, [pc, #100]	; (80048fc <xTimerGenericCommand+0x94>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d02a      	beq.n	80048f2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	2b05      	cmp	r3, #5
 80048ac:	dc18      	bgt.n	80048e0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80048ae:	f7ff fd5f 	bl	8004370 <xTaskGetSchedulerState>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d109      	bne.n	80048cc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80048b8:	4b10      	ldr	r3, [pc, #64]	; (80048fc <xTimerGenericCommand+0x94>)
 80048ba:	6818      	ldr	r0, [r3, #0]
 80048bc:	f107 0114 	add.w	r1, r7, #20
 80048c0:	2300      	movs	r3, #0
 80048c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048c4:	f7fe f95e 	bl	8002b84 <xQueueGenericSend>
 80048c8:	6278      	str	r0, [r7, #36]	; 0x24
 80048ca:	e012      	b.n	80048f2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80048cc:	4b0b      	ldr	r3, [pc, #44]	; (80048fc <xTimerGenericCommand+0x94>)
 80048ce:	6818      	ldr	r0, [r3, #0]
 80048d0:	f107 0114 	add.w	r1, r7, #20
 80048d4:	2300      	movs	r3, #0
 80048d6:	2200      	movs	r2, #0
 80048d8:	f7fe f954 	bl	8002b84 <xQueueGenericSend>
 80048dc:	6278      	str	r0, [r7, #36]	; 0x24
 80048de:	e008      	b.n	80048f2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80048e0:	4b06      	ldr	r3, [pc, #24]	; (80048fc <xTimerGenericCommand+0x94>)
 80048e2:	6818      	ldr	r0, [r3, #0]
 80048e4:	f107 0114 	add.w	r1, r7, #20
 80048e8:	2300      	movs	r3, #0
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	f7fe fa44 	bl	8002d78 <xQueueGenericSendFromISR>
 80048f0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80048f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3728      	adds	r7, #40	; 0x28
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	20000898 	.word	0x20000898

08004900 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b088      	sub	sp, #32
 8004904:	af02      	add	r7, sp, #8
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800490a:	4b22      	ldr	r3, [pc, #136]	; (8004994 <prvProcessExpiredTimer+0x94>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	3304      	adds	r3, #4
 8004918:	4618      	mov	r0, r3
 800491a:	f7fd ffcf 	bl	80028bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b00      	cmp	r3, #0
 800492a:	d021      	beq.n	8004970 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	699a      	ldr	r2, [r3, #24]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	18d1      	adds	r1, r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	6978      	ldr	r0, [r7, #20]
 800493a:	f000 f8d1 	bl	8004ae0 <prvInsertTimerInActiveList>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d01e      	beq.n	8004982 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004944:	2300      	movs	r3, #0
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	2300      	movs	r3, #0
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	2100      	movs	r1, #0
 800494e:	6978      	ldr	r0, [r7, #20]
 8004950:	f7ff ff8a 	bl	8004868 <xTimerGenericCommand>
 8004954:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d112      	bne.n	8004982 <prvProcessExpiredTimer+0x82>
 800495c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004960:	f383 8811 	msr	BASEPRI, r3
 8004964:	f3bf 8f6f 	isb	sy
 8004968:	f3bf 8f4f 	dsb	sy
 800496c:	60fb      	str	r3, [r7, #12]
 800496e:	e7fe      	b.n	800496e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004976:	f023 0301 	bic.w	r3, r3, #1
 800497a:	b2da      	uxtb	r2, r3
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	6978      	ldr	r0, [r7, #20]
 8004988:	4798      	blx	r3
}
 800498a:	bf00      	nop
 800498c:	3718      	adds	r7, #24
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	20000890 	.word	0x20000890

08004998 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80049a0:	f107 0308 	add.w	r3, r7, #8
 80049a4:	4618      	mov	r0, r3
 80049a6:	f000 f857 	bl	8004a58 <prvGetNextExpireTime>
 80049aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	4619      	mov	r1, r3
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 f803 	bl	80049bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80049b6:	f000 f8d5 	bl	8004b64 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80049ba:	e7f1      	b.n	80049a0 <prvTimerTask+0x8>

080049bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80049c6:	f7ff f903 	bl	8003bd0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80049ca:	f107 0308 	add.w	r3, r7, #8
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 f866 	bl	8004aa0 <prvSampleTimeNow>
 80049d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d130      	bne.n	8004a3e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10a      	bne.n	80049f8 <prvProcessTimerOrBlockTask+0x3c>
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d806      	bhi.n	80049f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80049ea:	f7ff f8ff 	bl	8003bec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80049ee:	68f9      	ldr	r1, [r7, #12]
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f7ff ff85 	bl	8004900 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80049f6:	e024      	b.n	8004a42 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d008      	beq.n	8004a10 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80049fe:	4b13      	ldr	r3, [pc, #76]	; (8004a4c <prvProcessTimerOrBlockTask+0x90>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d101      	bne.n	8004a0c <prvProcessTimerOrBlockTask+0x50>
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e000      	b.n	8004a0e <prvProcessTimerOrBlockTask+0x52>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004a10:	4b0f      	ldr	r3, [pc, #60]	; (8004a50 <prvProcessTimerOrBlockTask+0x94>)
 8004a12:	6818      	ldr	r0, [r3, #0]
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	f7fe fe7b 	bl	8003718 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004a22:	f7ff f8e3 	bl	8003bec <xTaskResumeAll>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10a      	bne.n	8004a42 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004a2c:	4b09      	ldr	r3, [pc, #36]	; (8004a54 <prvProcessTimerOrBlockTask+0x98>)
 8004a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	f3bf 8f4f 	dsb	sy
 8004a38:	f3bf 8f6f 	isb	sy
}
 8004a3c:	e001      	b.n	8004a42 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004a3e:	f7ff f8d5 	bl	8003bec <xTaskResumeAll>
}
 8004a42:	bf00      	nop
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	20000894 	.word	0x20000894
 8004a50:	20000898 	.word	0x20000898
 8004a54:	e000ed04 	.word	0xe000ed04

08004a58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004a60:	4b0e      	ldr	r3, [pc, #56]	; (8004a9c <prvGetNextExpireTime+0x44>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <prvGetNextExpireTime+0x16>
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	e000      	b.n	8004a70 <prvGetNextExpireTime+0x18>
 8004a6e:	2200      	movs	r2, #0
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d105      	bne.n	8004a88 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a7c:	4b07      	ldr	r3, [pc, #28]	; (8004a9c <prvGetNextExpireTime+0x44>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	60fb      	str	r3, [r7, #12]
 8004a86:	e001      	b.n	8004a8c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	20000890 	.word	0x20000890

08004aa0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004aa8:	f7ff f93c 	bl	8003d24 <xTaskGetTickCount>
 8004aac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004aae:	4b0b      	ldr	r3, [pc, #44]	; (8004adc <prvSampleTimeNow+0x3c>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d205      	bcs.n	8004ac4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004ab8:	f000 f918 	bl	8004cec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	601a      	str	r2, [r3, #0]
 8004ac2:	e002      	b.n	8004aca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004aca:	4a04      	ldr	r2, [pc, #16]	; (8004adc <prvSampleTimeNow+0x3c>)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	200008a0 	.word	0x200008a0

08004ae0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
 8004aec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004aee:	2300      	movs	r3, #0
 8004af0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d812      	bhi.n	8004b2c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	1ad2      	subs	r2, r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d302      	bcc.n	8004b1a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004b14:	2301      	movs	r3, #1
 8004b16:	617b      	str	r3, [r7, #20]
 8004b18:	e01b      	b.n	8004b52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004b1a:	4b10      	ldr	r3, [pc, #64]	; (8004b5c <prvInsertTimerInActiveList+0x7c>)
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	3304      	adds	r3, #4
 8004b22:	4619      	mov	r1, r3
 8004b24:	4610      	mov	r0, r2
 8004b26:	f7fd fe90 	bl	800284a <vListInsert>
 8004b2a:	e012      	b.n	8004b52 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d206      	bcs.n	8004b42 <prvInsertTimerInActiveList+0x62>
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d302      	bcc.n	8004b42 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	617b      	str	r3, [r7, #20]
 8004b40:	e007      	b.n	8004b52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b42:	4b07      	ldr	r3, [pc, #28]	; (8004b60 <prvInsertTimerInActiveList+0x80>)
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	3304      	adds	r3, #4
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	4610      	mov	r0, r2
 8004b4e:	f7fd fe7c 	bl	800284a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004b52:	697b      	ldr	r3, [r7, #20]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3718      	adds	r7, #24
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	20000894 	.word	0x20000894
 8004b60:	20000890 	.word	0x20000890

08004b64 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b08c      	sub	sp, #48	; 0x30
 8004b68:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b6a:	e0ac      	b.n	8004cc6 <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f2c0 80a8 	blt.w	8004cc4 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d004      	beq.n	8004b8a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	3304      	adds	r3, #4
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7fd fe99 	bl	80028bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b8a:	1d3b      	adds	r3, r7, #4
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7ff ff87 	bl	8004aa0 <prvSampleTimeNow>
 8004b92:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	2b09      	cmp	r3, #9
 8004b98:	f200 8095 	bhi.w	8004cc6 <prvProcessReceivedCommands+0x162>
 8004b9c:	a201      	add	r2, pc, #4	; (adr r2, 8004ba4 <prvProcessReceivedCommands+0x40>)
 8004b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba2:	bf00      	nop
 8004ba4:	08004bcd 	.word	0x08004bcd
 8004ba8:	08004bcd 	.word	0x08004bcd
 8004bac:	08004bcd 	.word	0x08004bcd
 8004bb0:	08004c3f 	.word	0x08004c3f
 8004bb4:	08004c53 	.word	0x08004c53
 8004bb8:	08004c9b 	.word	0x08004c9b
 8004bbc:	08004bcd 	.word	0x08004bcd
 8004bc0:	08004bcd 	.word	0x08004bcd
 8004bc4:	08004c3f 	.word	0x08004c3f
 8004bc8:	08004c53 	.word	0x08004c53
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004bd2:	f043 0301 	orr.w	r3, r3, #1
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	18d1      	adds	r1, r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6a3a      	ldr	r2, [r7, #32]
 8004bea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bec:	f7ff ff78 	bl	8004ae0 <prvInsertTimerInActiveList>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d067      	beq.n	8004cc6 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bfc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c04:	f003 0304 	and.w	r3, r3, #4
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d05c      	beq.n	8004cc6 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	441a      	add	r2, r3
 8004c14:	2300      	movs	r3, #0
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	2300      	movs	r3, #0
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c1e:	f7ff fe23 	bl	8004868 <xTimerGenericCommand>
 8004c22:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d14d      	bne.n	8004cc6 <prvProcessReceivedCommands+0x162>
 8004c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2e:	f383 8811 	msr	BASEPRI, r3
 8004c32:	f3bf 8f6f 	isb	sy
 8004c36:	f3bf 8f4f 	dsb	sy
 8004c3a:	61bb      	str	r3, [r7, #24]
 8004c3c:	e7fe      	b.n	8004c3c <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c44:	f023 0301 	bic.w	r3, r3, #1
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8004c50:	e039      	b.n	8004cc6 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c58:	f043 0301 	orr.w	r3, r3, #1
 8004c5c:	b2da      	uxtb	r2, r3
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c68:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d109      	bne.n	8004c86 <prvProcessReceivedCommands+0x122>
 8004c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c76:	f383 8811 	msr	BASEPRI, r3
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	617b      	str	r3, [r7, #20]
 8004c84:	e7fe      	b.n	8004c84 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c88:	699a      	ldr	r2, [r3, #24]
 8004c8a:	6a3b      	ldr	r3, [r7, #32]
 8004c8c:	18d1      	adds	r1, r2, r3
 8004c8e:	6a3b      	ldr	r3, [r7, #32]
 8004c90:	6a3a      	ldr	r2, [r7, #32]
 8004c92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c94:	f7ff ff24 	bl	8004ae0 <prvInsertTimerInActiveList>
					break;
 8004c98:	e015      	b.n	8004cc6 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d103      	bne.n	8004cb0 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8004ca8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004caa:	f000 fbc3 	bl	8005434 <vPortFree>
 8004cae:	e00a      	b.n	8004cc6 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004cb6:	f023 0301 	bic.w	r3, r3, #1
 8004cba:	b2da      	uxtb	r2, r3
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004cc2:	e000      	b.n	8004cc6 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004cc4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004cc6:	4b08      	ldr	r3, [pc, #32]	; (8004ce8 <prvProcessReceivedCommands+0x184>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f107 0108 	add.w	r1, r7, #8
 8004cce:	2200      	movs	r2, #0
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7fe f96f 	bl	8002fb4 <xQueueReceive>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f47f af47 	bne.w	8004b6c <prvProcessReceivedCommands+0x8>
	}
}
 8004cde:	bf00      	nop
 8004ce0:	3728      	adds	r7, #40	; 0x28
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	20000898 	.word	0x20000898

08004cec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b088      	sub	sp, #32
 8004cf0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004cf2:	e047      	b.n	8004d84 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004cf4:	4b2d      	ldr	r3, [pc, #180]	; (8004dac <prvSwitchTimerLists+0xc0>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cfe:	4b2b      	ldr	r3, [pc, #172]	; (8004dac <prvSwitchTimerLists+0xc0>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	3304      	adds	r3, #4
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7fd fdd5 	bl	80028bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d20:	f003 0304 	and.w	r3, r3, #4
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d02d      	beq.n	8004d84 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	4413      	add	r3, r2
 8004d30:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d90e      	bls.n	8004d58 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d46:	4b19      	ldr	r3, [pc, #100]	; (8004dac <prvSwitchTimerLists+0xc0>)
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	3304      	adds	r3, #4
 8004d4e:	4619      	mov	r1, r3
 8004d50:	4610      	mov	r0, r2
 8004d52:	f7fd fd7a 	bl	800284a <vListInsert>
 8004d56:	e015      	b.n	8004d84 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d58:	2300      	movs	r3, #0
 8004d5a:	9300      	str	r3, [sp, #0]
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	2100      	movs	r1, #0
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f7ff fd80 	bl	8004868 <xTimerGenericCommand>
 8004d68:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d109      	bne.n	8004d84 <prvSwitchTimerLists+0x98>
 8004d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d74:	f383 8811 	msr	BASEPRI, r3
 8004d78:	f3bf 8f6f 	isb	sy
 8004d7c:	f3bf 8f4f 	dsb	sy
 8004d80:	603b      	str	r3, [r7, #0]
 8004d82:	e7fe      	b.n	8004d82 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d84:	4b09      	ldr	r3, [pc, #36]	; (8004dac <prvSwitchTimerLists+0xc0>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1b2      	bne.n	8004cf4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004d8e:	4b07      	ldr	r3, [pc, #28]	; (8004dac <prvSwitchTimerLists+0xc0>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004d94:	4b06      	ldr	r3, [pc, #24]	; (8004db0 <prvSwitchTimerLists+0xc4>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a04      	ldr	r2, [pc, #16]	; (8004dac <prvSwitchTimerLists+0xc0>)
 8004d9a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004d9c:	4a04      	ldr	r2, [pc, #16]	; (8004db0 <prvSwitchTimerLists+0xc4>)
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	6013      	str	r3, [r2, #0]
}
 8004da2:	bf00      	nop
 8004da4:	3718      	adds	r7, #24
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	20000890 	.word	0x20000890
 8004db0:	20000894 	.word	0x20000894

08004db4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004dba:	f000 f95f 	bl	800507c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004dbe:	4b15      	ldr	r3, [pc, #84]	; (8004e14 <prvCheckForValidListAndQueue+0x60>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d120      	bne.n	8004e08 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004dc6:	4814      	ldr	r0, [pc, #80]	; (8004e18 <prvCheckForValidListAndQueue+0x64>)
 8004dc8:	f7fd fcee 	bl	80027a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004dcc:	4813      	ldr	r0, [pc, #76]	; (8004e1c <prvCheckForValidListAndQueue+0x68>)
 8004dce:	f7fd fceb 	bl	80027a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004dd2:	4b13      	ldr	r3, [pc, #76]	; (8004e20 <prvCheckForValidListAndQueue+0x6c>)
 8004dd4:	4a10      	ldr	r2, [pc, #64]	; (8004e18 <prvCheckForValidListAndQueue+0x64>)
 8004dd6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004dd8:	4b12      	ldr	r3, [pc, #72]	; (8004e24 <prvCheckForValidListAndQueue+0x70>)
 8004dda:	4a10      	ldr	r2, [pc, #64]	; (8004e1c <prvCheckForValidListAndQueue+0x68>)
 8004ddc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004dde:	2300      	movs	r3, #0
 8004de0:	9300      	str	r3, [sp, #0]
 8004de2:	4b11      	ldr	r3, [pc, #68]	; (8004e28 <prvCheckForValidListAndQueue+0x74>)
 8004de4:	4a11      	ldr	r2, [pc, #68]	; (8004e2c <prvCheckForValidListAndQueue+0x78>)
 8004de6:	210c      	movs	r1, #12
 8004de8:	200a      	movs	r0, #10
 8004dea:	f7fd fdf9 	bl	80029e0 <xQueueGenericCreateStatic>
 8004dee:	4602      	mov	r2, r0
 8004df0:	4b08      	ldr	r3, [pc, #32]	; (8004e14 <prvCheckForValidListAndQueue+0x60>)
 8004df2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004df4:	4b07      	ldr	r3, [pc, #28]	; (8004e14 <prvCheckForValidListAndQueue+0x60>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d005      	beq.n	8004e08 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004dfc:	4b05      	ldr	r3, [pc, #20]	; (8004e14 <prvCheckForValidListAndQueue+0x60>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	490b      	ldr	r1, [pc, #44]	; (8004e30 <prvCheckForValidListAndQueue+0x7c>)
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7fe fc60 	bl	80036c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e08:	f000 f966 	bl	80050d8 <vPortExitCritical>
}
 8004e0c:	bf00      	nop
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	20000898 	.word	0x20000898
 8004e18:	20000868 	.word	0x20000868
 8004e1c:	2000087c 	.word	0x2000087c
 8004e20:	20000890 	.word	0x20000890
 8004e24:	20000894 	.word	0x20000894
 8004e28:	2000091c 	.word	0x2000091c
 8004e2c:	200008a4 	.word	0x200008a4
 8004e30:	08005fbc 	.word	0x08005fbc

08004e34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	3b04      	subs	r3, #4
 8004e44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	3b04      	subs	r3, #4
 8004e52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	f023 0201 	bic.w	r2, r3, #1
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	3b04      	subs	r3, #4
 8004e62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e64:	4a0c      	ldr	r2, [pc, #48]	; (8004e98 <pxPortInitialiseStack+0x64>)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	3b14      	subs	r3, #20
 8004e6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	3b04      	subs	r3, #4
 8004e7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f06f 0202 	mvn.w	r2, #2
 8004e82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	3b20      	subs	r3, #32
 8004e88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3714      	adds	r7, #20
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr
 8004e98:	08004e9d 	.word	0x08004e9d

08004e9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004ea6:	4b11      	ldr	r3, [pc, #68]	; (8004eec <prvTaskExitError+0x50>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eae:	d009      	beq.n	8004ec4 <prvTaskExitError+0x28>
 8004eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb4:	f383 8811 	msr	BASEPRI, r3
 8004eb8:	f3bf 8f6f 	isb	sy
 8004ebc:	f3bf 8f4f 	dsb	sy
 8004ec0:	60fb      	str	r3, [r7, #12]
 8004ec2:	e7fe      	b.n	8004ec2 <prvTaskExitError+0x26>
 8004ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec8:	f383 8811 	msr	BASEPRI, r3
 8004ecc:	f3bf 8f6f 	isb	sy
 8004ed0:	f3bf 8f4f 	dsb	sy
 8004ed4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004ed6:	bf00      	nop
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d0fc      	beq.n	8004ed8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004ede:	bf00      	nop
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	2000000c 	.word	0x2000000c

08004ef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ef0:	4b07      	ldr	r3, [pc, #28]	; (8004f10 <pxCurrentTCBConst2>)
 8004ef2:	6819      	ldr	r1, [r3, #0]
 8004ef4:	6808      	ldr	r0, [r1, #0]
 8004ef6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004efa:	f380 8809 	msr	PSP, r0
 8004efe:	f3bf 8f6f 	isb	sy
 8004f02:	f04f 0000 	mov.w	r0, #0
 8004f06:	f380 8811 	msr	BASEPRI, r0
 8004f0a:	4770      	bx	lr
 8004f0c:	f3af 8000 	nop.w

08004f10 <pxCurrentTCBConst2>:
 8004f10:	2000073c 	.word	0x2000073c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f14:	bf00      	nop
 8004f16:	bf00      	nop

08004f18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004f18:	4808      	ldr	r0, [pc, #32]	; (8004f3c <prvPortStartFirstTask+0x24>)
 8004f1a:	6800      	ldr	r0, [r0, #0]
 8004f1c:	6800      	ldr	r0, [r0, #0]
 8004f1e:	f380 8808 	msr	MSP, r0
 8004f22:	f04f 0000 	mov.w	r0, #0
 8004f26:	f380 8814 	msr	CONTROL, r0
 8004f2a:	b662      	cpsie	i
 8004f2c:	b661      	cpsie	f
 8004f2e:	f3bf 8f4f 	dsb	sy
 8004f32:	f3bf 8f6f 	isb	sy
 8004f36:	df00      	svc	0
 8004f38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004f3a:	bf00      	nop
 8004f3c:	e000ed08 	.word	0xe000ed08

08004f40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004f46:	4b44      	ldr	r3, [pc, #272]	; (8005058 <xPortStartScheduler+0x118>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a44      	ldr	r2, [pc, #272]	; (800505c <xPortStartScheduler+0x11c>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d109      	bne.n	8004f64 <xPortStartScheduler+0x24>
 8004f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	613b      	str	r3, [r7, #16]
 8004f62:	e7fe      	b.n	8004f62 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f64:	4b3c      	ldr	r3, [pc, #240]	; (8005058 <xPortStartScheduler+0x118>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a3d      	ldr	r2, [pc, #244]	; (8005060 <xPortStartScheduler+0x120>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d109      	bne.n	8004f82 <xPortStartScheduler+0x42>
 8004f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f72:	f383 8811 	msr	BASEPRI, r3
 8004f76:	f3bf 8f6f 	isb	sy
 8004f7a:	f3bf 8f4f 	dsb	sy
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	e7fe      	b.n	8004f80 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f82:	4b38      	ldr	r3, [pc, #224]	; (8005064 <xPortStartScheduler+0x124>)
 8004f84:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	22ff      	movs	r2, #255	; 0xff
 8004f92:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f9c:	78fb      	ldrb	r3, [r7, #3]
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004fa4:	b2da      	uxtb	r2, r3
 8004fa6:	4b30      	ldr	r3, [pc, #192]	; (8005068 <xPortStartScheduler+0x128>)
 8004fa8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004faa:	4b30      	ldr	r3, [pc, #192]	; (800506c <xPortStartScheduler+0x12c>)
 8004fac:	2207      	movs	r2, #7
 8004fae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fb0:	e009      	b.n	8004fc6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004fb2:	4b2e      	ldr	r3, [pc, #184]	; (800506c <xPortStartScheduler+0x12c>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	4a2c      	ldr	r2, [pc, #176]	; (800506c <xPortStartScheduler+0x12c>)
 8004fba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004fbc:	78fb      	ldrb	r3, [r7, #3]
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	005b      	lsls	r3, r3, #1
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fc6:	78fb      	ldrb	r3, [r7, #3]
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fce:	2b80      	cmp	r3, #128	; 0x80
 8004fd0:	d0ef      	beq.n	8004fb2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004fd2:	4b26      	ldr	r3, [pc, #152]	; (800506c <xPortStartScheduler+0x12c>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f1c3 0307 	rsb	r3, r3, #7
 8004fda:	2b04      	cmp	r3, #4
 8004fdc:	d009      	beq.n	8004ff2 <xPortStartScheduler+0xb2>
 8004fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	60bb      	str	r3, [r7, #8]
 8004ff0:	e7fe      	b.n	8004ff0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ff2:	4b1e      	ldr	r3, [pc, #120]	; (800506c <xPortStartScheduler+0x12c>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	021b      	lsls	r3, r3, #8
 8004ff8:	4a1c      	ldr	r2, [pc, #112]	; (800506c <xPortStartScheduler+0x12c>)
 8004ffa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ffc:	4b1b      	ldr	r3, [pc, #108]	; (800506c <xPortStartScheduler+0x12c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005004:	4a19      	ldr	r2, [pc, #100]	; (800506c <xPortStartScheduler+0x12c>)
 8005006:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	b2da      	uxtb	r2, r3
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005010:	4b17      	ldr	r3, [pc, #92]	; (8005070 <xPortStartScheduler+0x130>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a16      	ldr	r2, [pc, #88]	; (8005070 <xPortStartScheduler+0x130>)
 8005016:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800501a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800501c:	4b14      	ldr	r3, [pc, #80]	; (8005070 <xPortStartScheduler+0x130>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a13      	ldr	r2, [pc, #76]	; (8005070 <xPortStartScheduler+0x130>)
 8005022:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005026:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005028:	f000 f8d6 	bl	80051d8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800502c:	4b11      	ldr	r3, [pc, #68]	; (8005074 <xPortStartScheduler+0x134>)
 800502e:	2200      	movs	r2, #0
 8005030:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005032:	f000 f8f5 	bl	8005220 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005036:	4b10      	ldr	r3, [pc, #64]	; (8005078 <xPortStartScheduler+0x138>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a0f      	ldr	r2, [pc, #60]	; (8005078 <xPortStartScheduler+0x138>)
 800503c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005040:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005042:	f7ff ff69 	bl	8004f18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005046:	f7fe ff35 	bl	8003eb4 <vTaskSwitchContext>
	prvTaskExitError();
 800504a:	f7ff ff27 	bl	8004e9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3718      	adds	r7, #24
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	e000ed00 	.word	0xe000ed00
 800505c:	410fc271 	.word	0x410fc271
 8005060:	410fc270 	.word	0x410fc270
 8005064:	e000e400 	.word	0xe000e400
 8005068:	20000964 	.word	0x20000964
 800506c:	20000968 	.word	0x20000968
 8005070:	e000ed20 	.word	0xe000ed20
 8005074:	2000000c 	.word	0x2000000c
 8005078:	e000ef34 	.word	0xe000ef34

0800507c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005086:	f383 8811 	msr	BASEPRI, r3
 800508a:	f3bf 8f6f 	isb	sy
 800508e:	f3bf 8f4f 	dsb	sy
 8005092:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005094:	4b0e      	ldr	r3, [pc, #56]	; (80050d0 <vPortEnterCritical+0x54>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	3301      	adds	r3, #1
 800509a:	4a0d      	ldr	r2, [pc, #52]	; (80050d0 <vPortEnterCritical+0x54>)
 800509c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800509e:	4b0c      	ldr	r3, [pc, #48]	; (80050d0 <vPortEnterCritical+0x54>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d10e      	bne.n	80050c4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80050a6:	4b0b      	ldr	r3, [pc, #44]	; (80050d4 <vPortEnterCritical+0x58>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d009      	beq.n	80050c4 <vPortEnterCritical+0x48>
 80050b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b4:	f383 8811 	msr	BASEPRI, r3
 80050b8:	f3bf 8f6f 	isb	sy
 80050bc:	f3bf 8f4f 	dsb	sy
 80050c0:	603b      	str	r3, [r7, #0]
 80050c2:	e7fe      	b.n	80050c2 <vPortEnterCritical+0x46>
	}
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr
 80050d0:	2000000c 	.word	0x2000000c
 80050d4:	e000ed04 	.word	0xe000ed04

080050d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80050de:	4b11      	ldr	r3, [pc, #68]	; (8005124 <vPortExitCritical+0x4c>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d109      	bne.n	80050fa <vPortExitCritical+0x22>
 80050e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ea:	f383 8811 	msr	BASEPRI, r3
 80050ee:	f3bf 8f6f 	isb	sy
 80050f2:	f3bf 8f4f 	dsb	sy
 80050f6:	607b      	str	r3, [r7, #4]
 80050f8:	e7fe      	b.n	80050f8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80050fa:	4b0a      	ldr	r3, [pc, #40]	; (8005124 <vPortExitCritical+0x4c>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	3b01      	subs	r3, #1
 8005100:	4a08      	ldr	r2, [pc, #32]	; (8005124 <vPortExitCritical+0x4c>)
 8005102:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005104:	4b07      	ldr	r3, [pc, #28]	; (8005124 <vPortExitCritical+0x4c>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d104      	bne.n	8005116 <vPortExitCritical+0x3e>
 800510c:	2300      	movs	r3, #0
 800510e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005116:	bf00      	nop
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	2000000c 	.word	0x2000000c
	...

08005130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005130:	f3ef 8009 	mrs	r0, PSP
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	4b15      	ldr	r3, [pc, #84]	; (8005190 <pxCurrentTCBConst>)
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	f01e 0f10 	tst.w	lr, #16
 8005140:	bf08      	it	eq
 8005142:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005146:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800514a:	6010      	str	r0, [r2, #0]
 800514c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005150:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005154:	f380 8811 	msr	BASEPRI, r0
 8005158:	f3bf 8f4f 	dsb	sy
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f7fe fea8 	bl	8003eb4 <vTaskSwitchContext>
 8005164:	f04f 0000 	mov.w	r0, #0
 8005168:	f380 8811 	msr	BASEPRI, r0
 800516c:	bc09      	pop	{r0, r3}
 800516e:	6819      	ldr	r1, [r3, #0]
 8005170:	6808      	ldr	r0, [r1, #0]
 8005172:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005176:	f01e 0f10 	tst.w	lr, #16
 800517a:	bf08      	it	eq
 800517c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005180:	f380 8809 	msr	PSP, r0
 8005184:	f3bf 8f6f 	isb	sy
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	f3af 8000 	nop.w

08005190 <pxCurrentTCBConst>:
 8005190:	2000073c 	.word	0x2000073c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005194:	bf00      	nop
 8005196:	bf00      	nop

08005198 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
	__asm volatile
 800519e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a2:	f383 8811 	msr	BASEPRI, r3
 80051a6:	f3bf 8f6f 	isb	sy
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80051b0:	f7fe fdc8 	bl	8003d44 <xTaskIncrementTick>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80051ba:	4b06      	ldr	r3, [pc, #24]	; (80051d4 <xPortSysTickHandler+0x3c>)
 80051bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051c0:	601a      	str	r2, [r3, #0]
 80051c2:	2300      	movs	r3, #0
 80051c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80051cc:	bf00      	nop
 80051ce:	3708      	adds	r7, #8
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	e000ed04 	.word	0xe000ed04

080051d8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80051d8:	b480      	push	{r7}
 80051da:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80051dc:	4b0b      	ldr	r3, [pc, #44]	; (800520c <vPortSetupTimerInterrupt+0x34>)
 80051de:	2200      	movs	r2, #0
 80051e0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80051e2:	4b0b      	ldr	r3, [pc, #44]	; (8005210 <vPortSetupTimerInterrupt+0x38>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80051e8:	4b0a      	ldr	r3, [pc, #40]	; (8005214 <vPortSetupTimerInterrupt+0x3c>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a0a      	ldr	r2, [pc, #40]	; (8005218 <vPortSetupTimerInterrupt+0x40>)
 80051ee:	fba2 2303 	umull	r2, r3, r2, r3
 80051f2:	099b      	lsrs	r3, r3, #6
 80051f4:	4a09      	ldr	r2, [pc, #36]	; (800521c <vPortSetupTimerInterrupt+0x44>)
 80051f6:	3b01      	subs	r3, #1
 80051f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80051fa:	4b04      	ldr	r3, [pc, #16]	; (800520c <vPortSetupTimerInterrupt+0x34>)
 80051fc:	2207      	movs	r2, #7
 80051fe:	601a      	str	r2, [r3, #0]
}
 8005200:	bf00      	nop
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	e000e010 	.word	0xe000e010
 8005210:	e000e018 	.word	0xe000e018
 8005214:	20000000 	.word	0x20000000
 8005218:	10624dd3 	.word	0x10624dd3
 800521c:	e000e014 	.word	0xe000e014

08005220 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005220:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005230 <vPortEnableVFP+0x10>
 8005224:	6801      	ldr	r1, [r0, #0]
 8005226:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800522a:	6001      	str	r1, [r0, #0]
 800522c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800522e:	bf00      	nop
 8005230:	e000ed88 	.word	0xe000ed88

08005234 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800523a:	f3ef 8305 	mrs	r3, IPSR
 800523e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2b0f      	cmp	r3, #15
 8005244:	d913      	bls.n	800526e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005246:	4a16      	ldr	r2, [pc, #88]	; (80052a0 <vPortValidateInterruptPriority+0x6c>)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4413      	add	r3, r2
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005250:	4b14      	ldr	r3, [pc, #80]	; (80052a4 <vPortValidateInterruptPriority+0x70>)
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	7afa      	ldrb	r2, [r7, #11]
 8005256:	429a      	cmp	r2, r3
 8005258:	d209      	bcs.n	800526e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800525a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525e:	f383 8811 	msr	BASEPRI, r3
 8005262:	f3bf 8f6f 	isb	sy
 8005266:	f3bf 8f4f 	dsb	sy
 800526a:	607b      	str	r3, [r7, #4]
 800526c:	e7fe      	b.n	800526c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800526e:	4b0e      	ldr	r3, [pc, #56]	; (80052a8 <vPortValidateInterruptPriority+0x74>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005276:	4b0d      	ldr	r3, [pc, #52]	; (80052ac <vPortValidateInterruptPriority+0x78>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	429a      	cmp	r2, r3
 800527c:	d909      	bls.n	8005292 <vPortValidateInterruptPriority+0x5e>
 800527e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	603b      	str	r3, [r7, #0]
 8005290:	e7fe      	b.n	8005290 <vPortValidateInterruptPriority+0x5c>
	}
 8005292:	bf00      	nop
 8005294:	3714      	adds	r7, #20
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	e000e3f0 	.word	0xe000e3f0
 80052a4:	20000964 	.word	0x20000964
 80052a8:	e000ed0c 	.word	0xe000ed0c
 80052ac:	20000968 	.word	0x20000968

080052b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b08a      	sub	sp, #40	; 0x28
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80052b8:	2300      	movs	r3, #0
 80052ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80052bc:	f7fe fc88 	bl	8003bd0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80052c0:	4b57      	ldr	r3, [pc, #348]	; (8005420 <pvPortMalloc+0x170>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80052c8:	f000 f90c 	bl	80054e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80052cc:	4b55      	ldr	r3, [pc, #340]	; (8005424 <pvPortMalloc+0x174>)
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4013      	ands	r3, r2
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f040 808c 	bne.w	80053f2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d01c      	beq.n	800531a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80052e0:	2208      	movs	r2, #8
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4413      	add	r3, r2
 80052e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f003 0307 	and.w	r3, r3, #7
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d013      	beq.n	800531a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f023 0307 	bic.w	r3, r3, #7
 80052f8:	3308      	adds	r3, #8
 80052fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f003 0307 	and.w	r3, r3, #7
 8005302:	2b00      	cmp	r3, #0
 8005304:	d009      	beq.n	800531a <pvPortMalloc+0x6a>
 8005306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530a:	f383 8811 	msr	BASEPRI, r3
 800530e:	f3bf 8f6f 	isb	sy
 8005312:	f3bf 8f4f 	dsb	sy
 8005316:	617b      	str	r3, [r7, #20]
 8005318:	e7fe      	b.n	8005318 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d068      	beq.n	80053f2 <pvPortMalloc+0x142>
 8005320:	4b41      	ldr	r3, [pc, #260]	; (8005428 <pvPortMalloc+0x178>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	429a      	cmp	r2, r3
 8005328:	d863      	bhi.n	80053f2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800532a:	4b40      	ldr	r3, [pc, #256]	; (800542c <pvPortMalloc+0x17c>)
 800532c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800532e:	4b3f      	ldr	r3, [pc, #252]	; (800542c <pvPortMalloc+0x17c>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005334:	e004      	b.n	8005340 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	429a      	cmp	r2, r3
 8005348:	d903      	bls.n	8005352 <pvPortMalloc+0xa2>
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1f1      	bne.n	8005336 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005352:	4b33      	ldr	r3, [pc, #204]	; (8005420 <pvPortMalloc+0x170>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005358:	429a      	cmp	r2, r3
 800535a:	d04a      	beq.n	80053f2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800535c:	6a3b      	ldr	r3, [r7, #32]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2208      	movs	r2, #8
 8005362:	4413      	add	r3, r2
 8005364:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	6a3b      	ldr	r3, [r7, #32]
 800536c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	1ad2      	subs	r2, r2, r3
 8005376:	2308      	movs	r3, #8
 8005378:	005b      	lsls	r3, r3, #1
 800537a:	429a      	cmp	r2, r3
 800537c:	d91e      	bls.n	80053bc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800537e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4413      	add	r3, r2
 8005384:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	f003 0307 	and.w	r3, r3, #7
 800538c:	2b00      	cmp	r3, #0
 800538e:	d009      	beq.n	80053a4 <pvPortMalloc+0xf4>
 8005390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005394:	f383 8811 	msr	BASEPRI, r3
 8005398:	f3bf 8f6f 	isb	sy
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	613b      	str	r3, [r7, #16]
 80053a2:	e7fe      	b.n	80053a2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	1ad2      	subs	r2, r2, r3
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80053b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80053b6:	69b8      	ldr	r0, [r7, #24]
 80053b8:	f000 f8f6 	bl	80055a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80053bc:	4b1a      	ldr	r3, [pc, #104]	; (8005428 <pvPortMalloc+0x178>)
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	4a18      	ldr	r2, [pc, #96]	; (8005428 <pvPortMalloc+0x178>)
 80053c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80053ca:	4b17      	ldr	r3, [pc, #92]	; (8005428 <pvPortMalloc+0x178>)
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	4b18      	ldr	r3, [pc, #96]	; (8005430 <pvPortMalloc+0x180>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d203      	bcs.n	80053de <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80053d6:	4b14      	ldr	r3, [pc, #80]	; (8005428 <pvPortMalloc+0x178>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a15      	ldr	r2, [pc, #84]	; (8005430 <pvPortMalloc+0x180>)
 80053dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	4b10      	ldr	r3, [pc, #64]	; (8005424 <pvPortMalloc+0x174>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	431a      	orrs	r2, r3
 80053e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80053ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ee:	2200      	movs	r2, #0
 80053f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80053f2:	f7fe fbfb 	bl	8003bec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	f003 0307 	and.w	r3, r3, #7
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d009      	beq.n	8005414 <pvPortMalloc+0x164>
 8005400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005404:	f383 8811 	msr	BASEPRI, r3
 8005408:	f3bf 8f6f 	isb	sy
 800540c:	f3bf 8f4f 	dsb	sy
 8005410:	60fb      	str	r3, [r7, #12]
 8005412:	e7fe      	b.n	8005412 <pvPortMalloc+0x162>
	return pvReturn;
 8005414:	69fb      	ldr	r3, [r7, #28]
}
 8005416:	4618      	mov	r0, r3
 8005418:	3728      	adds	r7, #40	; 0x28
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	20004574 	.word	0x20004574
 8005424:	20004580 	.word	0x20004580
 8005428:	20004578 	.word	0x20004578
 800542c:	2000456c 	.word	0x2000456c
 8005430:	2000457c 	.word	0x2000457c

08005434 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b086      	sub	sp, #24
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d046      	beq.n	80054d4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005446:	2308      	movs	r3, #8
 8005448:	425b      	negs	r3, r3
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	4413      	add	r3, r2
 800544e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	4b20      	ldr	r3, [pc, #128]	; (80054dc <vPortFree+0xa8>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4013      	ands	r3, r2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d109      	bne.n	8005476 <vPortFree+0x42>
 8005462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005466:	f383 8811 	msr	BASEPRI, r3
 800546a:	f3bf 8f6f 	isb	sy
 800546e:	f3bf 8f4f 	dsb	sy
 8005472:	60fb      	str	r3, [r7, #12]
 8005474:	e7fe      	b.n	8005474 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d009      	beq.n	8005492 <vPortFree+0x5e>
 800547e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005482:	f383 8811 	msr	BASEPRI, r3
 8005486:	f3bf 8f6f 	isb	sy
 800548a:	f3bf 8f4f 	dsb	sy
 800548e:	60bb      	str	r3, [r7, #8]
 8005490:	e7fe      	b.n	8005490 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	685a      	ldr	r2, [r3, #4]
 8005496:	4b11      	ldr	r3, [pc, #68]	; (80054dc <vPortFree+0xa8>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4013      	ands	r3, r2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d019      	beq.n	80054d4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d115      	bne.n	80054d4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	4b0b      	ldr	r3, [pc, #44]	; (80054dc <vPortFree+0xa8>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	43db      	mvns	r3, r3
 80054b2:	401a      	ands	r2, r3
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80054b8:	f7fe fb8a 	bl	8003bd0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	685a      	ldr	r2, [r3, #4]
 80054c0:	4b07      	ldr	r3, [pc, #28]	; (80054e0 <vPortFree+0xac>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4413      	add	r3, r2
 80054c6:	4a06      	ldr	r2, [pc, #24]	; (80054e0 <vPortFree+0xac>)
 80054c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80054ca:	6938      	ldr	r0, [r7, #16]
 80054cc:	f000 f86c 	bl	80055a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80054d0:	f7fe fb8c 	bl	8003bec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80054d4:	bf00      	nop
 80054d6:	3718      	adds	r7, #24
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	20004580 	.word	0x20004580
 80054e0:	20004578 	.word	0x20004578

080054e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80054ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80054ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80054f0:	4b27      	ldr	r3, [pc, #156]	; (8005590 <prvHeapInit+0xac>)
 80054f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f003 0307 	and.w	r3, r3, #7
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00c      	beq.n	8005518 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	3307      	adds	r3, #7
 8005502:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f023 0307 	bic.w	r3, r3, #7
 800550a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	4a1f      	ldr	r2, [pc, #124]	; (8005590 <prvHeapInit+0xac>)
 8005514:	4413      	add	r3, r2
 8005516:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800551c:	4a1d      	ldr	r2, [pc, #116]	; (8005594 <prvHeapInit+0xb0>)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005522:	4b1c      	ldr	r3, [pc, #112]	; (8005594 <prvHeapInit+0xb0>)
 8005524:	2200      	movs	r2, #0
 8005526:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	4413      	add	r3, r2
 800552e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005530:	2208      	movs	r2, #8
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	1a9b      	subs	r3, r3, r2
 8005536:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f023 0307 	bic.w	r3, r3, #7
 800553e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4a15      	ldr	r2, [pc, #84]	; (8005598 <prvHeapInit+0xb4>)
 8005544:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005546:	4b14      	ldr	r3, [pc, #80]	; (8005598 <prvHeapInit+0xb4>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2200      	movs	r2, #0
 800554c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800554e:	4b12      	ldr	r3, [pc, #72]	; (8005598 <prvHeapInit+0xb4>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2200      	movs	r2, #0
 8005554:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	1ad2      	subs	r2, r2, r3
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005564:	4b0c      	ldr	r3, [pc, #48]	; (8005598 <prvHeapInit+0xb4>)
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	4a0a      	ldr	r2, [pc, #40]	; (800559c <prvHeapInit+0xb8>)
 8005572:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	4a09      	ldr	r2, [pc, #36]	; (80055a0 <prvHeapInit+0xbc>)
 800557a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800557c:	4b09      	ldr	r3, [pc, #36]	; (80055a4 <prvHeapInit+0xc0>)
 800557e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005582:	601a      	str	r2, [r3, #0]
}
 8005584:	bf00      	nop
 8005586:	3714      	adds	r7, #20
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	2000096c 	.word	0x2000096c
 8005594:	2000456c 	.word	0x2000456c
 8005598:	20004574 	.word	0x20004574
 800559c:	2000457c 	.word	0x2000457c
 80055a0:	20004578 	.word	0x20004578
 80055a4:	20004580 	.word	0x20004580

080055a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80055b0:	4b28      	ldr	r3, [pc, #160]	; (8005654 <prvInsertBlockIntoFreeList+0xac>)
 80055b2:	60fb      	str	r3, [r7, #12]
 80055b4:	e002      	b.n	80055bc <prvInsertBlockIntoFreeList+0x14>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	60fb      	str	r3, [r7, #12]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d8f7      	bhi.n	80055b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	4413      	add	r3, r2
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d108      	bne.n	80055ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	685a      	ldr	r2, [r3, #4]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	441a      	add	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	68ba      	ldr	r2, [r7, #8]
 80055f4:	441a      	add	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d118      	bne.n	8005630 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	4b15      	ldr	r3, [pc, #84]	; (8005658 <prvInsertBlockIntoFreeList+0xb0>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	429a      	cmp	r2, r3
 8005608:	d00d      	beq.n	8005626 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685a      	ldr	r2, [r3, #4]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	441a      	add	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	601a      	str	r2, [r3, #0]
 8005624:	e008      	b.n	8005638 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005626:	4b0c      	ldr	r3, [pc, #48]	; (8005658 <prvInsertBlockIntoFreeList+0xb0>)
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	601a      	str	r2, [r3, #0]
 800562e:	e003      	b.n	8005638 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	429a      	cmp	r2, r3
 800563e:	d002      	beq.n	8005646 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005646:	bf00      	nop
 8005648:	3714      	adds	r7, #20
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	2000456c 	.word	0x2000456c
 8005658:	20004574 	.word	0x20004574

0800565c <__errno>:
 800565c:	4b01      	ldr	r3, [pc, #4]	; (8005664 <__errno+0x8>)
 800565e:	6818      	ldr	r0, [r3, #0]
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	20000010 	.word	0x20000010

08005668 <__libc_init_array>:
 8005668:	b570      	push	{r4, r5, r6, lr}
 800566a:	4e0d      	ldr	r6, [pc, #52]	; (80056a0 <__libc_init_array+0x38>)
 800566c:	4c0d      	ldr	r4, [pc, #52]	; (80056a4 <__libc_init_array+0x3c>)
 800566e:	1ba4      	subs	r4, r4, r6
 8005670:	10a4      	asrs	r4, r4, #2
 8005672:	2500      	movs	r5, #0
 8005674:	42a5      	cmp	r5, r4
 8005676:	d109      	bne.n	800568c <__libc_init_array+0x24>
 8005678:	4e0b      	ldr	r6, [pc, #44]	; (80056a8 <__libc_init_array+0x40>)
 800567a:	4c0c      	ldr	r4, [pc, #48]	; (80056ac <__libc_init_array+0x44>)
 800567c:	f000 fc28 	bl	8005ed0 <_init>
 8005680:	1ba4      	subs	r4, r4, r6
 8005682:	10a4      	asrs	r4, r4, #2
 8005684:	2500      	movs	r5, #0
 8005686:	42a5      	cmp	r5, r4
 8005688:	d105      	bne.n	8005696 <__libc_init_array+0x2e>
 800568a:	bd70      	pop	{r4, r5, r6, pc}
 800568c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005690:	4798      	blx	r3
 8005692:	3501      	adds	r5, #1
 8005694:	e7ee      	b.n	8005674 <__libc_init_array+0xc>
 8005696:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800569a:	4798      	blx	r3
 800569c:	3501      	adds	r5, #1
 800569e:	e7f2      	b.n	8005686 <__libc_init_array+0x1e>
 80056a0:	08006018 	.word	0x08006018
 80056a4:	08006018 	.word	0x08006018
 80056a8:	08006018 	.word	0x08006018
 80056ac:	0800601c 	.word	0x0800601c

080056b0 <memcpy>:
 80056b0:	b510      	push	{r4, lr}
 80056b2:	1e43      	subs	r3, r0, #1
 80056b4:	440a      	add	r2, r1
 80056b6:	4291      	cmp	r1, r2
 80056b8:	d100      	bne.n	80056bc <memcpy+0xc>
 80056ba:	bd10      	pop	{r4, pc}
 80056bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056c4:	e7f7      	b.n	80056b6 <memcpy+0x6>

080056c6 <memset>:
 80056c6:	4402      	add	r2, r0
 80056c8:	4603      	mov	r3, r0
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d100      	bne.n	80056d0 <memset+0xa>
 80056ce:	4770      	bx	lr
 80056d0:	f803 1b01 	strb.w	r1, [r3], #1
 80056d4:	e7f9      	b.n	80056ca <memset+0x4>
	...

080056d8 <siprintf>:
 80056d8:	b40e      	push	{r1, r2, r3}
 80056da:	b500      	push	{lr}
 80056dc:	b09c      	sub	sp, #112	; 0x70
 80056de:	ab1d      	add	r3, sp, #116	; 0x74
 80056e0:	9002      	str	r0, [sp, #8]
 80056e2:	9006      	str	r0, [sp, #24]
 80056e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80056e8:	4809      	ldr	r0, [pc, #36]	; (8005710 <siprintf+0x38>)
 80056ea:	9107      	str	r1, [sp, #28]
 80056ec:	9104      	str	r1, [sp, #16]
 80056ee:	4909      	ldr	r1, [pc, #36]	; (8005714 <siprintf+0x3c>)
 80056f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80056f4:	9105      	str	r1, [sp, #20]
 80056f6:	6800      	ldr	r0, [r0, #0]
 80056f8:	9301      	str	r3, [sp, #4]
 80056fa:	a902      	add	r1, sp, #8
 80056fc:	f000 f866 	bl	80057cc <_svfiprintf_r>
 8005700:	9b02      	ldr	r3, [sp, #8]
 8005702:	2200      	movs	r2, #0
 8005704:	701a      	strb	r2, [r3, #0]
 8005706:	b01c      	add	sp, #112	; 0x70
 8005708:	f85d eb04 	ldr.w	lr, [sp], #4
 800570c:	b003      	add	sp, #12
 800570e:	4770      	bx	lr
 8005710:	20000010 	.word	0x20000010
 8005714:	ffff0208 	.word	0xffff0208

08005718 <__ssputs_r>:
 8005718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800571c:	688e      	ldr	r6, [r1, #8]
 800571e:	429e      	cmp	r6, r3
 8005720:	4682      	mov	sl, r0
 8005722:	460c      	mov	r4, r1
 8005724:	4690      	mov	r8, r2
 8005726:	4699      	mov	r9, r3
 8005728:	d837      	bhi.n	800579a <__ssputs_r+0x82>
 800572a:	898a      	ldrh	r2, [r1, #12]
 800572c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005730:	d031      	beq.n	8005796 <__ssputs_r+0x7e>
 8005732:	6825      	ldr	r5, [r4, #0]
 8005734:	6909      	ldr	r1, [r1, #16]
 8005736:	1a6f      	subs	r7, r5, r1
 8005738:	6965      	ldr	r5, [r4, #20]
 800573a:	2302      	movs	r3, #2
 800573c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005740:	fb95 f5f3 	sdiv	r5, r5, r3
 8005744:	f109 0301 	add.w	r3, r9, #1
 8005748:	443b      	add	r3, r7
 800574a:	429d      	cmp	r5, r3
 800574c:	bf38      	it	cc
 800574e:	461d      	movcc	r5, r3
 8005750:	0553      	lsls	r3, r2, #21
 8005752:	d530      	bpl.n	80057b6 <__ssputs_r+0x9e>
 8005754:	4629      	mov	r1, r5
 8005756:	f000 fb21 	bl	8005d9c <_malloc_r>
 800575a:	4606      	mov	r6, r0
 800575c:	b950      	cbnz	r0, 8005774 <__ssputs_r+0x5c>
 800575e:	230c      	movs	r3, #12
 8005760:	f8ca 3000 	str.w	r3, [sl]
 8005764:	89a3      	ldrh	r3, [r4, #12]
 8005766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800576a:	81a3      	strh	r3, [r4, #12]
 800576c:	f04f 30ff 	mov.w	r0, #4294967295
 8005770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005774:	463a      	mov	r2, r7
 8005776:	6921      	ldr	r1, [r4, #16]
 8005778:	f7ff ff9a 	bl	80056b0 <memcpy>
 800577c:	89a3      	ldrh	r3, [r4, #12]
 800577e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005786:	81a3      	strh	r3, [r4, #12]
 8005788:	6126      	str	r6, [r4, #16]
 800578a:	6165      	str	r5, [r4, #20]
 800578c:	443e      	add	r6, r7
 800578e:	1bed      	subs	r5, r5, r7
 8005790:	6026      	str	r6, [r4, #0]
 8005792:	60a5      	str	r5, [r4, #8]
 8005794:	464e      	mov	r6, r9
 8005796:	454e      	cmp	r6, r9
 8005798:	d900      	bls.n	800579c <__ssputs_r+0x84>
 800579a:	464e      	mov	r6, r9
 800579c:	4632      	mov	r2, r6
 800579e:	4641      	mov	r1, r8
 80057a0:	6820      	ldr	r0, [r4, #0]
 80057a2:	f000 fa93 	bl	8005ccc <memmove>
 80057a6:	68a3      	ldr	r3, [r4, #8]
 80057a8:	1b9b      	subs	r3, r3, r6
 80057aa:	60a3      	str	r3, [r4, #8]
 80057ac:	6823      	ldr	r3, [r4, #0]
 80057ae:	441e      	add	r6, r3
 80057b0:	6026      	str	r6, [r4, #0]
 80057b2:	2000      	movs	r0, #0
 80057b4:	e7dc      	b.n	8005770 <__ssputs_r+0x58>
 80057b6:	462a      	mov	r2, r5
 80057b8:	f000 fb4a 	bl	8005e50 <_realloc_r>
 80057bc:	4606      	mov	r6, r0
 80057be:	2800      	cmp	r0, #0
 80057c0:	d1e2      	bne.n	8005788 <__ssputs_r+0x70>
 80057c2:	6921      	ldr	r1, [r4, #16]
 80057c4:	4650      	mov	r0, sl
 80057c6:	f000 fa9b 	bl	8005d00 <_free_r>
 80057ca:	e7c8      	b.n	800575e <__ssputs_r+0x46>

080057cc <_svfiprintf_r>:
 80057cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057d0:	461d      	mov	r5, r3
 80057d2:	898b      	ldrh	r3, [r1, #12]
 80057d4:	061f      	lsls	r7, r3, #24
 80057d6:	b09d      	sub	sp, #116	; 0x74
 80057d8:	4680      	mov	r8, r0
 80057da:	460c      	mov	r4, r1
 80057dc:	4616      	mov	r6, r2
 80057de:	d50f      	bpl.n	8005800 <_svfiprintf_r+0x34>
 80057e0:	690b      	ldr	r3, [r1, #16]
 80057e2:	b96b      	cbnz	r3, 8005800 <_svfiprintf_r+0x34>
 80057e4:	2140      	movs	r1, #64	; 0x40
 80057e6:	f000 fad9 	bl	8005d9c <_malloc_r>
 80057ea:	6020      	str	r0, [r4, #0]
 80057ec:	6120      	str	r0, [r4, #16]
 80057ee:	b928      	cbnz	r0, 80057fc <_svfiprintf_r+0x30>
 80057f0:	230c      	movs	r3, #12
 80057f2:	f8c8 3000 	str.w	r3, [r8]
 80057f6:	f04f 30ff 	mov.w	r0, #4294967295
 80057fa:	e0c8      	b.n	800598e <_svfiprintf_r+0x1c2>
 80057fc:	2340      	movs	r3, #64	; 0x40
 80057fe:	6163      	str	r3, [r4, #20]
 8005800:	2300      	movs	r3, #0
 8005802:	9309      	str	r3, [sp, #36]	; 0x24
 8005804:	2320      	movs	r3, #32
 8005806:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800580a:	2330      	movs	r3, #48	; 0x30
 800580c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005810:	9503      	str	r5, [sp, #12]
 8005812:	f04f 0b01 	mov.w	fp, #1
 8005816:	4637      	mov	r7, r6
 8005818:	463d      	mov	r5, r7
 800581a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800581e:	b10b      	cbz	r3, 8005824 <_svfiprintf_r+0x58>
 8005820:	2b25      	cmp	r3, #37	; 0x25
 8005822:	d13e      	bne.n	80058a2 <_svfiprintf_r+0xd6>
 8005824:	ebb7 0a06 	subs.w	sl, r7, r6
 8005828:	d00b      	beq.n	8005842 <_svfiprintf_r+0x76>
 800582a:	4653      	mov	r3, sl
 800582c:	4632      	mov	r2, r6
 800582e:	4621      	mov	r1, r4
 8005830:	4640      	mov	r0, r8
 8005832:	f7ff ff71 	bl	8005718 <__ssputs_r>
 8005836:	3001      	adds	r0, #1
 8005838:	f000 80a4 	beq.w	8005984 <_svfiprintf_r+0x1b8>
 800583c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800583e:	4453      	add	r3, sl
 8005840:	9309      	str	r3, [sp, #36]	; 0x24
 8005842:	783b      	ldrb	r3, [r7, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	f000 809d 	beq.w	8005984 <_svfiprintf_r+0x1b8>
 800584a:	2300      	movs	r3, #0
 800584c:	f04f 32ff 	mov.w	r2, #4294967295
 8005850:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005854:	9304      	str	r3, [sp, #16]
 8005856:	9307      	str	r3, [sp, #28]
 8005858:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800585c:	931a      	str	r3, [sp, #104]	; 0x68
 800585e:	462f      	mov	r7, r5
 8005860:	2205      	movs	r2, #5
 8005862:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005866:	4850      	ldr	r0, [pc, #320]	; (80059a8 <_svfiprintf_r+0x1dc>)
 8005868:	f7fa fcc2 	bl	80001f0 <memchr>
 800586c:	9b04      	ldr	r3, [sp, #16]
 800586e:	b9d0      	cbnz	r0, 80058a6 <_svfiprintf_r+0xda>
 8005870:	06d9      	lsls	r1, r3, #27
 8005872:	bf44      	itt	mi
 8005874:	2220      	movmi	r2, #32
 8005876:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800587a:	071a      	lsls	r2, r3, #28
 800587c:	bf44      	itt	mi
 800587e:	222b      	movmi	r2, #43	; 0x2b
 8005880:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005884:	782a      	ldrb	r2, [r5, #0]
 8005886:	2a2a      	cmp	r2, #42	; 0x2a
 8005888:	d015      	beq.n	80058b6 <_svfiprintf_r+0xea>
 800588a:	9a07      	ldr	r2, [sp, #28]
 800588c:	462f      	mov	r7, r5
 800588e:	2000      	movs	r0, #0
 8005890:	250a      	movs	r5, #10
 8005892:	4639      	mov	r1, r7
 8005894:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005898:	3b30      	subs	r3, #48	; 0x30
 800589a:	2b09      	cmp	r3, #9
 800589c:	d94d      	bls.n	800593a <_svfiprintf_r+0x16e>
 800589e:	b1b8      	cbz	r0, 80058d0 <_svfiprintf_r+0x104>
 80058a0:	e00f      	b.n	80058c2 <_svfiprintf_r+0xf6>
 80058a2:	462f      	mov	r7, r5
 80058a4:	e7b8      	b.n	8005818 <_svfiprintf_r+0x4c>
 80058a6:	4a40      	ldr	r2, [pc, #256]	; (80059a8 <_svfiprintf_r+0x1dc>)
 80058a8:	1a80      	subs	r0, r0, r2
 80058aa:	fa0b f000 	lsl.w	r0, fp, r0
 80058ae:	4318      	orrs	r0, r3
 80058b0:	9004      	str	r0, [sp, #16]
 80058b2:	463d      	mov	r5, r7
 80058b4:	e7d3      	b.n	800585e <_svfiprintf_r+0x92>
 80058b6:	9a03      	ldr	r2, [sp, #12]
 80058b8:	1d11      	adds	r1, r2, #4
 80058ba:	6812      	ldr	r2, [r2, #0]
 80058bc:	9103      	str	r1, [sp, #12]
 80058be:	2a00      	cmp	r2, #0
 80058c0:	db01      	blt.n	80058c6 <_svfiprintf_r+0xfa>
 80058c2:	9207      	str	r2, [sp, #28]
 80058c4:	e004      	b.n	80058d0 <_svfiprintf_r+0x104>
 80058c6:	4252      	negs	r2, r2
 80058c8:	f043 0302 	orr.w	r3, r3, #2
 80058cc:	9207      	str	r2, [sp, #28]
 80058ce:	9304      	str	r3, [sp, #16]
 80058d0:	783b      	ldrb	r3, [r7, #0]
 80058d2:	2b2e      	cmp	r3, #46	; 0x2e
 80058d4:	d10c      	bne.n	80058f0 <_svfiprintf_r+0x124>
 80058d6:	787b      	ldrb	r3, [r7, #1]
 80058d8:	2b2a      	cmp	r3, #42	; 0x2a
 80058da:	d133      	bne.n	8005944 <_svfiprintf_r+0x178>
 80058dc:	9b03      	ldr	r3, [sp, #12]
 80058de:	1d1a      	adds	r2, r3, #4
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	9203      	str	r2, [sp, #12]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	bfb8      	it	lt
 80058e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80058ec:	3702      	adds	r7, #2
 80058ee:	9305      	str	r3, [sp, #20]
 80058f0:	4d2e      	ldr	r5, [pc, #184]	; (80059ac <_svfiprintf_r+0x1e0>)
 80058f2:	7839      	ldrb	r1, [r7, #0]
 80058f4:	2203      	movs	r2, #3
 80058f6:	4628      	mov	r0, r5
 80058f8:	f7fa fc7a 	bl	80001f0 <memchr>
 80058fc:	b138      	cbz	r0, 800590e <_svfiprintf_r+0x142>
 80058fe:	2340      	movs	r3, #64	; 0x40
 8005900:	1b40      	subs	r0, r0, r5
 8005902:	fa03 f000 	lsl.w	r0, r3, r0
 8005906:	9b04      	ldr	r3, [sp, #16]
 8005908:	4303      	orrs	r3, r0
 800590a:	3701      	adds	r7, #1
 800590c:	9304      	str	r3, [sp, #16]
 800590e:	7839      	ldrb	r1, [r7, #0]
 8005910:	4827      	ldr	r0, [pc, #156]	; (80059b0 <_svfiprintf_r+0x1e4>)
 8005912:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005916:	2206      	movs	r2, #6
 8005918:	1c7e      	adds	r6, r7, #1
 800591a:	f7fa fc69 	bl	80001f0 <memchr>
 800591e:	2800      	cmp	r0, #0
 8005920:	d038      	beq.n	8005994 <_svfiprintf_r+0x1c8>
 8005922:	4b24      	ldr	r3, [pc, #144]	; (80059b4 <_svfiprintf_r+0x1e8>)
 8005924:	bb13      	cbnz	r3, 800596c <_svfiprintf_r+0x1a0>
 8005926:	9b03      	ldr	r3, [sp, #12]
 8005928:	3307      	adds	r3, #7
 800592a:	f023 0307 	bic.w	r3, r3, #7
 800592e:	3308      	adds	r3, #8
 8005930:	9303      	str	r3, [sp, #12]
 8005932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005934:	444b      	add	r3, r9
 8005936:	9309      	str	r3, [sp, #36]	; 0x24
 8005938:	e76d      	b.n	8005816 <_svfiprintf_r+0x4a>
 800593a:	fb05 3202 	mla	r2, r5, r2, r3
 800593e:	2001      	movs	r0, #1
 8005940:	460f      	mov	r7, r1
 8005942:	e7a6      	b.n	8005892 <_svfiprintf_r+0xc6>
 8005944:	2300      	movs	r3, #0
 8005946:	3701      	adds	r7, #1
 8005948:	9305      	str	r3, [sp, #20]
 800594a:	4619      	mov	r1, r3
 800594c:	250a      	movs	r5, #10
 800594e:	4638      	mov	r0, r7
 8005950:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005954:	3a30      	subs	r2, #48	; 0x30
 8005956:	2a09      	cmp	r2, #9
 8005958:	d903      	bls.n	8005962 <_svfiprintf_r+0x196>
 800595a:	2b00      	cmp	r3, #0
 800595c:	d0c8      	beq.n	80058f0 <_svfiprintf_r+0x124>
 800595e:	9105      	str	r1, [sp, #20]
 8005960:	e7c6      	b.n	80058f0 <_svfiprintf_r+0x124>
 8005962:	fb05 2101 	mla	r1, r5, r1, r2
 8005966:	2301      	movs	r3, #1
 8005968:	4607      	mov	r7, r0
 800596a:	e7f0      	b.n	800594e <_svfiprintf_r+0x182>
 800596c:	ab03      	add	r3, sp, #12
 800596e:	9300      	str	r3, [sp, #0]
 8005970:	4622      	mov	r2, r4
 8005972:	4b11      	ldr	r3, [pc, #68]	; (80059b8 <_svfiprintf_r+0x1ec>)
 8005974:	a904      	add	r1, sp, #16
 8005976:	4640      	mov	r0, r8
 8005978:	f3af 8000 	nop.w
 800597c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005980:	4681      	mov	r9, r0
 8005982:	d1d6      	bne.n	8005932 <_svfiprintf_r+0x166>
 8005984:	89a3      	ldrh	r3, [r4, #12]
 8005986:	065b      	lsls	r3, r3, #25
 8005988:	f53f af35 	bmi.w	80057f6 <_svfiprintf_r+0x2a>
 800598c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800598e:	b01d      	add	sp, #116	; 0x74
 8005990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005994:	ab03      	add	r3, sp, #12
 8005996:	9300      	str	r3, [sp, #0]
 8005998:	4622      	mov	r2, r4
 800599a:	4b07      	ldr	r3, [pc, #28]	; (80059b8 <_svfiprintf_r+0x1ec>)
 800599c:	a904      	add	r1, sp, #16
 800599e:	4640      	mov	r0, r8
 80059a0:	f000 f882 	bl	8005aa8 <_printf_i>
 80059a4:	e7ea      	b.n	800597c <_svfiprintf_r+0x1b0>
 80059a6:	bf00      	nop
 80059a8:	08005fdc 	.word	0x08005fdc
 80059ac:	08005fe2 	.word	0x08005fe2
 80059b0:	08005fe6 	.word	0x08005fe6
 80059b4:	00000000 	.word	0x00000000
 80059b8:	08005719 	.word	0x08005719

080059bc <_printf_common>:
 80059bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059c0:	4691      	mov	r9, r2
 80059c2:	461f      	mov	r7, r3
 80059c4:	688a      	ldr	r2, [r1, #8]
 80059c6:	690b      	ldr	r3, [r1, #16]
 80059c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059cc:	4293      	cmp	r3, r2
 80059ce:	bfb8      	it	lt
 80059d0:	4613      	movlt	r3, r2
 80059d2:	f8c9 3000 	str.w	r3, [r9]
 80059d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059da:	4606      	mov	r6, r0
 80059dc:	460c      	mov	r4, r1
 80059de:	b112      	cbz	r2, 80059e6 <_printf_common+0x2a>
 80059e0:	3301      	adds	r3, #1
 80059e2:	f8c9 3000 	str.w	r3, [r9]
 80059e6:	6823      	ldr	r3, [r4, #0]
 80059e8:	0699      	lsls	r1, r3, #26
 80059ea:	bf42      	ittt	mi
 80059ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 80059f0:	3302      	addmi	r3, #2
 80059f2:	f8c9 3000 	strmi.w	r3, [r9]
 80059f6:	6825      	ldr	r5, [r4, #0]
 80059f8:	f015 0506 	ands.w	r5, r5, #6
 80059fc:	d107      	bne.n	8005a0e <_printf_common+0x52>
 80059fe:	f104 0a19 	add.w	sl, r4, #25
 8005a02:	68e3      	ldr	r3, [r4, #12]
 8005a04:	f8d9 2000 	ldr.w	r2, [r9]
 8005a08:	1a9b      	subs	r3, r3, r2
 8005a0a:	42ab      	cmp	r3, r5
 8005a0c:	dc28      	bgt.n	8005a60 <_printf_common+0xa4>
 8005a0e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005a12:	6822      	ldr	r2, [r4, #0]
 8005a14:	3300      	adds	r3, #0
 8005a16:	bf18      	it	ne
 8005a18:	2301      	movne	r3, #1
 8005a1a:	0692      	lsls	r2, r2, #26
 8005a1c:	d42d      	bmi.n	8005a7a <_printf_common+0xbe>
 8005a1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a22:	4639      	mov	r1, r7
 8005a24:	4630      	mov	r0, r6
 8005a26:	47c0      	blx	r8
 8005a28:	3001      	adds	r0, #1
 8005a2a:	d020      	beq.n	8005a6e <_printf_common+0xb2>
 8005a2c:	6823      	ldr	r3, [r4, #0]
 8005a2e:	68e5      	ldr	r5, [r4, #12]
 8005a30:	f8d9 2000 	ldr.w	r2, [r9]
 8005a34:	f003 0306 	and.w	r3, r3, #6
 8005a38:	2b04      	cmp	r3, #4
 8005a3a:	bf08      	it	eq
 8005a3c:	1aad      	subeq	r5, r5, r2
 8005a3e:	68a3      	ldr	r3, [r4, #8]
 8005a40:	6922      	ldr	r2, [r4, #16]
 8005a42:	bf0c      	ite	eq
 8005a44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a48:	2500      	movne	r5, #0
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	bfc4      	itt	gt
 8005a4e:	1a9b      	subgt	r3, r3, r2
 8005a50:	18ed      	addgt	r5, r5, r3
 8005a52:	f04f 0900 	mov.w	r9, #0
 8005a56:	341a      	adds	r4, #26
 8005a58:	454d      	cmp	r5, r9
 8005a5a:	d11a      	bne.n	8005a92 <_printf_common+0xd6>
 8005a5c:	2000      	movs	r0, #0
 8005a5e:	e008      	b.n	8005a72 <_printf_common+0xb6>
 8005a60:	2301      	movs	r3, #1
 8005a62:	4652      	mov	r2, sl
 8005a64:	4639      	mov	r1, r7
 8005a66:	4630      	mov	r0, r6
 8005a68:	47c0      	blx	r8
 8005a6a:	3001      	adds	r0, #1
 8005a6c:	d103      	bne.n	8005a76 <_printf_common+0xba>
 8005a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a76:	3501      	adds	r5, #1
 8005a78:	e7c3      	b.n	8005a02 <_printf_common+0x46>
 8005a7a:	18e1      	adds	r1, r4, r3
 8005a7c:	1c5a      	adds	r2, r3, #1
 8005a7e:	2030      	movs	r0, #48	; 0x30
 8005a80:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a84:	4422      	add	r2, r4
 8005a86:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a8a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a8e:	3302      	adds	r3, #2
 8005a90:	e7c5      	b.n	8005a1e <_printf_common+0x62>
 8005a92:	2301      	movs	r3, #1
 8005a94:	4622      	mov	r2, r4
 8005a96:	4639      	mov	r1, r7
 8005a98:	4630      	mov	r0, r6
 8005a9a:	47c0      	blx	r8
 8005a9c:	3001      	adds	r0, #1
 8005a9e:	d0e6      	beq.n	8005a6e <_printf_common+0xb2>
 8005aa0:	f109 0901 	add.w	r9, r9, #1
 8005aa4:	e7d8      	b.n	8005a58 <_printf_common+0x9c>
	...

08005aa8 <_printf_i>:
 8005aa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005aac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005ab0:	460c      	mov	r4, r1
 8005ab2:	7e09      	ldrb	r1, [r1, #24]
 8005ab4:	b085      	sub	sp, #20
 8005ab6:	296e      	cmp	r1, #110	; 0x6e
 8005ab8:	4617      	mov	r7, r2
 8005aba:	4606      	mov	r6, r0
 8005abc:	4698      	mov	r8, r3
 8005abe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ac0:	f000 80b3 	beq.w	8005c2a <_printf_i+0x182>
 8005ac4:	d822      	bhi.n	8005b0c <_printf_i+0x64>
 8005ac6:	2963      	cmp	r1, #99	; 0x63
 8005ac8:	d036      	beq.n	8005b38 <_printf_i+0x90>
 8005aca:	d80a      	bhi.n	8005ae2 <_printf_i+0x3a>
 8005acc:	2900      	cmp	r1, #0
 8005ace:	f000 80b9 	beq.w	8005c44 <_printf_i+0x19c>
 8005ad2:	2958      	cmp	r1, #88	; 0x58
 8005ad4:	f000 8083 	beq.w	8005bde <_printf_i+0x136>
 8005ad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005adc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005ae0:	e032      	b.n	8005b48 <_printf_i+0xa0>
 8005ae2:	2964      	cmp	r1, #100	; 0x64
 8005ae4:	d001      	beq.n	8005aea <_printf_i+0x42>
 8005ae6:	2969      	cmp	r1, #105	; 0x69
 8005ae8:	d1f6      	bne.n	8005ad8 <_printf_i+0x30>
 8005aea:	6820      	ldr	r0, [r4, #0]
 8005aec:	6813      	ldr	r3, [r2, #0]
 8005aee:	0605      	lsls	r5, r0, #24
 8005af0:	f103 0104 	add.w	r1, r3, #4
 8005af4:	d52a      	bpl.n	8005b4c <_printf_i+0xa4>
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6011      	str	r1, [r2, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	da03      	bge.n	8005b06 <_printf_i+0x5e>
 8005afe:	222d      	movs	r2, #45	; 0x2d
 8005b00:	425b      	negs	r3, r3
 8005b02:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005b06:	486f      	ldr	r0, [pc, #444]	; (8005cc4 <_printf_i+0x21c>)
 8005b08:	220a      	movs	r2, #10
 8005b0a:	e039      	b.n	8005b80 <_printf_i+0xd8>
 8005b0c:	2973      	cmp	r1, #115	; 0x73
 8005b0e:	f000 809d 	beq.w	8005c4c <_printf_i+0x1a4>
 8005b12:	d808      	bhi.n	8005b26 <_printf_i+0x7e>
 8005b14:	296f      	cmp	r1, #111	; 0x6f
 8005b16:	d020      	beq.n	8005b5a <_printf_i+0xb2>
 8005b18:	2970      	cmp	r1, #112	; 0x70
 8005b1a:	d1dd      	bne.n	8005ad8 <_printf_i+0x30>
 8005b1c:	6823      	ldr	r3, [r4, #0]
 8005b1e:	f043 0320 	orr.w	r3, r3, #32
 8005b22:	6023      	str	r3, [r4, #0]
 8005b24:	e003      	b.n	8005b2e <_printf_i+0x86>
 8005b26:	2975      	cmp	r1, #117	; 0x75
 8005b28:	d017      	beq.n	8005b5a <_printf_i+0xb2>
 8005b2a:	2978      	cmp	r1, #120	; 0x78
 8005b2c:	d1d4      	bne.n	8005ad8 <_printf_i+0x30>
 8005b2e:	2378      	movs	r3, #120	; 0x78
 8005b30:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b34:	4864      	ldr	r0, [pc, #400]	; (8005cc8 <_printf_i+0x220>)
 8005b36:	e055      	b.n	8005be4 <_printf_i+0x13c>
 8005b38:	6813      	ldr	r3, [r2, #0]
 8005b3a:	1d19      	adds	r1, r3, #4
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	6011      	str	r1, [r2, #0]
 8005b40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e08c      	b.n	8005c66 <_printf_i+0x1be>
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	6011      	str	r1, [r2, #0]
 8005b50:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b54:	bf18      	it	ne
 8005b56:	b21b      	sxthne	r3, r3
 8005b58:	e7cf      	b.n	8005afa <_printf_i+0x52>
 8005b5a:	6813      	ldr	r3, [r2, #0]
 8005b5c:	6825      	ldr	r5, [r4, #0]
 8005b5e:	1d18      	adds	r0, r3, #4
 8005b60:	6010      	str	r0, [r2, #0]
 8005b62:	0628      	lsls	r0, r5, #24
 8005b64:	d501      	bpl.n	8005b6a <_printf_i+0xc2>
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	e002      	b.n	8005b70 <_printf_i+0xc8>
 8005b6a:	0668      	lsls	r0, r5, #25
 8005b6c:	d5fb      	bpl.n	8005b66 <_printf_i+0xbe>
 8005b6e:	881b      	ldrh	r3, [r3, #0]
 8005b70:	4854      	ldr	r0, [pc, #336]	; (8005cc4 <_printf_i+0x21c>)
 8005b72:	296f      	cmp	r1, #111	; 0x6f
 8005b74:	bf14      	ite	ne
 8005b76:	220a      	movne	r2, #10
 8005b78:	2208      	moveq	r2, #8
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b80:	6865      	ldr	r5, [r4, #4]
 8005b82:	60a5      	str	r5, [r4, #8]
 8005b84:	2d00      	cmp	r5, #0
 8005b86:	f2c0 8095 	blt.w	8005cb4 <_printf_i+0x20c>
 8005b8a:	6821      	ldr	r1, [r4, #0]
 8005b8c:	f021 0104 	bic.w	r1, r1, #4
 8005b90:	6021      	str	r1, [r4, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d13d      	bne.n	8005c12 <_printf_i+0x16a>
 8005b96:	2d00      	cmp	r5, #0
 8005b98:	f040 808e 	bne.w	8005cb8 <_printf_i+0x210>
 8005b9c:	4665      	mov	r5, ip
 8005b9e:	2a08      	cmp	r2, #8
 8005ba0:	d10b      	bne.n	8005bba <_printf_i+0x112>
 8005ba2:	6823      	ldr	r3, [r4, #0]
 8005ba4:	07db      	lsls	r3, r3, #31
 8005ba6:	d508      	bpl.n	8005bba <_printf_i+0x112>
 8005ba8:	6923      	ldr	r3, [r4, #16]
 8005baa:	6862      	ldr	r2, [r4, #4]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	bfde      	ittt	le
 8005bb0:	2330      	movle	r3, #48	; 0x30
 8005bb2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005bb6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005bba:	ebac 0305 	sub.w	r3, ip, r5
 8005bbe:	6123      	str	r3, [r4, #16]
 8005bc0:	f8cd 8000 	str.w	r8, [sp]
 8005bc4:	463b      	mov	r3, r7
 8005bc6:	aa03      	add	r2, sp, #12
 8005bc8:	4621      	mov	r1, r4
 8005bca:	4630      	mov	r0, r6
 8005bcc:	f7ff fef6 	bl	80059bc <_printf_common>
 8005bd0:	3001      	adds	r0, #1
 8005bd2:	d14d      	bne.n	8005c70 <_printf_i+0x1c8>
 8005bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd8:	b005      	add	sp, #20
 8005bda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005bde:	4839      	ldr	r0, [pc, #228]	; (8005cc4 <_printf_i+0x21c>)
 8005be0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005be4:	6813      	ldr	r3, [r2, #0]
 8005be6:	6821      	ldr	r1, [r4, #0]
 8005be8:	1d1d      	adds	r5, r3, #4
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6015      	str	r5, [r2, #0]
 8005bee:	060a      	lsls	r2, r1, #24
 8005bf0:	d50b      	bpl.n	8005c0a <_printf_i+0x162>
 8005bf2:	07ca      	lsls	r2, r1, #31
 8005bf4:	bf44      	itt	mi
 8005bf6:	f041 0120 	orrmi.w	r1, r1, #32
 8005bfa:	6021      	strmi	r1, [r4, #0]
 8005bfc:	b91b      	cbnz	r3, 8005c06 <_printf_i+0x15e>
 8005bfe:	6822      	ldr	r2, [r4, #0]
 8005c00:	f022 0220 	bic.w	r2, r2, #32
 8005c04:	6022      	str	r2, [r4, #0]
 8005c06:	2210      	movs	r2, #16
 8005c08:	e7b7      	b.n	8005b7a <_printf_i+0xd2>
 8005c0a:	064d      	lsls	r5, r1, #25
 8005c0c:	bf48      	it	mi
 8005c0e:	b29b      	uxthmi	r3, r3
 8005c10:	e7ef      	b.n	8005bf2 <_printf_i+0x14a>
 8005c12:	4665      	mov	r5, ip
 8005c14:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c18:	fb02 3311 	mls	r3, r2, r1, r3
 8005c1c:	5cc3      	ldrb	r3, [r0, r3]
 8005c1e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005c22:	460b      	mov	r3, r1
 8005c24:	2900      	cmp	r1, #0
 8005c26:	d1f5      	bne.n	8005c14 <_printf_i+0x16c>
 8005c28:	e7b9      	b.n	8005b9e <_printf_i+0xf6>
 8005c2a:	6813      	ldr	r3, [r2, #0]
 8005c2c:	6825      	ldr	r5, [r4, #0]
 8005c2e:	6961      	ldr	r1, [r4, #20]
 8005c30:	1d18      	adds	r0, r3, #4
 8005c32:	6010      	str	r0, [r2, #0]
 8005c34:	0628      	lsls	r0, r5, #24
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	d501      	bpl.n	8005c3e <_printf_i+0x196>
 8005c3a:	6019      	str	r1, [r3, #0]
 8005c3c:	e002      	b.n	8005c44 <_printf_i+0x19c>
 8005c3e:	066a      	lsls	r2, r5, #25
 8005c40:	d5fb      	bpl.n	8005c3a <_printf_i+0x192>
 8005c42:	8019      	strh	r1, [r3, #0]
 8005c44:	2300      	movs	r3, #0
 8005c46:	6123      	str	r3, [r4, #16]
 8005c48:	4665      	mov	r5, ip
 8005c4a:	e7b9      	b.n	8005bc0 <_printf_i+0x118>
 8005c4c:	6813      	ldr	r3, [r2, #0]
 8005c4e:	1d19      	adds	r1, r3, #4
 8005c50:	6011      	str	r1, [r2, #0]
 8005c52:	681d      	ldr	r5, [r3, #0]
 8005c54:	6862      	ldr	r2, [r4, #4]
 8005c56:	2100      	movs	r1, #0
 8005c58:	4628      	mov	r0, r5
 8005c5a:	f7fa fac9 	bl	80001f0 <memchr>
 8005c5e:	b108      	cbz	r0, 8005c64 <_printf_i+0x1bc>
 8005c60:	1b40      	subs	r0, r0, r5
 8005c62:	6060      	str	r0, [r4, #4]
 8005c64:	6863      	ldr	r3, [r4, #4]
 8005c66:	6123      	str	r3, [r4, #16]
 8005c68:	2300      	movs	r3, #0
 8005c6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c6e:	e7a7      	b.n	8005bc0 <_printf_i+0x118>
 8005c70:	6923      	ldr	r3, [r4, #16]
 8005c72:	462a      	mov	r2, r5
 8005c74:	4639      	mov	r1, r7
 8005c76:	4630      	mov	r0, r6
 8005c78:	47c0      	blx	r8
 8005c7a:	3001      	adds	r0, #1
 8005c7c:	d0aa      	beq.n	8005bd4 <_printf_i+0x12c>
 8005c7e:	6823      	ldr	r3, [r4, #0]
 8005c80:	079b      	lsls	r3, r3, #30
 8005c82:	d413      	bmi.n	8005cac <_printf_i+0x204>
 8005c84:	68e0      	ldr	r0, [r4, #12]
 8005c86:	9b03      	ldr	r3, [sp, #12]
 8005c88:	4298      	cmp	r0, r3
 8005c8a:	bfb8      	it	lt
 8005c8c:	4618      	movlt	r0, r3
 8005c8e:	e7a3      	b.n	8005bd8 <_printf_i+0x130>
 8005c90:	2301      	movs	r3, #1
 8005c92:	464a      	mov	r2, r9
 8005c94:	4639      	mov	r1, r7
 8005c96:	4630      	mov	r0, r6
 8005c98:	47c0      	blx	r8
 8005c9a:	3001      	adds	r0, #1
 8005c9c:	d09a      	beq.n	8005bd4 <_printf_i+0x12c>
 8005c9e:	3501      	adds	r5, #1
 8005ca0:	68e3      	ldr	r3, [r4, #12]
 8005ca2:	9a03      	ldr	r2, [sp, #12]
 8005ca4:	1a9b      	subs	r3, r3, r2
 8005ca6:	42ab      	cmp	r3, r5
 8005ca8:	dcf2      	bgt.n	8005c90 <_printf_i+0x1e8>
 8005caa:	e7eb      	b.n	8005c84 <_printf_i+0x1dc>
 8005cac:	2500      	movs	r5, #0
 8005cae:	f104 0919 	add.w	r9, r4, #25
 8005cb2:	e7f5      	b.n	8005ca0 <_printf_i+0x1f8>
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1ac      	bne.n	8005c12 <_printf_i+0x16a>
 8005cb8:	7803      	ldrb	r3, [r0, #0]
 8005cba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cbe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cc2:	e76c      	b.n	8005b9e <_printf_i+0xf6>
 8005cc4:	08005fed 	.word	0x08005fed
 8005cc8:	08005ffe 	.word	0x08005ffe

08005ccc <memmove>:
 8005ccc:	4288      	cmp	r0, r1
 8005cce:	b510      	push	{r4, lr}
 8005cd0:	eb01 0302 	add.w	r3, r1, r2
 8005cd4:	d807      	bhi.n	8005ce6 <memmove+0x1a>
 8005cd6:	1e42      	subs	r2, r0, #1
 8005cd8:	4299      	cmp	r1, r3
 8005cda:	d00a      	beq.n	8005cf2 <memmove+0x26>
 8005cdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ce0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005ce4:	e7f8      	b.n	8005cd8 <memmove+0xc>
 8005ce6:	4283      	cmp	r3, r0
 8005ce8:	d9f5      	bls.n	8005cd6 <memmove+0xa>
 8005cea:	1881      	adds	r1, r0, r2
 8005cec:	1ad2      	subs	r2, r2, r3
 8005cee:	42d3      	cmn	r3, r2
 8005cf0:	d100      	bne.n	8005cf4 <memmove+0x28>
 8005cf2:	bd10      	pop	{r4, pc}
 8005cf4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005cf8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005cfc:	e7f7      	b.n	8005cee <memmove+0x22>
	...

08005d00 <_free_r>:
 8005d00:	b538      	push	{r3, r4, r5, lr}
 8005d02:	4605      	mov	r5, r0
 8005d04:	2900      	cmp	r1, #0
 8005d06:	d045      	beq.n	8005d94 <_free_r+0x94>
 8005d08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d0c:	1f0c      	subs	r4, r1, #4
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	bfb8      	it	lt
 8005d12:	18e4      	addlt	r4, r4, r3
 8005d14:	f000 f8d2 	bl	8005ebc <__malloc_lock>
 8005d18:	4a1f      	ldr	r2, [pc, #124]	; (8005d98 <_free_r+0x98>)
 8005d1a:	6813      	ldr	r3, [r2, #0]
 8005d1c:	4610      	mov	r0, r2
 8005d1e:	b933      	cbnz	r3, 8005d2e <_free_r+0x2e>
 8005d20:	6063      	str	r3, [r4, #4]
 8005d22:	6014      	str	r4, [r2, #0]
 8005d24:	4628      	mov	r0, r5
 8005d26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d2a:	f000 b8c8 	b.w	8005ebe <__malloc_unlock>
 8005d2e:	42a3      	cmp	r3, r4
 8005d30:	d90c      	bls.n	8005d4c <_free_r+0x4c>
 8005d32:	6821      	ldr	r1, [r4, #0]
 8005d34:	1862      	adds	r2, r4, r1
 8005d36:	4293      	cmp	r3, r2
 8005d38:	bf04      	itt	eq
 8005d3a:	681a      	ldreq	r2, [r3, #0]
 8005d3c:	685b      	ldreq	r3, [r3, #4]
 8005d3e:	6063      	str	r3, [r4, #4]
 8005d40:	bf04      	itt	eq
 8005d42:	1852      	addeq	r2, r2, r1
 8005d44:	6022      	streq	r2, [r4, #0]
 8005d46:	6004      	str	r4, [r0, #0]
 8005d48:	e7ec      	b.n	8005d24 <_free_r+0x24>
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	685a      	ldr	r2, [r3, #4]
 8005d4e:	b10a      	cbz	r2, 8005d54 <_free_r+0x54>
 8005d50:	42a2      	cmp	r2, r4
 8005d52:	d9fa      	bls.n	8005d4a <_free_r+0x4a>
 8005d54:	6819      	ldr	r1, [r3, #0]
 8005d56:	1858      	adds	r0, r3, r1
 8005d58:	42a0      	cmp	r0, r4
 8005d5a:	d10b      	bne.n	8005d74 <_free_r+0x74>
 8005d5c:	6820      	ldr	r0, [r4, #0]
 8005d5e:	4401      	add	r1, r0
 8005d60:	1858      	adds	r0, r3, r1
 8005d62:	4282      	cmp	r2, r0
 8005d64:	6019      	str	r1, [r3, #0]
 8005d66:	d1dd      	bne.n	8005d24 <_free_r+0x24>
 8005d68:	6810      	ldr	r0, [r2, #0]
 8005d6a:	6852      	ldr	r2, [r2, #4]
 8005d6c:	605a      	str	r2, [r3, #4]
 8005d6e:	4401      	add	r1, r0
 8005d70:	6019      	str	r1, [r3, #0]
 8005d72:	e7d7      	b.n	8005d24 <_free_r+0x24>
 8005d74:	d902      	bls.n	8005d7c <_free_r+0x7c>
 8005d76:	230c      	movs	r3, #12
 8005d78:	602b      	str	r3, [r5, #0]
 8005d7a:	e7d3      	b.n	8005d24 <_free_r+0x24>
 8005d7c:	6820      	ldr	r0, [r4, #0]
 8005d7e:	1821      	adds	r1, r4, r0
 8005d80:	428a      	cmp	r2, r1
 8005d82:	bf04      	itt	eq
 8005d84:	6811      	ldreq	r1, [r2, #0]
 8005d86:	6852      	ldreq	r2, [r2, #4]
 8005d88:	6062      	str	r2, [r4, #4]
 8005d8a:	bf04      	itt	eq
 8005d8c:	1809      	addeq	r1, r1, r0
 8005d8e:	6021      	streq	r1, [r4, #0]
 8005d90:	605c      	str	r4, [r3, #4]
 8005d92:	e7c7      	b.n	8005d24 <_free_r+0x24>
 8005d94:	bd38      	pop	{r3, r4, r5, pc}
 8005d96:	bf00      	nop
 8005d98:	20004584 	.word	0x20004584

08005d9c <_malloc_r>:
 8005d9c:	b570      	push	{r4, r5, r6, lr}
 8005d9e:	1ccd      	adds	r5, r1, #3
 8005da0:	f025 0503 	bic.w	r5, r5, #3
 8005da4:	3508      	adds	r5, #8
 8005da6:	2d0c      	cmp	r5, #12
 8005da8:	bf38      	it	cc
 8005daa:	250c      	movcc	r5, #12
 8005dac:	2d00      	cmp	r5, #0
 8005dae:	4606      	mov	r6, r0
 8005db0:	db01      	blt.n	8005db6 <_malloc_r+0x1a>
 8005db2:	42a9      	cmp	r1, r5
 8005db4:	d903      	bls.n	8005dbe <_malloc_r+0x22>
 8005db6:	230c      	movs	r3, #12
 8005db8:	6033      	str	r3, [r6, #0]
 8005dba:	2000      	movs	r0, #0
 8005dbc:	bd70      	pop	{r4, r5, r6, pc}
 8005dbe:	f000 f87d 	bl	8005ebc <__malloc_lock>
 8005dc2:	4a21      	ldr	r2, [pc, #132]	; (8005e48 <_malloc_r+0xac>)
 8005dc4:	6814      	ldr	r4, [r2, #0]
 8005dc6:	4621      	mov	r1, r4
 8005dc8:	b991      	cbnz	r1, 8005df0 <_malloc_r+0x54>
 8005dca:	4c20      	ldr	r4, [pc, #128]	; (8005e4c <_malloc_r+0xb0>)
 8005dcc:	6823      	ldr	r3, [r4, #0]
 8005dce:	b91b      	cbnz	r3, 8005dd8 <_malloc_r+0x3c>
 8005dd0:	4630      	mov	r0, r6
 8005dd2:	f000 f863 	bl	8005e9c <_sbrk_r>
 8005dd6:	6020      	str	r0, [r4, #0]
 8005dd8:	4629      	mov	r1, r5
 8005dda:	4630      	mov	r0, r6
 8005ddc:	f000 f85e 	bl	8005e9c <_sbrk_r>
 8005de0:	1c43      	adds	r3, r0, #1
 8005de2:	d124      	bne.n	8005e2e <_malloc_r+0x92>
 8005de4:	230c      	movs	r3, #12
 8005de6:	6033      	str	r3, [r6, #0]
 8005de8:	4630      	mov	r0, r6
 8005dea:	f000 f868 	bl	8005ebe <__malloc_unlock>
 8005dee:	e7e4      	b.n	8005dba <_malloc_r+0x1e>
 8005df0:	680b      	ldr	r3, [r1, #0]
 8005df2:	1b5b      	subs	r3, r3, r5
 8005df4:	d418      	bmi.n	8005e28 <_malloc_r+0x8c>
 8005df6:	2b0b      	cmp	r3, #11
 8005df8:	d90f      	bls.n	8005e1a <_malloc_r+0x7e>
 8005dfa:	600b      	str	r3, [r1, #0]
 8005dfc:	50cd      	str	r5, [r1, r3]
 8005dfe:	18cc      	adds	r4, r1, r3
 8005e00:	4630      	mov	r0, r6
 8005e02:	f000 f85c 	bl	8005ebe <__malloc_unlock>
 8005e06:	f104 000b 	add.w	r0, r4, #11
 8005e0a:	1d23      	adds	r3, r4, #4
 8005e0c:	f020 0007 	bic.w	r0, r0, #7
 8005e10:	1ac3      	subs	r3, r0, r3
 8005e12:	d0d3      	beq.n	8005dbc <_malloc_r+0x20>
 8005e14:	425a      	negs	r2, r3
 8005e16:	50e2      	str	r2, [r4, r3]
 8005e18:	e7d0      	b.n	8005dbc <_malloc_r+0x20>
 8005e1a:	428c      	cmp	r4, r1
 8005e1c:	684b      	ldr	r3, [r1, #4]
 8005e1e:	bf16      	itet	ne
 8005e20:	6063      	strne	r3, [r4, #4]
 8005e22:	6013      	streq	r3, [r2, #0]
 8005e24:	460c      	movne	r4, r1
 8005e26:	e7eb      	b.n	8005e00 <_malloc_r+0x64>
 8005e28:	460c      	mov	r4, r1
 8005e2a:	6849      	ldr	r1, [r1, #4]
 8005e2c:	e7cc      	b.n	8005dc8 <_malloc_r+0x2c>
 8005e2e:	1cc4      	adds	r4, r0, #3
 8005e30:	f024 0403 	bic.w	r4, r4, #3
 8005e34:	42a0      	cmp	r0, r4
 8005e36:	d005      	beq.n	8005e44 <_malloc_r+0xa8>
 8005e38:	1a21      	subs	r1, r4, r0
 8005e3a:	4630      	mov	r0, r6
 8005e3c:	f000 f82e 	bl	8005e9c <_sbrk_r>
 8005e40:	3001      	adds	r0, #1
 8005e42:	d0cf      	beq.n	8005de4 <_malloc_r+0x48>
 8005e44:	6025      	str	r5, [r4, #0]
 8005e46:	e7db      	b.n	8005e00 <_malloc_r+0x64>
 8005e48:	20004584 	.word	0x20004584
 8005e4c:	20004588 	.word	0x20004588

08005e50 <_realloc_r>:
 8005e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e52:	4607      	mov	r7, r0
 8005e54:	4614      	mov	r4, r2
 8005e56:	460e      	mov	r6, r1
 8005e58:	b921      	cbnz	r1, 8005e64 <_realloc_r+0x14>
 8005e5a:	4611      	mov	r1, r2
 8005e5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005e60:	f7ff bf9c 	b.w	8005d9c <_malloc_r>
 8005e64:	b922      	cbnz	r2, 8005e70 <_realloc_r+0x20>
 8005e66:	f7ff ff4b 	bl	8005d00 <_free_r>
 8005e6a:	4625      	mov	r5, r4
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e70:	f000 f826 	bl	8005ec0 <_malloc_usable_size_r>
 8005e74:	42a0      	cmp	r0, r4
 8005e76:	d20f      	bcs.n	8005e98 <_realloc_r+0x48>
 8005e78:	4621      	mov	r1, r4
 8005e7a:	4638      	mov	r0, r7
 8005e7c:	f7ff ff8e 	bl	8005d9c <_malloc_r>
 8005e80:	4605      	mov	r5, r0
 8005e82:	2800      	cmp	r0, #0
 8005e84:	d0f2      	beq.n	8005e6c <_realloc_r+0x1c>
 8005e86:	4631      	mov	r1, r6
 8005e88:	4622      	mov	r2, r4
 8005e8a:	f7ff fc11 	bl	80056b0 <memcpy>
 8005e8e:	4631      	mov	r1, r6
 8005e90:	4638      	mov	r0, r7
 8005e92:	f7ff ff35 	bl	8005d00 <_free_r>
 8005e96:	e7e9      	b.n	8005e6c <_realloc_r+0x1c>
 8005e98:	4635      	mov	r5, r6
 8005e9a:	e7e7      	b.n	8005e6c <_realloc_r+0x1c>

08005e9c <_sbrk_r>:
 8005e9c:	b538      	push	{r3, r4, r5, lr}
 8005e9e:	4c06      	ldr	r4, [pc, #24]	; (8005eb8 <_sbrk_r+0x1c>)
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	4605      	mov	r5, r0
 8005ea4:	4608      	mov	r0, r1
 8005ea6:	6023      	str	r3, [r4, #0]
 8005ea8:	f7fa fe90 	bl	8000bcc <_sbrk>
 8005eac:	1c43      	adds	r3, r0, #1
 8005eae:	d102      	bne.n	8005eb6 <_sbrk_r+0x1a>
 8005eb0:	6823      	ldr	r3, [r4, #0]
 8005eb2:	b103      	cbz	r3, 8005eb6 <_sbrk_r+0x1a>
 8005eb4:	602b      	str	r3, [r5, #0]
 8005eb6:	bd38      	pop	{r3, r4, r5, pc}
 8005eb8:	20004628 	.word	0x20004628

08005ebc <__malloc_lock>:
 8005ebc:	4770      	bx	lr

08005ebe <__malloc_unlock>:
 8005ebe:	4770      	bx	lr

08005ec0 <_malloc_usable_size_r>:
 8005ec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ec4:	1f18      	subs	r0, r3, #4
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	bfbc      	itt	lt
 8005eca:	580b      	ldrlt	r3, [r1, r0]
 8005ecc:	18c0      	addlt	r0, r0, r3
 8005ece:	4770      	bx	lr

08005ed0 <_init>:
 8005ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ed2:	bf00      	nop
 8005ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ed6:	bc08      	pop	{r3}
 8005ed8:	469e      	mov	lr, r3
 8005eda:	4770      	bx	lr

08005edc <_fini>:
 8005edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ede:	bf00      	nop
 8005ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ee2:	bc08      	pop	{r3}
 8005ee4:	469e      	mov	lr, r3
 8005ee6:	4770      	bx	lr
