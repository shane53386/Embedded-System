
Lab3-4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08005b48  08005b48  00015b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ca8  08005ca8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005ca8  08005ca8  00015ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cb0  08005cb0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cb0  08005cb0  00015cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005cb4  08005cb4  00015cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005cb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000045c0  20000074  08005d2c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004634  08005d2c  00024634  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000103a7  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000276d  00000000  00000000  0003044b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cb0  00000000  00000000  00032bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b88  00000000  00000000  00033868  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000169fe  00000000  00000000  000343f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ad62  00000000  00000000  0004adee  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d76b  00000000  00000000  00055b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e32bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035c8  00000000  00000000  000e3338  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005b30 	.word	0x08005b30

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005b30 	.word	0x08005b30

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	4a07      	ldr	r2, [pc, #28]	; (80005bc <vApplicationGetIdleTaskMemory+0x2c>)
 80005a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	4a06      	ldr	r2, [pc, #24]	; (80005c0 <vApplicationGetIdleTaskMemory+0x30>)
 80005a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2280      	movs	r2, #128	; 0x80
 80005ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	20000090 	.word	0x20000090
 80005c0:	200000e4 	.word	0x200000e4

080005c4 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80005d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	4a06      	ldr	r2, [pc, #24]	; (80005f4 <vApplicationGetTimerTaskMemory+0x30>)
 80005da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005e2:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005e4:	bf00      	nop
 80005e6:	3714      	adds	r7, #20
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	200002e4 	.word	0x200002e4
 80005f4:	20000338 	.word	0x20000338

080005f8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005f8:	b5b0      	push	{r4, r5, r7, lr}
 80005fa:	b0aa      	sub	sp, #168	; 0xa8
 80005fc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005fe:	f000 fb59 	bl	8000cb4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000602:	f000 f89b 	bl	800073c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000606:	f000 f92d 	bl	8000864 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800060a:	f000 f901 	bl	8000810 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	mail = osMailCreate(osMailQ(mail), NULL);
 800060e:	2100      	movs	r1, #0
 8000610:	483c      	ldr	r0, [pc, #240]	; (8000704 <main+0x10c>)
 8000612:	f002 f8ad 	bl	8002770 <osMailCreate>
 8000616:	4602      	mov	r2, r0
 8000618:	4b3b      	ldr	r3, [pc, #236]	; (8000708 <main+0x110>)
 800061a:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of Task01 */
	osThreadDef(Task01, StartTask01, osPriorityNormal, 0, 128);
 800061c:	4b3b      	ldr	r3, [pc, #236]	; (800070c <main+0x114>)
 800061e:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000622:	461d      	mov	r5, r3
 8000624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000628:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800062c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task01Handle = osThreadCreate(osThread(Task01), NULL);
 8000630:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f001 ff89 	bl	800254e <osThreadCreate>
 800063c:	4602      	mov	r2, r0
 800063e:	4b34      	ldr	r3, [pc, #208]	; (8000710 <main+0x118>)
 8000640:	601a      	str	r2, [r3, #0]

	/* definition and creation of Task02 */
	osThreadDef(Task02, StartTask02, osPriorityNormal, 0, 128);
 8000642:	4b34      	ldr	r3, [pc, #208]	; (8000714 <main+0x11c>)
 8000644:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000648:	461d      	mov	r5, r3
 800064a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800064e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000652:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task02Handle = osThreadCreate(osThread(Task02), NULL);
 8000656:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800065a:	2100      	movs	r1, #0
 800065c:	4618      	mov	r0, r3
 800065e:	f001 ff76 	bl	800254e <osThreadCreate>
 8000662:	4602      	mov	r2, r0
 8000664:	4b2c      	ldr	r3, [pc, #176]	; (8000718 <main+0x120>)
 8000666:	601a      	str	r2, [r3, #0]

	/* definition and creation of Task03 */
	osThreadDef(Task03, StartTask03, osPriorityNormal, 0, 128);
 8000668:	4b2c      	ldr	r3, [pc, #176]	; (800071c <main+0x124>)
 800066a:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800066e:	461d      	mov	r5, r3
 8000670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000674:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000678:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task03Handle = osThreadCreate(osThread(Task03), NULL);
 800067c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f001 ff63 	bl	800254e <osThreadCreate>
 8000688:	4602      	mov	r2, r0
 800068a:	4b25      	ldr	r3, [pc, #148]	; (8000720 <main+0x128>)
 800068c:	601a      	str	r2, [r3, #0]

	/* definition and creation of Task04 */
	osThreadDef(Task04, StartTask04, osPriorityNormal, 0, 128);
 800068e:	4b25      	ldr	r3, [pc, #148]	; (8000724 <main+0x12c>)
 8000690:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000694:	461d      	mov	r5, r3
 8000696:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000698:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800069a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800069e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task04Handle = osThreadCreate(osThread(Task04), NULL);
 80006a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006a6:	2100      	movs	r1, #0
 80006a8:	4618      	mov	r0, r3
 80006aa:	f001 ff50 	bl	800254e <osThreadCreate>
 80006ae:	4602      	mov	r2, r0
 80006b0:	4b1d      	ldr	r3, [pc, #116]	; (8000728 <main+0x130>)
 80006b2:	601a      	str	r2, [r3, #0]

	/* definition and creation of Task05 */
	osThreadDef(Task05, StartTask05, osPriorityNormal, 0, 128);
 80006b4:	4b1d      	ldr	r3, [pc, #116]	; (800072c <main+0x134>)
 80006b6:	f107 041c 	add.w	r4, r7, #28
 80006ba:	461d      	mov	r5, r3
 80006bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task05Handle = osThreadCreate(osThread(Task05), NULL);
 80006c8:	f107 031c 	add.w	r3, r7, #28
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 ff3d 	bl	800254e <osThreadCreate>
 80006d4:	4602      	mov	r2, r0
 80006d6:	4b16      	ldr	r3, [pc, #88]	; (8000730 <main+0x138>)
 80006d8:	601a      	str	r2, [r3, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	osThreadDef(thread, recv_thread, osPriorityAboveNormal, 0, 128);
 80006da:	4b16      	ldr	r3, [pc, #88]	; (8000734 <main+0x13c>)
 80006dc:	463c      	mov	r4, r7
 80006de:	461d      	mov	r5, r3
 80006e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	recvThread = osThreadCreate(osThread(thread), NULL);
 80006ec:	463b      	mov	r3, r7
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f001 ff2c 	bl	800254e <osThreadCreate>
 80006f6:	4602      	mov	r2, r0
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <main+0x140>)
 80006fa:	601a      	str	r2, [r3, #0]
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80006fc:	f001 ff20 	bl	8002540 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000700:	e7fe      	b.n	8000700 <main+0x108>
 8000702:	bf00      	nop
 8000704:	08005c50 	.word	0x08005c50
 8000708:	2000459c 	.word	0x2000459c
 800070c:	08005b50 	.word	0x08005b50
 8000710:	200045a0 	.word	0x200045a0
 8000714:	08005b74 	.word	0x08005b74
 8000718:	2000458c 	.word	0x2000458c
 800071c:	08005b98 	.word	0x08005b98
 8000720:	200045a4 	.word	0x200045a4
 8000724:	08005bbc 	.word	0x08005bbc
 8000728:	20004598 	.word	0x20004598
 800072c:	08005be0 	.word	0x08005be0
 8000730:	200045a8 	.word	0x200045a8
 8000734:	08005c04 	.word	0x08005c04
 8000738:	20004594 	.word	0x20004594

0800073c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b094      	sub	sp, #80	; 0x50
 8000740:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000742:	f107 0320 	add.w	r3, r7, #32
 8000746:	2230      	movs	r2, #48	; 0x30
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f004 fdeb 	bl	8005326 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000760:	2300      	movs	r3, #0
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	4b28      	ldr	r3, [pc, #160]	; (8000808 <SystemClock_Config+0xcc>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000768:	4a27      	ldr	r2, [pc, #156]	; (8000808 <SystemClock_Config+0xcc>)
 800076a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076e:	6413      	str	r3, [r2, #64]	; 0x40
 8000770:	4b25      	ldr	r3, [pc, #148]	; (8000808 <SystemClock_Config+0xcc>)
 8000772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800077c:	2300      	movs	r3, #0
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	4b22      	ldr	r3, [pc, #136]	; (800080c <SystemClock_Config+0xd0>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a21      	ldr	r2, [pc, #132]	; (800080c <SystemClock_Config+0xd0>)
 8000786:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	4b1f      	ldr	r3, [pc, #124]	; (800080c <SystemClock_Config+0xd0>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000798:	2302      	movs	r3, #2
 800079a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800079c:	2301      	movs	r3, #1
 800079e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a0:	2310      	movs	r3, #16
 80007a2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a4:	2302      	movs	r3, #2
 80007a6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a8:	2300      	movs	r3, #0
 80007aa:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 80007ac:	2310      	movs	r3, #16
 80007ae:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80007b0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007b4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007b6:	2304      	movs	r3, #4
 80007b8:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80007ba:	2304      	movs	r3, #4
 80007bc:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007be:	f107 0320 	add.w	r3, r7, #32
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 fd84 	bl	80012d0 <HAL_RCC_OscConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0x96>
		Error_Handler();
 80007ce:	f000 f95f 	bl	8000a90 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007d2:	230f      	movs	r3, #15
 80007d4:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d6:	2302      	movs	r3, #2
 80007d8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	2102      	movs	r1, #2
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 ffde 	bl	80017b0 <HAL_RCC_ClockConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0xc2>
		Error_Handler();
 80007fa:	f000 f949 	bl	8000a90 <Error_Handler>
	}
}
 80007fe:	bf00      	nop
 8000800:	3750      	adds	r7, #80	; 0x50
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800
 800080c:	40007000 	.word	0x40007000

08000810 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_USART2_UART_Init+0x4c>)
 8000816:	4a12      	ldr	r2, [pc, #72]	; (8000860 <MX_USART2_UART_Init+0x50>)
 8000818:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <MX_USART2_UART_Init+0x4c>)
 800081c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000820:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_USART2_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_USART2_UART_Init+0x4c>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <MX_USART2_UART_Init+0x4c>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_USART2_UART_Init+0x4c>)
 8000836:	220c      	movs	r2, #12
 8000838:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <MX_USART2_UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_USART2_UART_Init+0x4c>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_USART2_UART_Init+0x4c>)
 8000848:	f001 f9a4 	bl	8001b94 <HAL_UART_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000852:	f000 f91d 	bl	8000a90 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200045ac 	.word	0x200045ac
 8000860:	40004400 	.word	0x40004400

08000864 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	; 0x28
 8000868:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	4b2d      	ldr	r3, [pc, #180]	; (8000934 <MX_GPIO_Init+0xd0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a2c      	ldr	r2, [pc, #176]	; (8000934 <MX_GPIO_Init+0xd0>)
 8000884:	f043 0304 	orr.w	r3, r3, #4
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b2a      	ldr	r3, [pc, #168]	; (8000934 <MX_GPIO_Init+0xd0>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0304 	and.w	r3, r3, #4
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	4b26      	ldr	r3, [pc, #152]	; (8000934 <MX_GPIO_Init+0xd0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a25      	ldr	r2, [pc, #148]	; (8000934 <MX_GPIO_Init+0xd0>)
 80008a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b23      	ldr	r3, [pc, #140]	; (8000934 <MX_GPIO_Init+0xd0>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	4b1f      	ldr	r3, [pc, #124]	; (8000934 <MX_GPIO_Init+0xd0>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a1e      	ldr	r2, [pc, #120]	; (8000934 <MX_GPIO_Init+0xd0>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <MX_GPIO_Init+0xd0>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	4b18      	ldr	r3, [pc, #96]	; (8000934 <MX_GPIO_Init+0xd0>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a17      	ldr	r2, [pc, #92]	; (8000934 <MX_GPIO_Init+0xd0>)
 80008d8:	f043 0302 	orr.w	r3, r3, #2
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <MX_GPIO_Init+0xd0>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0302 	and.w	r3, r3, #2
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2120      	movs	r1, #32
 80008ee:	4812      	ldr	r0, [pc, #72]	; (8000938 <MX_GPIO_Init+0xd4>)
 80008f0:	f000 fcba 	bl	8001268 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80008f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <MX_GPIO_Init+0xd8>)
 80008fc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4619      	mov	r1, r3
 8000908:	480d      	ldr	r0, [pc, #52]	; (8000940 <MX_GPIO_Init+0xdc>)
 800090a:	f000 fb2b 	bl	8000f64 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 800090e:	2320      	movs	r3, #32
 8000910:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	4619      	mov	r1, r3
 8000924:	4804      	ldr	r0, [pc, #16]	; (8000938 <MX_GPIO_Init+0xd4>)
 8000926:	f000 fb1d 	bl	8000f64 <HAL_GPIO_Init>

}
 800092a:	bf00      	nop
 800092c:	3728      	adds	r7, #40	; 0x28
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800
 8000938:	40020000 	.word	0x40020000
 800093c:	10210000 	.word	0x10210000
 8000940:	40020800 	.word	0x40020800

08000944 <StartTask01>:
 * @brief  Function implementing the Task01 thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask01 */
void StartTask01(void const *argument) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	while (1) {
		osMailPut(mail, (uint32_t) "A");
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <StartTask01+0x20>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4905      	ldr	r1, [pc, #20]	; (8000968 <StartTask01+0x24>)
 8000952:	4618      	mov	r0, r3
 8000954:	f001 ff64 	bl	8002820 <osMailPut>
		osDelay(50);
 8000958:	2032      	movs	r0, #50	; 0x32
 800095a:	f001 fe57 	bl	800260c <osDelay>
		osThreadYield();
 800095e:	f001 fe43 	bl	80025e8 <osThreadYield>
		osMailPut(mail, (uint32_t) "A");
 8000962:	e7f3      	b.n	800094c <StartTask01+0x8>
 8000964:	2000459c 	.word	0x2000459c
 8000968:	08005c20 	.word	0x08005c20

0800096c <StartTask02>:
 * @brief Function implementing the Task02 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void const *argument) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask02 */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000974:	2120      	movs	r1, #32
 8000976:	4803      	ldr	r0, [pc, #12]	; (8000984 <StartTask02+0x18>)
 8000978:	f000 fc8f 	bl	800129a <HAL_GPIO_TogglePin>
		osDelay(18);
 800097c:	2012      	movs	r0, #18
 800097e:	f001 fe45 	bl	800260c <osDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000982:	e7f7      	b.n	8000974 <StartTask02+0x8>
 8000984:	40020000 	.word	0x40020000

08000988 <StartTask03>:
 * @brief Function implementing the Task03 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void const *argument) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask03 */
	/* Infinite loop */
	while (1) {
		osMailPut(mail, (uint32_t) "B");
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <StartTask03+0x20>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4905      	ldr	r1, [pc, #20]	; (80009ac <StartTask03+0x24>)
 8000996:	4618      	mov	r0, r3
 8000998:	f001 ff42 	bl	8002820 <osMailPut>
		osDelay(128);
 800099c:	2080      	movs	r0, #128	; 0x80
 800099e:	f001 fe35 	bl	800260c <osDelay>
		osThreadYield();
 80009a2:	f001 fe21 	bl	80025e8 <osThreadYield>
		osMailPut(mail, (uint32_t) "B");
 80009a6:	e7f3      	b.n	8000990 <StartTask03+0x8>
 80009a8:	2000459c 	.word	0x2000459c
 80009ac:	08005c24 	.word	0x08005c24

080009b0 <StartTask04>:
 * @brief Function implementing the Task04 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask04 */
void StartTask04(void const *argument) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08c      	sub	sp, #48	; 0x30
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask04 */
	/* Infinite loop */
	int threadID = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
	int idx = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	62fb      	str	r3, [r7, #44]	; 0x2c
	char buffer[32];
	while (1) {
		sprintf(buffer, "TID: %d %d\r\n", threadID, idx);
 80009c0:	f107 0008 	add.w	r0, r7, #8
 80009c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009c8:	4909      	ldr	r1, [pc, #36]	; (80009f0 <StartTask04+0x40>)
 80009ca:	f004 fcb5 	bl	8005338 <siprintf>
		idx++;
 80009ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009d0:	3301      	adds	r3, #1
 80009d2:	62fb      	str	r3, [r7, #44]	; 0x2c
		osMailPut(mail, (uint32_t) buffer);
 80009d4:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <StartTask04+0x44>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f107 0208 	add.w	r2, r7, #8
 80009dc:	4611      	mov	r1, r2
 80009de:	4618      	mov	r0, r3
 80009e0:	f001 ff1e 	bl	8002820 <osMailPut>
		osDelay(10);
 80009e4:	200a      	movs	r0, #10
 80009e6:	f001 fe11 	bl	800260c <osDelay>
		osThreadYield();
 80009ea:	f001 fdfd 	bl	80025e8 <osThreadYield>
	while (1) {
 80009ee:	e7e7      	b.n	80009c0 <StartTask04+0x10>
 80009f0:	08005c28 	.word	0x08005c28
 80009f4:	2000459c 	.word	0x2000459c

080009f8 <StartTask05>:
 * @brief Function implementing the Task05 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask05 */
void StartTask05(void const *argument) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08c      	sub	sp, #48	; 0x30
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask05 */
	/* Infinite loop */
	int threadID = 1;
 8000a00:	2301      	movs	r3, #1
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
	int idx = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c
	char buffer[32];
	while (1) {
		sprintf(buffer, "TID: %d %d\r\n", threadID, idx);
 8000a08:	f107 0008 	add.w	r0, r7, #8
 8000a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a10:	4909      	ldr	r1, [pc, #36]	; (8000a38 <StartTask05+0x40>)
 8000a12:	f004 fc91 	bl	8005338 <siprintf>
		idx++;
 8000a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a18:	3301      	adds	r3, #1
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
		osMailPut(mail, (uint32_t) buffer);
 8000a1c:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <StartTask05+0x44>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f107 0208 	add.w	r2, r7, #8
 8000a24:	4611      	mov	r1, r2
 8000a26:	4618      	mov	r0, r3
 8000a28:	f001 fefa 	bl	8002820 <osMailPut>
		osDelay(10);
 8000a2c:	200a      	movs	r0, #10
 8000a2e:	f001 fded 	bl	800260c <osDelay>
		osThreadYield();
 8000a32:	f001 fdd9 	bl	80025e8 <osThreadYield>
	while (1) {
 8000a36:	e7e7      	b.n	8000a08 <StartTask05+0x10>
 8000a38:	08005c28 	.word	0x08005c28
 8000a3c:	2000459c 	.word	0x2000459c

08000a40 <recv_thread>:
	}
}

void recv_thread(void const *argument) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	int *rptr;
	osEvent evt;
	for (;;) {
		evt = osMailGet(mail, osWaitForever);        // wait for mail
 8000a48:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <recv_thread+0x48>)
 8000a4a:	6819      	ldr	r1, [r3, #0]
 8000a4c:	f107 0308 	add.w	r3, r7, #8
 8000a50:	f04f 32ff 	mov.w	r2, #4294967295
 8000a54:	4618      	mov	r0, r3
 8000a56:	f001 ff21 	bl	800289c <osMailGet>
		if (evt.status == osEventMail) {
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	2b20      	cmp	r3, #32
 8000a5e:	d1f3      	bne.n	8000a48 <recv_thread+0x8>
			rptr = evt.value.p;
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	617b      	str	r3, [r7, #20]
			HAL_UART_Transmit(&huart2, rptr, strlen(rptr),
 8000a64:	6978      	ldr	r0, [r7, #20]
 8000a66:	f7ff fbbb 	bl	80001e0 <strlen>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	b29a      	uxth	r2, r3
 8000a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a72:	6979      	ldr	r1, [r7, #20]
 8000a74:	4805      	ldr	r0, [pc, #20]	; (8000a8c <recv_thread+0x4c>)
 8000a76:	f001 f8da 	bl	8001c2e <HAL_UART_Transmit>
			HAL_MAX_DELAY);
			osMailFree(mail, rptr);            // free memory allocated for mail
 8000a7a:	4b03      	ldr	r3, [pc, #12]	; (8000a88 <recv_thread+0x48>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	6979      	ldr	r1, [r7, #20]
 8000a80:	4618      	mov	r0, r3
 8000a82:	f001 ff7f 	bl	8002984 <osMailFree>
		evt = osMailGet(mail, osWaitForever);        // wait for mail
 8000a86:	e7df      	b.n	8000a48 <recv_thread+0x8>
 8000a88:	2000459c 	.word	0x2000459c
 8000a8c:	200045ac 	.word	0x200045ac

08000a90 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a94:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a96:	e7fe      	b.n	8000a96 <Error_Handler+0x6>

08000a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	4b12      	ldr	r3, [pc, #72]	; (8000aec <HAL_MspInit+0x54>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa6:	4a11      	ldr	r2, [pc, #68]	; (8000aec <HAL_MspInit+0x54>)
 8000aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aac:	6453      	str	r3, [r2, #68]	; 0x44
 8000aae:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <HAL_MspInit+0x54>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <HAL_MspInit+0x54>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	4a0a      	ldr	r2, [pc, #40]	; (8000aec <HAL_MspInit+0x54>)
 8000ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <HAL_MspInit+0x54>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	210f      	movs	r1, #15
 8000ada:	f06f 0001 	mvn.w	r0, #1
 8000ade:	f000 fa18 	bl	8000f12 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40023800 	.word	0x40023800

08000af0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	; 0x28
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a19      	ldr	r2, [pc, #100]	; (8000b74 <HAL_UART_MspInit+0x84>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d12b      	bne.n	8000b6a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
 8000b16:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <HAL_UART_MspInit+0x88>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	4a17      	ldr	r2, [pc, #92]	; (8000b78 <HAL_UART_MspInit+0x88>)
 8000b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b20:	6413      	str	r3, [r2, #64]	; 0x40
 8000b22:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_UART_MspInit+0x88>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <HAL_UART_MspInit+0x88>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a10      	ldr	r2, [pc, #64]	; (8000b78 <HAL_UART_MspInit+0x88>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <HAL_UART_MspInit+0x88>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b4a:	230c      	movs	r3, #12
 8000b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b56:	2303      	movs	r3, #3
 8000b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b5a:	2307      	movs	r3, #7
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	4619      	mov	r1, r3
 8000b64:	4805      	ldr	r0, [pc, #20]	; (8000b7c <HAL_UART_MspInit+0x8c>)
 8000b66:	f000 f9fd 	bl	8000f64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b6a:	bf00      	nop
 8000b6c:	3728      	adds	r7, #40	; 0x28
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40004400 	.word	0x40004400
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40020000 	.word	0x40020000

08000b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <NMI_Handler+0x4>

08000b86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <HardFault_Handler+0x4>

08000b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <MemManage_Handler+0x4>

08000b92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <BusFault_Handler+0x4>

08000b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <UsageFault_Handler+0x4>

08000b9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb0:	f000 f8d2 	bl	8000d58 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000bb4:	f003 fb36 	bl	8004224 <xTaskGetSchedulerState>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d001      	beq.n	8000bc2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000bbe:	f004 f91b 	bl	8004df8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd0:	4a14      	ldr	r2, [pc, #80]	; (8000c24 <_sbrk+0x5c>)
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <_sbrk+0x60>)
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bdc:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <_sbrk+0x64>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d102      	bne.n	8000bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <_sbrk+0x64>)
 8000be6:	4a12      	ldr	r2, [pc, #72]	; (8000c30 <_sbrk+0x68>)
 8000be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <_sbrk+0x64>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d207      	bcs.n	8000c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf8:	f004 fb60 	bl	80052bc <__errno>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	230c      	movs	r3, #12
 8000c00:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000c02:	f04f 33ff 	mov.w	r3, #4294967295
 8000c06:	e009      	b.n	8000c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <_sbrk+0x64>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c0e:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <_sbrk+0x64>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4413      	add	r3, r2
 8000c16:	4a05      	ldr	r2, [pc, #20]	; (8000c2c <_sbrk+0x64>)
 8000c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3718      	adds	r7, #24
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20020000 	.word	0x20020000
 8000c28:	00000400 	.word	0x00000400
 8000c2c:	20000738 	.word	0x20000738
 8000c30:	20004638 	.word	0x20004638

08000c34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <SystemInit+0x28>)
 8000c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3e:	4a07      	ldr	r2, [pc, #28]	; (8000c5c <SystemInit+0x28>)
 8000c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c48:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <SystemInit+0x28>)
 8000c4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c4e:	609a      	str	r2, [r3, #8]
#endif
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c98 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c64:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c66:	e003      	b.n	8000c70 <LoopCopyDataInit>

08000c68 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c6a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c6c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c6e:	3104      	adds	r1, #4

08000c70 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c70:	480b      	ldr	r0, [pc, #44]	; (8000ca0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c72:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c74:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c76:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c78:	d3f6      	bcc.n	8000c68 <CopyDataInit>
  ldr  r2, =_sbss
 8000c7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ca8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c7c:	e002      	b.n	8000c84 <LoopFillZerobss>

08000c7e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c7e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c80:	f842 3b04 	str.w	r3, [r2], #4

08000c84 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c84:	4b09      	ldr	r3, [pc, #36]	; (8000cac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c86:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c88:	d3f9      	bcc.n	8000c7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c8a:	f7ff ffd3 	bl	8000c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c8e:	f004 fb1b 	bl	80052c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c92:	f7ff fcb1 	bl	80005f8 <main>
  bx  lr    
 8000c96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c98:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c9c:	08005cb8 	.word	0x08005cb8
  ldr  r0, =_sdata
 8000ca0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ca4:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000ca8:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000cac:	20004634 	.word	0x20004634

08000cb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb0:	e7fe      	b.n	8000cb0 <ADC_IRQHandler>
	...

08000cb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cb8:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <HAL_Init+0x40>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a0d      	ldr	r2, [pc, #52]	; (8000cf4 <HAL_Init+0x40>)
 8000cbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cc4:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <HAL_Init+0x40>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <HAL_Init+0x40>)
 8000cca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd0:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <HAL_Init+0x40>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a07      	ldr	r2, [pc, #28]	; (8000cf4 <HAL_Init+0x40>)
 8000cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cdc:	2003      	movs	r0, #3
 8000cde:	f000 f90d 	bl	8000efc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce2:	200f      	movs	r0, #15
 8000ce4:	f000 f808 	bl	8000cf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce8:	f7ff fed6 	bl	8000a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40023c00 	.word	0x40023c00

08000cf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <HAL_InitTick+0x54>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <HAL_InitTick+0x58>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 f917 	bl	8000f4a <HAL_SYSTICK_Config>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e00e      	b.n	8000d44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2b0f      	cmp	r3, #15
 8000d2a:	d80a      	bhi.n	8000d42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	6879      	ldr	r1, [r7, #4]
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295
 8000d34:	f000 f8ed 	bl	8000f12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d38:	4a06      	ldr	r2, [pc, #24]	; (8000d54 <HAL_InitTick+0x5c>)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e000      	b.n	8000d44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	20000008 	.word	0x20000008
 8000d54:	20000004 	.word	0x20000004

08000d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_IncTick+0x20>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_IncTick+0x24>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4413      	add	r3, r2
 8000d68:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <HAL_IncTick+0x24>)
 8000d6a:	6013      	str	r3, [r2, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	200045ec 	.word	0x200045ec

08000d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return uwTick;
 8000d84:	4b03      	ldr	r3, [pc, #12]	; (8000d94 <HAL_GetTick+0x14>)
 8000d86:	681b      	ldr	r3, [r3, #0]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	200045ec 	.word	0x200045ec

08000d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <__NVIC_SetPriorityGrouping+0x44>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dae:	68ba      	ldr	r2, [r7, #8]
 8000db0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000db4:	4013      	ands	r3, r2
 8000db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dca:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <__NVIC_SetPriorityGrouping+0x44>)
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	60d3      	str	r3, [r2, #12]
}
 8000dd0:	bf00      	nop
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de4:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <__NVIC_GetPriorityGrouping+0x18>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	f003 0307 	and.w	r3, r3, #7
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	6039      	str	r1, [r7, #0]
 8000e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	db0a      	blt.n	8000e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	490c      	ldr	r1, [pc, #48]	; (8000e48 <__NVIC_SetPriority+0x4c>)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	0112      	lsls	r2, r2, #4
 8000e1c:	b2d2      	uxtb	r2, r2
 8000e1e:	440b      	add	r3, r1
 8000e20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e24:	e00a      	b.n	8000e3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4908      	ldr	r1, [pc, #32]	; (8000e4c <__NVIC_SetPriority+0x50>)
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	f003 030f 	and.w	r3, r3, #15
 8000e32:	3b04      	subs	r3, #4
 8000e34:	0112      	lsls	r2, r2, #4
 8000e36:	b2d2      	uxtb	r2, r2
 8000e38:	440b      	add	r3, r1
 8000e3a:	761a      	strb	r2, [r3, #24]
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000e100 	.word	0xe000e100
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b089      	sub	sp, #36	; 0x24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	f1c3 0307 	rsb	r3, r3, #7
 8000e6a:	2b04      	cmp	r3, #4
 8000e6c:	bf28      	it	cs
 8000e6e:	2304      	movcs	r3, #4
 8000e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3304      	adds	r3, #4
 8000e76:	2b06      	cmp	r3, #6
 8000e78:	d902      	bls.n	8000e80 <NVIC_EncodePriority+0x30>
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3b03      	subs	r3, #3
 8000e7e:	e000      	b.n	8000e82 <NVIC_EncodePriority+0x32>
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	f04f 32ff 	mov.w	r2, #4294967295
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43da      	mvns	r2, r3
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	401a      	ands	r2, r3
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e98:	f04f 31ff 	mov.w	r1, #4294967295
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea2:	43d9      	mvns	r1, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	4313      	orrs	r3, r2
         );
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3724      	adds	r7, #36	; 0x24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
	...

08000eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec8:	d301      	bcc.n	8000ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00f      	b.n	8000eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ece:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <SysTick_Config+0x40>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed6:	210f      	movs	r1, #15
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f7ff ff8e 	bl	8000dfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <SysTick_Config+0x40>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee6:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <SysTick_Config+0x40>)
 8000ee8:	2207      	movs	r2, #7
 8000eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	e000e010 	.word	0xe000e010

08000efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff ff47 	bl	8000d98 <__NVIC_SetPriorityGrouping>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b086      	sub	sp, #24
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f24:	f7ff ff5c 	bl	8000de0 <__NVIC_GetPriorityGrouping>
 8000f28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	68b9      	ldr	r1, [r7, #8]
 8000f2e:	6978      	ldr	r0, [r7, #20]
 8000f30:	f7ff ff8e 	bl	8000e50 <NVIC_EncodePriority>
 8000f34:	4602      	mov	r2, r0
 8000f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff5d 	bl	8000dfc <__NVIC_SetPriority>
}
 8000f42:	bf00      	nop
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff ffb0 	bl	8000eb8 <SysTick_Config>
 8000f58:	4603      	mov	r3, r0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b089      	sub	sp, #36	; 0x24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
 8000f7e:	e159      	b.n	8001234 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f80:	2201      	movs	r2, #1
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	f040 8148 	bne.w	800122e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d00b      	beq.n	8000fbe <HAL_GPIO_Init+0x5a>
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d007      	beq.n	8000fbe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fb2:	2b11      	cmp	r3, #17
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	2b12      	cmp	r3, #18
 8000fbc:	d130      	bne.n	8001020 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	2203      	movs	r2, #3
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	68da      	ldr	r2, [r3, #12]
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	091b      	lsrs	r3, r3, #4
 800100a:	f003 0201 	and.w	r2, r3, #1
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	2203      	movs	r2, #3
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	2b02      	cmp	r3, #2
 8001056:	d003      	beq.n	8001060 <HAL_GPIO_Init+0xfc>
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b12      	cmp	r3, #18
 800105e:	d123      	bne.n	80010a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	08da      	lsrs	r2, r3, #3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3208      	adds	r2, #8
 8001068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800106c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	f003 0307 	and.w	r3, r3, #7
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	220f      	movs	r2, #15
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	691a      	ldr	r2, [r3, #16]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	08da      	lsrs	r2, r3, #3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	3208      	adds	r2, #8
 80010a2:	69b9      	ldr	r1, [r7, #24]
 80010a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	2203      	movs	r2, #3
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 0203 	and.w	r2, r3, #3
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f000 80a2 	beq.w	800122e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	4b56      	ldr	r3, [pc, #344]	; (8001248 <HAL_GPIO_Init+0x2e4>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	4a55      	ldr	r2, [pc, #340]	; (8001248 <HAL_GPIO_Init+0x2e4>)
 80010f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f8:	6453      	str	r3, [r2, #68]	; 0x44
 80010fa:	4b53      	ldr	r3, [pc, #332]	; (8001248 <HAL_GPIO_Init+0x2e4>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001106:	4a51      	ldr	r2, [pc, #324]	; (800124c <HAL_GPIO_Init+0x2e8>)
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	089b      	lsrs	r3, r3, #2
 800110c:	3302      	adds	r3, #2
 800110e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f003 0303 	and.w	r3, r3, #3
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	220f      	movs	r2, #15
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4013      	ands	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a48      	ldr	r2, [pc, #288]	; (8001250 <HAL_GPIO_Init+0x2ec>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d019      	beq.n	8001166 <HAL_GPIO_Init+0x202>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a47      	ldr	r2, [pc, #284]	; (8001254 <HAL_GPIO_Init+0x2f0>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d013      	beq.n	8001162 <HAL_GPIO_Init+0x1fe>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a46      	ldr	r2, [pc, #280]	; (8001258 <HAL_GPIO_Init+0x2f4>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d00d      	beq.n	800115e <HAL_GPIO_Init+0x1fa>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a45      	ldr	r2, [pc, #276]	; (800125c <HAL_GPIO_Init+0x2f8>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d007      	beq.n	800115a <HAL_GPIO_Init+0x1f6>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a44      	ldr	r2, [pc, #272]	; (8001260 <HAL_GPIO_Init+0x2fc>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d101      	bne.n	8001156 <HAL_GPIO_Init+0x1f2>
 8001152:	2304      	movs	r3, #4
 8001154:	e008      	b.n	8001168 <HAL_GPIO_Init+0x204>
 8001156:	2307      	movs	r3, #7
 8001158:	e006      	b.n	8001168 <HAL_GPIO_Init+0x204>
 800115a:	2303      	movs	r3, #3
 800115c:	e004      	b.n	8001168 <HAL_GPIO_Init+0x204>
 800115e:	2302      	movs	r3, #2
 8001160:	e002      	b.n	8001168 <HAL_GPIO_Init+0x204>
 8001162:	2301      	movs	r3, #1
 8001164:	e000      	b.n	8001168 <HAL_GPIO_Init+0x204>
 8001166:	2300      	movs	r3, #0
 8001168:	69fa      	ldr	r2, [r7, #28]
 800116a:	f002 0203 	and.w	r2, r2, #3
 800116e:	0092      	lsls	r2, r2, #2
 8001170:	4093      	lsls	r3, r2
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4313      	orrs	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001178:	4934      	ldr	r1, [pc, #208]	; (800124c <HAL_GPIO_Init+0x2e8>)
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	089b      	lsrs	r3, r3, #2
 800117e:	3302      	adds	r3, #2
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001186:	4b37      	ldr	r3, [pc, #220]	; (8001264 <HAL_GPIO_Init+0x300>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011aa:	4a2e      	ldr	r2, [pc, #184]	; (8001264 <HAL_GPIO_Init+0x300>)
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011b0:	4b2c      	ldr	r3, [pc, #176]	; (8001264 <HAL_GPIO_Init+0x300>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011d4:	4a23      	ldr	r2, [pc, #140]	; (8001264 <HAL_GPIO_Init+0x300>)
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011da:	4b22      	ldr	r3, [pc, #136]	; (8001264 <HAL_GPIO_Init+0x300>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	43db      	mvns	r3, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4013      	ands	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011fe:	4a19      	ldr	r2, [pc, #100]	; (8001264 <HAL_GPIO_Init+0x300>)
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001204:	4b17      	ldr	r3, [pc, #92]	; (8001264 <HAL_GPIO_Init+0x300>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	4313      	orrs	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001228:	4a0e      	ldr	r2, [pc, #56]	; (8001264 <HAL_GPIO_Init+0x300>)
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3301      	adds	r3, #1
 8001232:	61fb      	str	r3, [r7, #28]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	2b0f      	cmp	r3, #15
 8001238:	f67f aea2 	bls.w	8000f80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800123c:	bf00      	nop
 800123e:	3724      	adds	r7, #36	; 0x24
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	40023800 	.word	0x40023800
 800124c:	40013800 	.word	0x40013800
 8001250:	40020000 	.word	0x40020000
 8001254:	40020400 	.word	0x40020400
 8001258:	40020800 	.word	0x40020800
 800125c:	40020c00 	.word	0x40020c00
 8001260:	40021000 	.word	0x40021000
 8001264:	40013c00 	.word	0x40013c00

08001268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	807b      	strh	r3, [r7, #2]
 8001274:	4613      	mov	r3, r2
 8001276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001278:	787b      	ldrb	r3, [r7, #1]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800127e:	887a      	ldrh	r2, [r7, #2]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001284:	e003      	b.n	800128e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001286:	887b      	ldrh	r3, [r7, #2]
 8001288:	041a      	lsls	r2, r3, #16
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	619a      	str	r2, [r3, #24]
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
 80012a2:	460b      	mov	r3, r1
 80012a4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	695a      	ldr	r2, [r3, #20]
 80012aa:	887b      	ldrh	r3, [r7, #2]
 80012ac:	401a      	ands	r2, r3
 80012ae:	887b      	ldrh	r3, [r7, #2]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d104      	bne.n	80012be <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80012b4:	887b      	ldrh	r3, [r7, #2]
 80012b6:	041a      	lsls	r2, r3, #16
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80012bc:	e002      	b.n	80012c4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80012be:	887a      	ldrh	r2, [r7, #2]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	619a      	str	r2, [r3, #24]
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e25b      	b.n	800179a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d075      	beq.n	80013da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ee:	4ba3      	ldr	r3, [pc, #652]	; (800157c <HAL_RCC_OscConfig+0x2ac>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 030c 	and.w	r3, r3, #12
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	d00c      	beq.n	8001314 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012fa:	4ba0      	ldr	r3, [pc, #640]	; (800157c <HAL_RCC_OscConfig+0x2ac>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001302:	2b08      	cmp	r3, #8
 8001304:	d112      	bne.n	800132c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001306:	4b9d      	ldr	r3, [pc, #628]	; (800157c <HAL_RCC_OscConfig+0x2ac>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800130e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001312:	d10b      	bne.n	800132c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001314:	4b99      	ldr	r3, [pc, #612]	; (800157c <HAL_RCC_OscConfig+0x2ac>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d05b      	beq.n	80013d8 <HAL_RCC_OscConfig+0x108>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d157      	bne.n	80013d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e236      	b.n	800179a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001334:	d106      	bne.n	8001344 <HAL_RCC_OscConfig+0x74>
 8001336:	4b91      	ldr	r3, [pc, #580]	; (800157c <HAL_RCC_OscConfig+0x2ac>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a90      	ldr	r2, [pc, #576]	; (800157c <HAL_RCC_OscConfig+0x2ac>)
 800133c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	e01d      	b.n	8001380 <HAL_RCC_OscConfig+0xb0>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800134c:	d10c      	bne.n	8001368 <HAL_RCC_OscConfig+0x98>
 800134e:	4b8b      	ldr	r3, [pc, #556]	; (800157c <HAL_RCC_OscConfig+0x2ac>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a8a      	ldr	r2, [pc, #552]	; (800157c <HAL_RCC_OscConfig+0x2ac>)
 8001354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	4b88      	ldr	r3, [pc, #544]	; (800157c <HAL_RCC_OscConfig+0x2ac>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a87      	ldr	r2, [pc, #540]	; (800157c <HAL_RCC_OscConfig+0x2ac>)
 8001360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	e00b      	b.n	8001380 <HAL_RCC_OscConfig+0xb0>
 8001368:	4b84      	ldr	r3, [pc, #528]	; (800157c <HAL_RCC_OscConfig+0x2ac>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a83      	ldr	r2, [pc, #524]	; (800157c <HAL_RCC_OscConfig+0x2ac>)
 800136e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001372:	6013      	str	r3, [r2, #0]
 8001374:	4b81      	ldr	r3, [pc, #516]	; (800157c <HAL_RCC_OscConfig+0x2ac>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a80      	ldr	r2, [pc, #512]	; (800157c <HAL_RCC_OscConfig+0x2ac>)
 800137a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800137e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d013      	beq.n	80013b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001388:	f7ff fcfa 	bl	8000d80 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001390:	f7ff fcf6 	bl	8000d80 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b64      	cmp	r3, #100	; 0x64
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e1fb      	b.n	800179a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013a2:	4b76      	ldr	r3, [pc, #472]	; (800157c <HAL_RCC_OscConfig+0x2ac>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0f0      	beq.n	8001390 <HAL_RCC_OscConfig+0xc0>
 80013ae:	e014      	b.n	80013da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b0:	f7ff fce6 	bl	8000d80 <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b8:	f7ff fce2 	bl	8000d80 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b64      	cmp	r3, #100	; 0x64
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e1e7      	b.n	800179a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ca:	4b6c      	ldr	r3, [pc, #432]	; (800157c <HAL_RCC_OscConfig+0x2ac>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1f0      	bne.n	80013b8 <HAL_RCC_OscConfig+0xe8>
 80013d6:	e000      	b.n	80013da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d063      	beq.n	80014ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013e6:	4b65      	ldr	r3, [pc, #404]	; (800157c <HAL_RCC_OscConfig+0x2ac>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f003 030c 	and.w	r3, r3, #12
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d00b      	beq.n	800140a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013f2:	4b62      	ldr	r3, [pc, #392]	; (800157c <HAL_RCC_OscConfig+0x2ac>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013fa:	2b08      	cmp	r3, #8
 80013fc:	d11c      	bne.n	8001438 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013fe:	4b5f      	ldr	r3, [pc, #380]	; (800157c <HAL_RCC_OscConfig+0x2ac>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d116      	bne.n	8001438 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140a:	4b5c      	ldr	r3, [pc, #368]	; (800157c <HAL_RCC_OscConfig+0x2ac>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d005      	beq.n	8001422 <HAL_RCC_OscConfig+0x152>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d001      	beq.n	8001422 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e1bb      	b.n	800179a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001422:	4b56      	ldr	r3, [pc, #344]	; (800157c <HAL_RCC_OscConfig+0x2ac>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	4952      	ldr	r1, [pc, #328]	; (800157c <HAL_RCC_OscConfig+0x2ac>)
 8001432:	4313      	orrs	r3, r2
 8001434:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001436:	e03a      	b.n	80014ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d020      	beq.n	8001482 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001440:	4b4f      	ldr	r3, [pc, #316]	; (8001580 <HAL_RCC_OscConfig+0x2b0>)
 8001442:	2201      	movs	r2, #1
 8001444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001446:	f7ff fc9b 	bl	8000d80 <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800144e:	f7ff fc97 	bl	8000d80 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e19c      	b.n	800179a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001460:	4b46      	ldr	r3, [pc, #280]	; (800157c <HAL_RCC_OscConfig+0x2ac>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0f0      	beq.n	800144e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800146c:	4b43      	ldr	r3, [pc, #268]	; (800157c <HAL_RCC_OscConfig+0x2ac>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	691b      	ldr	r3, [r3, #16]
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	4940      	ldr	r1, [pc, #256]	; (800157c <HAL_RCC_OscConfig+0x2ac>)
 800147c:	4313      	orrs	r3, r2
 800147e:	600b      	str	r3, [r1, #0]
 8001480:	e015      	b.n	80014ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001482:	4b3f      	ldr	r3, [pc, #252]	; (8001580 <HAL_RCC_OscConfig+0x2b0>)
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001488:	f7ff fc7a 	bl	8000d80 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001490:	f7ff fc76 	bl	8000d80 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e17b      	b.n	800179a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a2:	4b36      	ldr	r3, [pc, #216]	; (800157c <HAL_RCC_OscConfig+0x2ac>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1f0      	bne.n	8001490 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d030      	beq.n	800151c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d016      	beq.n	80014f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014c2:	4b30      	ldr	r3, [pc, #192]	; (8001584 <HAL_RCC_OscConfig+0x2b4>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c8:	f7ff fc5a 	bl	8000d80 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014d0:	f7ff fc56 	bl	8000d80 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e15b      	b.n	800179a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014e2:	4b26      	ldr	r3, [pc, #152]	; (800157c <HAL_RCC_OscConfig+0x2ac>)
 80014e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f0      	beq.n	80014d0 <HAL_RCC_OscConfig+0x200>
 80014ee:	e015      	b.n	800151c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014f0:	4b24      	ldr	r3, [pc, #144]	; (8001584 <HAL_RCC_OscConfig+0x2b4>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f6:	f7ff fc43 	bl	8000d80 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014fe:	f7ff fc3f 	bl	8000d80 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e144      	b.n	800179a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001510:	4b1a      	ldr	r3, [pc, #104]	; (800157c <HAL_RCC_OscConfig+0x2ac>)
 8001512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1f0      	bne.n	80014fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	2b00      	cmp	r3, #0
 8001526:	f000 80a0 	beq.w	800166a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800152a:	2300      	movs	r3, #0
 800152c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800152e:	4b13      	ldr	r3, [pc, #76]	; (800157c <HAL_RCC_OscConfig+0x2ac>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d10f      	bne.n	800155a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <HAL_RCC_OscConfig+0x2ac>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	4a0e      	ldr	r2, [pc, #56]	; (800157c <HAL_RCC_OscConfig+0x2ac>)
 8001544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001548:	6413      	str	r3, [r2, #64]	; 0x40
 800154a:	4b0c      	ldr	r3, [pc, #48]	; (800157c <HAL_RCC_OscConfig+0x2ac>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001556:	2301      	movs	r3, #1
 8001558:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155a:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <HAL_RCC_OscConfig+0x2b8>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001562:	2b00      	cmp	r3, #0
 8001564:	d121      	bne.n	80015aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001566:	4b08      	ldr	r3, [pc, #32]	; (8001588 <HAL_RCC_OscConfig+0x2b8>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a07      	ldr	r2, [pc, #28]	; (8001588 <HAL_RCC_OscConfig+0x2b8>)
 800156c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001572:	f7ff fc05 	bl	8000d80 <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001578:	e011      	b.n	800159e <HAL_RCC_OscConfig+0x2ce>
 800157a:	bf00      	nop
 800157c:	40023800 	.word	0x40023800
 8001580:	42470000 	.word	0x42470000
 8001584:	42470e80 	.word	0x42470e80
 8001588:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800158c:	f7ff fbf8 	bl	8000d80 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e0fd      	b.n	800179a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800159e:	4b81      	ldr	r3, [pc, #516]	; (80017a4 <HAL_RCC_OscConfig+0x4d4>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f0      	beq.n	800158c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d106      	bne.n	80015c0 <HAL_RCC_OscConfig+0x2f0>
 80015b2:	4b7d      	ldr	r3, [pc, #500]	; (80017a8 <HAL_RCC_OscConfig+0x4d8>)
 80015b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b6:	4a7c      	ldr	r2, [pc, #496]	; (80017a8 <HAL_RCC_OscConfig+0x4d8>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6713      	str	r3, [r2, #112]	; 0x70
 80015be:	e01c      	b.n	80015fa <HAL_RCC_OscConfig+0x32a>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	2b05      	cmp	r3, #5
 80015c6:	d10c      	bne.n	80015e2 <HAL_RCC_OscConfig+0x312>
 80015c8:	4b77      	ldr	r3, [pc, #476]	; (80017a8 <HAL_RCC_OscConfig+0x4d8>)
 80015ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015cc:	4a76      	ldr	r2, [pc, #472]	; (80017a8 <HAL_RCC_OscConfig+0x4d8>)
 80015ce:	f043 0304 	orr.w	r3, r3, #4
 80015d2:	6713      	str	r3, [r2, #112]	; 0x70
 80015d4:	4b74      	ldr	r3, [pc, #464]	; (80017a8 <HAL_RCC_OscConfig+0x4d8>)
 80015d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d8:	4a73      	ldr	r2, [pc, #460]	; (80017a8 <HAL_RCC_OscConfig+0x4d8>)
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	6713      	str	r3, [r2, #112]	; 0x70
 80015e0:	e00b      	b.n	80015fa <HAL_RCC_OscConfig+0x32a>
 80015e2:	4b71      	ldr	r3, [pc, #452]	; (80017a8 <HAL_RCC_OscConfig+0x4d8>)
 80015e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e6:	4a70      	ldr	r2, [pc, #448]	; (80017a8 <HAL_RCC_OscConfig+0x4d8>)
 80015e8:	f023 0301 	bic.w	r3, r3, #1
 80015ec:	6713      	str	r3, [r2, #112]	; 0x70
 80015ee:	4b6e      	ldr	r3, [pc, #440]	; (80017a8 <HAL_RCC_OscConfig+0x4d8>)
 80015f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f2:	4a6d      	ldr	r2, [pc, #436]	; (80017a8 <HAL_RCC_OscConfig+0x4d8>)
 80015f4:	f023 0304 	bic.w	r3, r3, #4
 80015f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d015      	beq.n	800162e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001602:	f7ff fbbd 	bl	8000d80 <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001608:	e00a      	b.n	8001620 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800160a:	f7ff fbb9 	bl	8000d80 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	f241 3288 	movw	r2, #5000	; 0x1388
 8001618:	4293      	cmp	r3, r2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e0bc      	b.n	800179a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001620:	4b61      	ldr	r3, [pc, #388]	; (80017a8 <HAL_RCC_OscConfig+0x4d8>)
 8001622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0ee      	beq.n	800160a <HAL_RCC_OscConfig+0x33a>
 800162c:	e014      	b.n	8001658 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800162e:	f7ff fba7 	bl	8000d80 <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001634:	e00a      	b.n	800164c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001636:	f7ff fba3 	bl	8000d80 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	f241 3288 	movw	r2, #5000	; 0x1388
 8001644:	4293      	cmp	r3, r2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e0a6      	b.n	800179a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800164c:	4b56      	ldr	r3, [pc, #344]	; (80017a8 <HAL_RCC_OscConfig+0x4d8>)
 800164e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1ee      	bne.n	8001636 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001658:	7dfb      	ldrb	r3, [r7, #23]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d105      	bne.n	800166a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800165e:	4b52      	ldr	r3, [pc, #328]	; (80017a8 <HAL_RCC_OscConfig+0x4d8>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	4a51      	ldr	r2, [pc, #324]	; (80017a8 <HAL_RCC_OscConfig+0x4d8>)
 8001664:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001668:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	2b00      	cmp	r3, #0
 8001670:	f000 8092 	beq.w	8001798 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001674:	4b4c      	ldr	r3, [pc, #304]	; (80017a8 <HAL_RCC_OscConfig+0x4d8>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f003 030c 	and.w	r3, r3, #12
 800167c:	2b08      	cmp	r3, #8
 800167e:	d05c      	beq.n	800173a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	2b02      	cmp	r3, #2
 8001686:	d141      	bne.n	800170c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001688:	4b48      	ldr	r3, [pc, #288]	; (80017ac <HAL_RCC_OscConfig+0x4dc>)
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168e:	f7ff fb77 	bl	8000d80 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001696:	f7ff fb73 	bl	8000d80 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e078      	b.n	800179a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a8:	4b3f      	ldr	r3, [pc, #252]	; (80017a8 <HAL_RCC_OscConfig+0x4d8>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1f0      	bne.n	8001696 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	69da      	ldr	r2, [r3, #28]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	431a      	orrs	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c2:	019b      	lsls	r3, r3, #6
 80016c4:	431a      	orrs	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ca:	085b      	lsrs	r3, r3, #1
 80016cc:	3b01      	subs	r3, #1
 80016ce:	041b      	lsls	r3, r3, #16
 80016d0:	431a      	orrs	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d6:	061b      	lsls	r3, r3, #24
 80016d8:	4933      	ldr	r1, [pc, #204]	; (80017a8 <HAL_RCC_OscConfig+0x4d8>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016de:	4b33      	ldr	r3, [pc, #204]	; (80017ac <HAL_RCC_OscConfig+0x4dc>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e4:	f7ff fb4c 	bl	8000d80 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ec:	f7ff fb48 	bl	8000d80 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e04d      	b.n	800179a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016fe:	4b2a      	ldr	r3, [pc, #168]	; (80017a8 <HAL_RCC_OscConfig+0x4d8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0f0      	beq.n	80016ec <HAL_RCC_OscConfig+0x41c>
 800170a:	e045      	b.n	8001798 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800170c:	4b27      	ldr	r3, [pc, #156]	; (80017ac <HAL_RCC_OscConfig+0x4dc>)
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001712:	f7ff fb35 	bl	8000d80 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800171a:	f7ff fb31 	bl	8000d80 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e036      	b.n	800179a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800172c:	4b1e      	ldr	r3, [pc, #120]	; (80017a8 <HAL_RCC_OscConfig+0x4d8>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1f0      	bne.n	800171a <HAL_RCC_OscConfig+0x44a>
 8001738:	e02e      	b.n	8001798 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d101      	bne.n	8001746 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e029      	b.n	800179a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001746:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <HAL_RCC_OscConfig+0x4d8>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	429a      	cmp	r2, r3
 8001758:	d11c      	bne.n	8001794 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001764:	429a      	cmp	r2, r3
 8001766:	d115      	bne.n	8001794 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800176e:	4013      	ands	r3, r2
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001774:	4293      	cmp	r3, r2
 8001776:	d10d      	bne.n	8001794 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001782:	429a      	cmp	r2, r3
 8001784:	d106      	bne.n	8001794 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001790:	429a      	cmp	r2, r3
 8001792:	d001      	beq.n	8001798 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e000      	b.n	800179a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40007000 	.word	0x40007000
 80017a8:	40023800 	.word	0x40023800
 80017ac:	42470060 	.word	0x42470060

080017b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e0cc      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017c4:	4b68      	ldr	r3, [pc, #416]	; (8001968 <HAL_RCC_ClockConfig+0x1b8>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 030f 	and.w	r3, r3, #15
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d90c      	bls.n	80017ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d2:	4b65      	ldr	r3, [pc, #404]	; (8001968 <HAL_RCC_ClockConfig+0x1b8>)
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017da:	4b63      	ldr	r3, [pc, #396]	; (8001968 <HAL_RCC_ClockConfig+0x1b8>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 030f 	and.w	r3, r3, #15
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d001      	beq.n	80017ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e0b8      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d020      	beq.n	800183a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	2b00      	cmp	r3, #0
 8001802:	d005      	beq.n	8001810 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001804:	4b59      	ldr	r3, [pc, #356]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	4a58      	ldr	r2, [pc, #352]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800180e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0308 	and.w	r3, r3, #8
 8001818:	2b00      	cmp	r3, #0
 800181a:	d005      	beq.n	8001828 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800181c:	4b53      	ldr	r3, [pc, #332]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	4a52      	ldr	r2, [pc, #328]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001826:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001828:	4b50      	ldr	r3, [pc, #320]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	494d      	ldr	r1, [pc, #308]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	4313      	orrs	r3, r2
 8001838:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b00      	cmp	r3, #0
 8001844:	d044      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d107      	bne.n	800185e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184e:	4b47      	ldr	r3, [pc, #284]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d119      	bne.n	800188e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e07f      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b02      	cmp	r3, #2
 8001864:	d003      	beq.n	800186e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800186a:	2b03      	cmp	r3, #3
 800186c:	d107      	bne.n	800187e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800186e:	4b3f      	ldr	r3, [pc, #252]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d109      	bne.n	800188e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e06f      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187e:	4b3b      	ldr	r3, [pc, #236]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e067      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800188e:	4b37      	ldr	r3, [pc, #220]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f023 0203 	bic.w	r2, r3, #3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	4934      	ldr	r1, [pc, #208]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 800189c:	4313      	orrs	r3, r2
 800189e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018a0:	f7ff fa6e 	bl	8000d80 <HAL_GetTick>
 80018a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a6:	e00a      	b.n	80018be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a8:	f7ff fa6a 	bl	8000d80 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e04f      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018be:	4b2b      	ldr	r3, [pc, #172]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f003 020c 	and.w	r2, r3, #12
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d1eb      	bne.n	80018a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018d0:	4b25      	ldr	r3, [pc, #148]	; (8001968 <HAL_RCC_ClockConfig+0x1b8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 030f 	and.w	r3, r3, #15
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d20c      	bcs.n	80018f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018de:	4b22      	ldr	r3, [pc, #136]	; (8001968 <HAL_RCC_ClockConfig+0x1b8>)
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e6:	4b20      	ldr	r3, [pc, #128]	; (8001968 <HAL_RCC_ClockConfig+0x1b8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d001      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e032      	b.n	800195e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	2b00      	cmp	r3, #0
 8001902:	d008      	beq.n	8001916 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001904:	4b19      	ldr	r3, [pc, #100]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	4916      	ldr	r1, [pc, #88]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	4313      	orrs	r3, r2
 8001914:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	2b00      	cmp	r3, #0
 8001920:	d009      	beq.n	8001936 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001922:	4b12      	ldr	r3, [pc, #72]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	490e      	ldr	r1, [pc, #56]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 8001932:	4313      	orrs	r3, r2
 8001934:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001936:	f000 f821 	bl	800197c <HAL_RCC_GetSysClockFreq>
 800193a:	4601      	mov	r1, r0
 800193c:	4b0b      	ldr	r3, [pc, #44]	; (800196c <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	091b      	lsrs	r3, r3, #4
 8001942:	f003 030f 	and.w	r3, r3, #15
 8001946:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <HAL_RCC_ClockConfig+0x1c0>)
 8001948:	5cd3      	ldrb	r3, [r2, r3]
 800194a:	fa21 f303 	lsr.w	r3, r1, r3
 800194e:	4a09      	ldr	r2, [pc, #36]	; (8001974 <HAL_RCC_ClockConfig+0x1c4>)
 8001950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001952:	4b09      	ldr	r3, [pc, #36]	; (8001978 <HAL_RCC_ClockConfig+0x1c8>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff f9ce 	bl	8000cf8 <HAL_InitTick>

  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40023c00 	.word	0x40023c00
 800196c:	40023800 	.word	0x40023800
 8001970:	08005c5c 	.word	0x08005c5c
 8001974:	20000000 	.word	0x20000000
 8001978:	20000004 	.word	0x20000004

0800197c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800197c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001982:	2300      	movs	r3, #0
 8001984:	607b      	str	r3, [r7, #4]
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	2300      	movs	r3, #0
 800198c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800198e:	2300      	movs	r3, #0
 8001990:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001992:	4b63      	ldr	r3, [pc, #396]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 030c 	and.w	r3, r3, #12
 800199a:	2b04      	cmp	r3, #4
 800199c:	d007      	beq.n	80019ae <HAL_RCC_GetSysClockFreq+0x32>
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d008      	beq.n	80019b4 <HAL_RCC_GetSysClockFreq+0x38>
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f040 80b4 	bne.w	8001b10 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019a8:	4b5e      	ldr	r3, [pc, #376]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80019aa:	60bb      	str	r3, [r7, #8]
       break;
 80019ac:	e0b3      	b.n	8001b16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019ae:	4b5e      	ldr	r3, [pc, #376]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80019b0:	60bb      	str	r3, [r7, #8]
      break;
 80019b2:	e0b0      	b.n	8001b16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019b4:	4b5a      	ldr	r3, [pc, #360]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019bc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019be:	4b58      	ldr	r3, [pc, #352]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d04a      	beq.n	8001a60 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ca:	4b55      	ldr	r3, [pc, #340]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	099b      	lsrs	r3, r3, #6
 80019d0:	f04f 0400 	mov.w	r4, #0
 80019d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019d8:	f04f 0200 	mov.w	r2, #0
 80019dc:	ea03 0501 	and.w	r5, r3, r1
 80019e0:	ea04 0602 	and.w	r6, r4, r2
 80019e4:	4629      	mov	r1, r5
 80019e6:	4632      	mov	r2, r6
 80019e8:	f04f 0300 	mov.w	r3, #0
 80019ec:	f04f 0400 	mov.w	r4, #0
 80019f0:	0154      	lsls	r4, r2, #5
 80019f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019f6:	014b      	lsls	r3, r1, #5
 80019f8:	4619      	mov	r1, r3
 80019fa:	4622      	mov	r2, r4
 80019fc:	1b49      	subs	r1, r1, r5
 80019fe:	eb62 0206 	sbc.w	r2, r2, r6
 8001a02:	f04f 0300 	mov.w	r3, #0
 8001a06:	f04f 0400 	mov.w	r4, #0
 8001a0a:	0194      	lsls	r4, r2, #6
 8001a0c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a10:	018b      	lsls	r3, r1, #6
 8001a12:	1a5b      	subs	r3, r3, r1
 8001a14:	eb64 0402 	sbc.w	r4, r4, r2
 8001a18:	f04f 0100 	mov.w	r1, #0
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	00e2      	lsls	r2, r4, #3
 8001a22:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a26:	00d9      	lsls	r1, r3, #3
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4614      	mov	r4, r2
 8001a2c:	195b      	adds	r3, r3, r5
 8001a2e:	eb44 0406 	adc.w	r4, r4, r6
 8001a32:	f04f 0100 	mov.w	r1, #0
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	0262      	lsls	r2, r4, #9
 8001a3c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001a40:	0259      	lsls	r1, r3, #9
 8001a42:	460b      	mov	r3, r1
 8001a44:	4614      	mov	r4, r2
 8001a46:	4618      	mov	r0, r3
 8001a48:	4621      	mov	r1, r4
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f04f 0400 	mov.w	r4, #0
 8001a50:	461a      	mov	r2, r3
 8001a52:	4623      	mov	r3, r4
 8001a54:	f7fe fc1c 	bl	8000290 <__aeabi_uldivmod>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	460c      	mov	r4, r1
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	e049      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a60:	4b2f      	ldr	r3, [pc, #188]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	099b      	lsrs	r3, r3, #6
 8001a66:	f04f 0400 	mov.w	r4, #0
 8001a6a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	ea03 0501 	and.w	r5, r3, r1
 8001a76:	ea04 0602 	and.w	r6, r4, r2
 8001a7a:	4629      	mov	r1, r5
 8001a7c:	4632      	mov	r2, r6
 8001a7e:	f04f 0300 	mov.w	r3, #0
 8001a82:	f04f 0400 	mov.w	r4, #0
 8001a86:	0154      	lsls	r4, r2, #5
 8001a88:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a8c:	014b      	lsls	r3, r1, #5
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4622      	mov	r2, r4
 8001a92:	1b49      	subs	r1, r1, r5
 8001a94:	eb62 0206 	sbc.w	r2, r2, r6
 8001a98:	f04f 0300 	mov.w	r3, #0
 8001a9c:	f04f 0400 	mov.w	r4, #0
 8001aa0:	0194      	lsls	r4, r2, #6
 8001aa2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001aa6:	018b      	lsls	r3, r1, #6
 8001aa8:	1a5b      	subs	r3, r3, r1
 8001aaa:	eb64 0402 	sbc.w	r4, r4, r2
 8001aae:	f04f 0100 	mov.w	r1, #0
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	00e2      	lsls	r2, r4, #3
 8001ab8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001abc:	00d9      	lsls	r1, r3, #3
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4614      	mov	r4, r2
 8001ac2:	195b      	adds	r3, r3, r5
 8001ac4:	eb44 0406 	adc.w	r4, r4, r6
 8001ac8:	f04f 0100 	mov.w	r1, #0
 8001acc:	f04f 0200 	mov.w	r2, #0
 8001ad0:	02a2      	lsls	r2, r4, #10
 8001ad2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001ad6:	0299      	lsls	r1, r3, #10
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4614      	mov	r4, r2
 8001adc:	4618      	mov	r0, r3
 8001ade:	4621      	mov	r1, r4
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f04f 0400 	mov.w	r4, #0
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	4623      	mov	r3, r4
 8001aea:	f7fe fbd1 	bl	8000290 <__aeabi_uldivmod>
 8001aee:	4603      	mov	r3, r0
 8001af0:	460c      	mov	r4, r1
 8001af2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001af4:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	0c1b      	lsrs	r3, r3, #16
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	3301      	adds	r3, #1
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0c:	60bb      	str	r3, [r7, #8]
      break;
 8001b0e:	e002      	b.n	8001b16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b10:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001b12:	60bb      	str	r3, [r7, #8]
      break;
 8001b14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b16:	68bb      	ldr	r3, [r7, #8]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b20:	40023800 	.word	0x40023800
 8001b24:	00f42400 	.word	0x00f42400
 8001b28:	007a1200 	.word	0x007a1200

08001b2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b30:	4b03      	ldr	r3, [pc, #12]	; (8001b40 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b32:	681b      	ldr	r3, [r3, #0]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	20000000 	.word	0x20000000

08001b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b48:	f7ff fff0 	bl	8001b2c <HAL_RCC_GetHCLKFreq>
 8001b4c:	4601      	mov	r1, r0
 8001b4e:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	0a9b      	lsrs	r3, r3, #10
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	4a03      	ldr	r2, [pc, #12]	; (8001b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b5a:	5cd3      	ldrb	r3, [r2, r3]
 8001b5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40023800 	.word	0x40023800
 8001b68:	08005c6c 	.word	0x08005c6c

08001b6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b70:	f7ff ffdc 	bl	8001b2c <HAL_RCC_GetHCLKFreq>
 8001b74:	4601      	mov	r1, r0
 8001b76:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	0b5b      	lsrs	r3, r3, #13
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	4a03      	ldr	r2, [pc, #12]	; (8001b90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b82:	5cd3      	ldrb	r3, [r2, r3]
 8001b84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	08005c6c 	.word	0x08005c6c

08001b94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e03f      	b.n	8001c26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d106      	bne.n	8001bc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7fe ff98 	bl	8000af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2224      	movs	r2, #36	; 0x24
 8001bc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68da      	ldr	r2, [r3, #12]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 f90b 	bl	8001df4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	691a      	ldr	r2, [r3, #16]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001bec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	695a      	ldr	r2, [r3, #20]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001bfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68da      	ldr	r2, [r3, #12]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2220      	movs	r2, #32
 8001c18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2220      	movs	r2, #32
 8001c20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b088      	sub	sp, #32
 8001c32:	af02      	add	r7, sp, #8
 8001c34:	60f8      	str	r0, [r7, #12]
 8001c36:	60b9      	str	r1, [r7, #8]
 8001c38:	603b      	str	r3, [r7, #0]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b20      	cmp	r3, #32
 8001c4c:	f040 8083 	bne.w	8001d56 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d002      	beq.n	8001c5c <HAL_UART_Transmit+0x2e>
 8001c56:	88fb      	ldrh	r3, [r7, #6]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e07b      	b.n	8001d58 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d101      	bne.n	8001c6e <HAL_UART_Transmit+0x40>
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	e074      	b.n	8001d58 <HAL_UART_Transmit+0x12a>
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2221      	movs	r2, #33	; 0x21
 8001c80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001c84:	f7ff f87c 	bl	8000d80 <HAL_GetTick>
 8001c88:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	88fa      	ldrh	r2, [r7, #6]
 8001c8e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	88fa      	ldrh	r2, [r7, #6]
 8001c94:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001c9e:	e042      	b.n	8001d26 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cb6:	d122      	bne.n	8001cfe <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2180      	movs	r1, #128	; 0x80
 8001cc2:	68f8      	ldr	r0, [r7, #12]
 8001cc4:	f000 f84c 	bl	8001d60 <UART_WaitOnFlagUntilTimeout>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e042      	b.n	8001d58 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ce4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d103      	bne.n	8001cf6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	3302      	adds	r3, #2
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	e017      	b.n	8001d26 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	e013      	b.n	8001d26 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	2200      	movs	r2, #0
 8001d06:	2180      	movs	r1, #128	; 0x80
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	f000 f829 	bl	8001d60 <UART_WaitOnFlagUntilTimeout>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e01f      	b.n	8001d58 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	1c5a      	adds	r2, r3, #1
 8001d1c:	60ba      	str	r2, [r7, #8]
 8001d1e:	781a      	ldrb	r2, [r3, #0]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1b7      	bne.n	8001ca0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	2200      	movs	r2, #0
 8001d38:	2140      	movs	r1, #64	; 0x40
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f000 f810 	bl	8001d60 <UART_WaitOnFlagUntilTimeout>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e006      	b.n	8001d58 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2220      	movs	r2, #32
 8001d4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001d52:	2300      	movs	r3, #0
 8001d54:	e000      	b.n	8001d58 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001d56:	2302      	movs	r3, #2
  }
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	603b      	str	r3, [r7, #0]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d70:	e02c      	b.n	8001dcc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d78:	d028      	beq.n	8001dcc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d007      	beq.n	8001d90 <UART_WaitOnFlagUntilTimeout+0x30>
 8001d80:	f7fe fffe 	bl	8000d80 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d21d      	bcs.n	8001dcc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68da      	ldr	r2, [r3, #12]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001d9e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	695a      	ldr	r2, [r3, #20]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 0201 	bic.w	r2, r2, #1
 8001dae:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2220      	movs	r2, #32
 8001db4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2220      	movs	r2, #32
 8001dbc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e00f      	b.n	8001dec <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	bf0c      	ite	eq
 8001ddc:	2301      	moveq	r3, #1
 8001dde:	2300      	movne	r3, #0
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	461a      	mov	r2, r3
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d0c3      	beq.n	8001d72 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001df8:	b085      	sub	sp, #20
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68da      	ldr	r2, [r3, #12]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	431a      	orrs	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	69db      	ldr	r3, [r3, #28]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001e36:	f023 030c 	bic.w	r3, r3, #12
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6812      	ldr	r2, [r2, #0]
 8001e3e:	68f9      	ldr	r1, [r7, #12]
 8001e40:	430b      	orrs	r3, r1
 8001e42:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	699a      	ldr	r2, [r3, #24]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e62:	f040 818b 	bne.w	800217c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4ac1      	ldr	r2, [pc, #772]	; (8002170 <UART_SetConfig+0x37c>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d005      	beq.n	8001e7c <UART_SetConfig+0x88>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4abf      	ldr	r2, [pc, #764]	; (8002174 <UART_SetConfig+0x380>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	f040 80bd 	bne.w	8001ff6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001e7c:	f7ff fe76 	bl	8001b6c <HAL_RCC_GetPCLK2Freq>
 8001e80:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	461d      	mov	r5, r3
 8001e86:	f04f 0600 	mov.w	r6, #0
 8001e8a:	46a8      	mov	r8, r5
 8001e8c:	46b1      	mov	r9, r6
 8001e8e:	eb18 0308 	adds.w	r3, r8, r8
 8001e92:	eb49 0409 	adc.w	r4, r9, r9
 8001e96:	4698      	mov	r8, r3
 8001e98:	46a1      	mov	r9, r4
 8001e9a:	eb18 0805 	adds.w	r8, r8, r5
 8001e9e:	eb49 0906 	adc.w	r9, r9, r6
 8001ea2:	f04f 0100 	mov.w	r1, #0
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001eae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001eb2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001eb6:	4688      	mov	r8, r1
 8001eb8:	4691      	mov	r9, r2
 8001eba:	eb18 0005 	adds.w	r0, r8, r5
 8001ebe:	eb49 0106 	adc.w	r1, r9, r6
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	461d      	mov	r5, r3
 8001ec8:	f04f 0600 	mov.w	r6, #0
 8001ecc:	196b      	adds	r3, r5, r5
 8001ece:	eb46 0406 	adc.w	r4, r6, r6
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	4623      	mov	r3, r4
 8001ed6:	f7fe f9db 	bl	8000290 <__aeabi_uldivmod>
 8001eda:	4603      	mov	r3, r0
 8001edc:	460c      	mov	r4, r1
 8001ede:	461a      	mov	r2, r3
 8001ee0:	4ba5      	ldr	r3, [pc, #660]	; (8002178 <UART_SetConfig+0x384>)
 8001ee2:	fba3 2302 	umull	r2, r3, r3, r2
 8001ee6:	095b      	lsrs	r3, r3, #5
 8001ee8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	461d      	mov	r5, r3
 8001ef0:	f04f 0600 	mov.w	r6, #0
 8001ef4:	46a9      	mov	r9, r5
 8001ef6:	46b2      	mov	sl, r6
 8001ef8:	eb19 0309 	adds.w	r3, r9, r9
 8001efc:	eb4a 040a 	adc.w	r4, sl, sl
 8001f00:	4699      	mov	r9, r3
 8001f02:	46a2      	mov	sl, r4
 8001f04:	eb19 0905 	adds.w	r9, r9, r5
 8001f08:	eb4a 0a06 	adc.w	sl, sl, r6
 8001f0c:	f04f 0100 	mov.w	r1, #0
 8001f10:	f04f 0200 	mov.w	r2, #0
 8001f14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f18:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001f1c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001f20:	4689      	mov	r9, r1
 8001f22:	4692      	mov	sl, r2
 8001f24:	eb19 0005 	adds.w	r0, r9, r5
 8001f28:	eb4a 0106 	adc.w	r1, sl, r6
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	461d      	mov	r5, r3
 8001f32:	f04f 0600 	mov.w	r6, #0
 8001f36:	196b      	adds	r3, r5, r5
 8001f38:	eb46 0406 	adc.w	r4, r6, r6
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4623      	mov	r3, r4
 8001f40:	f7fe f9a6 	bl	8000290 <__aeabi_uldivmod>
 8001f44:	4603      	mov	r3, r0
 8001f46:	460c      	mov	r4, r1
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4b8b      	ldr	r3, [pc, #556]	; (8002178 <UART_SetConfig+0x384>)
 8001f4c:	fba3 1302 	umull	r1, r3, r3, r2
 8001f50:	095b      	lsrs	r3, r3, #5
 8001f52:	2164      	movs	r1, #100	; 0x64
 8001f54:	fb01 f303 	mul.w	r3, r1, r3
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	3332      	adds	r3, #50	; 0x32
 8001f5e:	4a86      	ldr	r2, [pc, #536]	; (8002178 <UART_SetConfig+0x384>)
 8001f60:	fba2 2303 	umull	r2, r3, r2, r3
 8001f64:	095b      	lsrs	r3, r3, #5
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001f6c:	4498      	add	r8, r3
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	461d      	mov	r5, r3
 8001f72:	f04f 0600 	mov.w	r6, #0
 8001f76:	46a9      	mov	r9, r5
 8001f78:	46b2      	mov	sl, r6
 8001f7a:	eb19 0309 	adds.w	r3, r9, r9
 8001f7e:	eb4a 040a 	adc.w	r4, sl, sl
 8001f82:	4699      	mov	r9, r3
 8001f84:	46a2      	mov	sl, r4
 8001f86:	eb19 0905 	adds.w	r9, r9, r5
 8001f8a:	eb4a 0a06 	adc.w	sl, sl, r6
 8001f8e:	f04f 0100 	mov.w	r1, #0
 8001f92:	f04f 0200 	mov.w	r2, #0
 8001f96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f9a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001f9e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001fa2:	4689      	mov	r9, r1
 8001fa4:	4692      	mov	sl, r2
 8001fa6:	eb19 0005 	adds.w	r0, r9, r5
 8001faa:	eb4a 0106 	adc.w	r1, sl, r6
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	461d      	mov	r5, r3
 8001fb4:	f04f 0600 	mov.w	r6, #0
 8001fb8:	196b      	adds	r3, r5, r5
 8001fba:	eb46 0406 	adc.w	r4, r6, r6
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	4623      	mov	r3, r4
 8001fc2:	f7fe f965 	bl	8000290 <__aeabi_uldivmod>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	460c      	mov	r4, r1
 8001fca:	461a      	mov	r2, r3
 8001fcc:	4b6a      	ldr	r3, [pc, #424]	; (8002178 <UART_SetConfig+0x384>)
 8001fce:	fba3 1302 	umull	r1, r3, r3, r2
 8001fd2:	095b      	lsrs	r3, r3, #5
 8001fd4:	2164      	movs	r1, #100	; 0x64
 8001fd6:	fb01 f303 	mul.w	r3, r1, r3
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	3332      	adds	r3, #50	; 0x32
 8001fe0:	4a65      	ldr	r2, [pc, #404]	; (8002178 <UART_SetConfig+0x384>)
 8001fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe6:	095b      	lsrs	r3, r3, #5
 8001fe8:	f003 0207 	and.w	r2, r3, #7
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4442      	add	r2, r8
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	e26f      	b.n	80024d6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001ff6:	f7ff fda5 	bl	8001b44 <HAL_RCC_GetPCLK1Freq>
 8001ffa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	461d      	mov	r5, r3
 8002000:	f04f 0600 	mov.w	r6, #0
 8002004:	46a8      	mov	r8, r5
 8002006:	46b1      	mov	r9, r6
 8002008:	eb18 0308 	adds.w	r3, r8, r8
 800200c:	eb49 0409 	adc.w	r4, r9, r9
 8002010:	4698      	mov	r8, r3
 8002012:	46a1      	mov	r9, r4
 8002014:	eb18 0805 	adds.w	r8, r8, r5
 8002018:	eb49 0906 	adc.w	r9, r9, r6
 800201c:	f04f 0100 	mov.w	r1, #0
 8002020:	f04f 0200 	mov.w	r2, #0
 8002024:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002028:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800202c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002030:	4688      	mov	r8, r1
 8002032:	4691      	mov	r9, r2
 8002034:	eb18 0005 	adds.w	r0, r8, r5
 8002038:	eb49 0106 	adc.w	r1, r9, r6
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	461d      	mov	r5, r3
 8002042:	f04f 0600 	mov.w	r6, #0
 8002046:	196b      	adds	r3, r5, r5
 8002048:	eb46 0406 	adc.w	r4, r6, r6
 800204c:	461a      	mov	r2, r3
 800204e:	4623      	mov	r3, r4
 8002050:	f7fe f91e 	bl	8000290 <__aeabi_uldivmod>
 8002054:	4603      	mov	r3, r0
 8002056:	460c      	mov	r4, r1
 8002058:	461a      	mov	r2, r3
 800205a:	4b47      	ldr	r3, [pc, #284]	; (8002178 <UART_SetConfig+0x384>)
 800205c:	fba3 2302 	umull	r2, r3, r3, r2
 8002060:	095b      	lsrs	r3, r3, #5
 8002062:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	461d      	mov	r5, r3
 800206a:	f04f 0600 	mov.w	r6, #0
 800206e:	46a9      	mov	r9, r5
 8002070:	46b2      	mov	sl, r6
 8002072:	eb19 0309 	adds.w	r3, r9, r9
 8002076:	eb4a 040a 	adc.w	r4, sl, sl
 800207a:	4699      	mov	r9, r3
 800207c:	46a2      	mov	sl, r4
 800207e:	eb19 0905 	adds.w	r9, r9, r5
 8002082:	eb4a 0a06 	adc.w	sl, sl, r6
 8002086:	f04f 0100 	mov.w	r1, #0
 800208a:	f04f 0200 	mov.w	r2, #0
 800208e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002092:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002096:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800209a:	4689      	mov	r9, r1
 800209c:	4692      	mov	sl, r2
 800209e:	eb19 0005 	adds.w	r0, r9, r5
 80020a2:	eb4a 0106 	adc.w	r1, sl, r6
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	461d      	mov	r5, r3
 80020ac:	f04f 0600 	mov.w	r6, #0
 80020b0:	196b      	adds	r3, r5, r5
 80020b2:	eb46 0406 	adc.w	r4, r6, r6
 80020b6:	461a      	mov	r2, r3
 80020b8:	4623      	mov	r3, r4
 80020ba:	f7fe f8e9 	bl	8000290 <__aeabi_uldivmod>
 80020be:	4603      	mov	r3, r0
 80020c0:	460c      	mov	r4, r1
 80020c2:	461a      	mov	r2, r3
 80020c4:	4b2c      	ldr	r3, [pc, #176]	; (8002178 <UART_SetConfig+0x384>)
 80020c6:	fba3 1302 	umull	r1, r3, r3, r2
 80020ca:	095b      	lsrs	r3, r3, #5
 80020cc:	2164      	movs	r1, #100	; 0x64
 80020ce:	fb01 f303 	mul.w	r3, r1, r3
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	3332      	adds	r3, #50	; 0x32
 80020d8:	4a27      	ldr	r2, [pc, #156]	; (8002178 <UART_SetConfig+0x384>)
 80020da:	fba2 2303 	umull	r2, r3, r2, r3
 80020de:	095b      	lsrs	r3, r3, #5
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80020e6:	4498      	add	r8, r3
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	461d      	mov	r5, r3
 80020ec:	f04f 0600 	mov.w	r6, #0
 80020f0:	46a9      	mov	r9, r5
 80020f2:	46b2      	mov	sl, r6
 80020f4:	eb19 0309 	adds.w	r3, r9, r9
 80020f8:	eb4a 040a 	adc.w	r4, sl, sl
 80020fc:	4699      	mov	r9, r3
 80020fe:	46a2      	mov	sl, r4
 8002100:	eb19 0905 	adds.w	r9, r9, r5
 8002104:	eb4a 0a06 	adc.w	sl, sl, r6
 8002108:	f04f 0100 	mov.w	r1, #0
 800210c:	f04f 0200 	mov.w	r2, #0
 8002110:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002114:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002118:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800211c:	4689      	mov	r9, r1
 800211e:	4692      	mov	sl, r2
 8002120:	eb19 0005 	adds.w	r0, r9, r5
 8002124:	eb4a 0106 	adc.w	r1, sl, r6
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	461d      	mov	r5, r3
 800212e:	f04f 0600 	mov.w	r6, #0
 8002132:	196b      	adds	r3, r5, r5
 8002134:	eb46 0406 	adc.w	r4, r6, r6
 8002138:	461a      	mov	r2, r3
 800213a:	4623      	mov	r3, r4
 800213c:	f7fe f8a8 	bl	8000290 <__aeabi_uldivmod>
 8002140:	4603      	mov	r3, r0
 8002142:	460c      	mov	r4, r1
 8002144:	461a      	mov	r2, r3
 8002146:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <UART_SetConfig+0x384>)
 8002148:	fba3 1302 	umull	r1, r3, r3, r2
 800214c:	095b      	lsrs	r3, r3, #5
 800214e:	2164      	movs	r1, #100	; 0x64
 8002150:	fb01 f303 	mul.w	r3, r1, r3
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	3332      	adds	r3, #50	; 0x32
 800215a:	4a07      	ldr	r2, [pc, #28]	; (8002178 <UART_SetConfig+0x384>)
 800215c:	fba2 2303 	umull	r2, r3, r2, r3
 8002160:	095b      	lsrs	r3, r3, #5
 8002162:	f003 0207 	and.w	r2, r3, #7
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4442      	add	r2, r8
 800216c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800216e:	e1b2      	b.n	80024d6 <UART_SetConfig+0x6e2>
 8002170:	40011000 	.word	0x40011000
 8002174:	40011400 	.word	0x40011400
 8002178:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4ad7      	ldr	r2, [pc, #860]	; (80024e0 <UART_SetConfig+0x6ec>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d005      	beq.n	8002192 <UART_SetConfig+0x39e>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4ad6      	ldr	r2, [pc, #856]	; (80024e4 <UART_SetConfig+0x6f0>)
 800218c:	4293      	cmp	r3, r2
 800218e:	f040 80d1 	bne.w	8002334 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002192:	f7ff fceb 	bl	8001b6c <HAL_RCC_GetPCLK2Freq>
 8002196:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	469a      	mov	sl, r3
 800219c:	f04f 0b00 	mov.w	fp, #0
 80021a0:	46d0      	mov	r8, sl
 80021a2:	46d9      	mov	r9, fp
 80021a4:	eb18 0308 	adds.w	r3, r8, r8
 80021a8:	eb49 0409 	adc.w	r4, r9, r9
 80021ac:	4698      	mov	r8, r3
 80021ae:	46a1      	mov	r9, r4
 80021b0:	eb18 080a 	adds.w	r8, r8, sl
 80021b4:	eb49 090b 	adc.w	r9, r9, fp
 80021b8:	f04f 0100 	mov.w	r1, #0
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80021c4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80021c8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80021cc:	4688      	mov	r8, r1
 80021ce:	4691      	mov	r9, r2
 80021d0:	eb1a 0508 	adds.w	r5, sl, r8
 80021d4:	eb4b 0609 	adc.w	r6, fp, r9
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	4619      	mov	r1, r3
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	f04f 0300 	mov.w	r3, #0
 80021e6:	f04f 0400 	mov.w	r4, #0
 80021ea:	0094      	lsls	r4, r2, #2
 80021ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80021f0:	008b      	lsls	r3, r1, #2
 80021f2:	461a      	mov	r2, r3
 80021f4:	4623      	mov	r3, r4
 80021f6:	4628      	mov	r0, r5
 80021f8:	4631      	mov	r1, r6
 80021fa:	f7fe f849 	bl	8000290 <__aeabi_uldivmod>
 80021fe:	4603      	mov	r3, r0
 8002200:	460c      	mov	r4, r1
 8002202:	461a      	mov	r2, r3
 8002204:	4bb8      	ldr	r3, [pc, #736]	; (80024e8 <UART_SetConfig+0x6f4>)
 8002206:	fba3 2302 	umull	r2, r3, r3, r2
 800220a:	095b      	lsrs	r3, r3, #5
 800220c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	469b      	mov	fp, r3
 8002214:	f04f 0c00 	mov.w	ip, #0
 8002218:	46d9      	mov	r9, fp
 800221a:	46e2      	mov	sl, ip
 800221c:	eb19 0309 	adds.w	r3, r9, r9
 8002220:	eb4a 040a 	adc.w	r4, sl, sl
 8002224:	4699      	mov	r9, r3
 8002226:	46a2      	mov	sl, r4
 8002228:	eb19 090b 	adds.w	r9, r9, fp
 800222c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002230:	f04f 0100 	mov.w	r1, #0
 8002234:	f04f 0200 	mov.w	r2, #0
 8002238:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800223c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002240:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002244:	4689      	mov	r9, r1
 8002246:	4692      	mov	sl, r2
 8002248:	eb1b 0509 	adds.w	r5, fp, r9
 800224c:	eb4c 060a 	adc.w	r6, ip, sl
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	4619      	mov	r1, r3
 8002256:	f04f 0200 	mov.w	r2, #0
 800225a:	f04f 0300 	mov.w	r3, #0
 800225e:	f04f 0400 	mov.w	r4, #0
 8002262:	0094      	lsls	r4, r2, #2
 8002264:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002268:	008b      	lsls	r3, r1, #2
 800226a:	461a      	mov	r2, r3
 800226c:	4623      	mov	r3, r4
 800226e:	4628      	mov	r0, r5
 8002270:	4631      	mov	r1, r6
 8002272:	f7fe f80d 	bl	8000290 <__aeabi_uldivmod>
 8002276:	4603      	mov	r3, r0
 8002278:	460c      	mov	r4, r1
 800227a:	461a      	mov	r2, r3
 800227c:	4b9a      	ldr	r3, [pc, #616]	; (80024e8 <UART_SetConfig+0x6f4>)
 800227e:	fba3 1302 	umull	r1, r3, r3, r2
 8002282:	095b      	lsrs	r3, r3, #5
 8002284:	2164      	movs	r1, #100	; 0x64
 8002286:	fb01 f303 	mul.w	r3, r1, r3
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	011b      	lsls	r3, r3, #4
 800228e:	3332      	adds	r3, #50	; 0x32
 8002290:	4a95      	ldr	r2, [pc, #596]	; (80024e8 <UART_SetConfig+0x6f4>)
 8002292:	fba2 2303 	umull	r2, r3, r2, r3
 8002296:	095b      	lsrs	r3, r3, #5
 8002298:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800229c:	4498      	add	r8, r3
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	469b      	mov	fp, r3
 80022a2:	f04f 0c00 	mov.w	ip, #0
 80022a6:	46d9      	mov	r9, fp
 80022a8:	46e2      	mov	sl, ip
 80022aa:	eb19 0309 	adds.w	r3, r9, r9
 80022ae:	eb4a 040a 	adc.w	r4, sl, sl
 80022b2:	4699      	mov	r9, r3
 80022b4:	46a2      	mov	sl, r4
 80022b6:	eb19 090b 	adds.w	r9, r9, fp
 80022ba:	eb4a 0a0c 	adc.w	sl, sl, ip
 80022be:	f04f 0100 	mov.w	r1, #0
 80022c2:	f04f 0200 	mov.w	r2, #0
 80022c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80022ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80022d2:	4689      	mov	r9, r1
 80022d4:	4692      	mov	sl, r2
 80022d6:	eb1b 0509 	adds.w	r5, fp, r9
 80022da:	eb4c 060a 	adc.w	r6, ip, sl
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	4619      	mov	r1, r3
 80022e4:	f04f 0200 	mov.w	r2, #0
 80022e8:	f04f 0300 	mov.w	r3, #0
 80022ec:	f04f 0400 	mov.w	r4, #0
 80022f0:	0094      	lsls	r4, r2, #2
 80022f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80022f6:	008b      	lsls	r3, r1, #2
 80022f8:	461a      	mov	r2, r3
 80022fa:	4623      	mov	r3, r4
 80022fc:	4628      	mov	r0, r5
 80022fe:	4631      	mov	r1, r6
 8002300:	f7fd ffc6 	bl	8000290 <__aeabi_uldivmod>
 8002304:	4603      	mov	r3, r0
 8002306:	460c      	mov	r4, r1
 8002308:	461a      	mov	r2, r3
 800230a:	4b77      	ldr	r3, [pc, #476]	; (80024e8 <UART_SetConfig+0x6f4>)
 800230c:	fba3 1302 	umull	r1, r3, r3, r2
 8002310:	095b      	lsrs	r3, r3, #5
 8002312:	2164      	movs	r1, #100	; 0x64
 8002314:	fb01 f303 	mul.w	r3, r1, r3
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	011b      	lsls	r3, r3, #4
 800231c:	3332      	adds	r3, #50	; 0x32
 800231e:	4a72      	ldr	r2, [pc, #456]	; (80024e8 <UART_SetConfig+0x6f4>)
 8002320:	fba2 2303 	umull	r2, r3, r2, r3
 8002324:	095b      	lsrs	r3, r3, #5
 8002326:	f003 020f 	and.w	r2, r3, #15
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4442      	add	r2, r8
 8002330:	609a      	str	r2, [r3, #8]
 8002332:	e0d0      	b.n	80024d6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002334:	f7ff fc06 	bl	8001b44 <HAL_RCC_GetPCLK1Freq>
 8002338:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	469a      	mov	sl, r3
 800233e:	f04f 0b00 	mov.w	fp, #0
 8002342:	46d0      	mov	r8, sl
 8002344:	46d9      	mov	r9, fp
 8002346:	eb18 0308 	adds.w	r3, r8, r8
 800234a:	eb49 0409 	adc.w	r4, r9, r9
 800234e:	4698      	mov	r8, r3
 8002350:	46a1      	mov	r9, r4
 8002352:	eb18 080a 	adds.w	r8, r8, sl
 8002356:	eb49 090b 	adc.w	r9, r9, fp
 800235a:	f04f 0100 	mov.w	r1, #0
 800235e:	f04f 0200 	mov.w	r2, #0
 8002362:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002366:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800236a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800236e:	4688      	mov	r8, r1
 8002370:	4691      	mov	r9, r2
 8002372:	eb1a 0508 	adds.w	r5, sl, r8
 8002376:	eb4b 0609 	adc.w	r6, fp, r9
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	4619      	mov	r1, r3
 8002380:	f04f 0200 	mov.w	r2, #0
 8002384:	f04f 0300 	mov.w	r3, #0
 8002388:	f04f 0400 	mov.w	r4, #0
 800238c:	0094      	lsls	r4, r2, #2
 800238e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002392:	008b      	lsls	r3, r1, #2
 8002394:	461a      	mov	r2, r3
 8002396:	4623      	mov	r3, r4
 8002398:	4628      	mov	r0, r5
 800239a:	4631      	mov	r1, r6
 800239c:	f7fd ff78 	bl	8000290 <__aeabi_uldivmod>
 80023a0:	4603      	mov	r3, r0
 80023a2:	460c      	mov	r4, r1
 80023a4:	461a      	mov	r2, r3
 80023a6:	4b50      	ldr	r3, [pc, #320]	; (80024e8 <UART_SetConfig+0x6f4>)
 80023a8:	fba3 2302 	umull	r2, r3, r3, r2
 80023ac:	095b      	lsrs	r3, r3, #5
 80023ae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	469b      	mov	fp, r3
 80023b6:	f04f 0c00 	mov.w	ip, #0
 80023ba:	46d9      	mov	r9, fp
 80023bc:	46e2      	mov	sl, ip
 80023be:	eb19 0309 	adds.w	r3, r9, r9
 80023c2:	eb4a 040a 	adc.w	r4, sl, sl
 80023c6:	4699      	mov	r9, r3
 80023c8:	46a2      	mov	sl, r4
 80023ca:	eb19 090b 	adds.w	r9, r9, fp
 80023ce:	eb4a 0a0c 	adc.w	sl, sl, ip
 80023d2:	f04f 0100 	mov.w	r1, #0
 80023d6:	f04f 0200 	mov.w	r2, #0
 80023da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023e6:	4689      	mov	r9, r1
 80023e8:	4692      	mov	sl, r2
 80023ea:	eb1b 0509 	adds.w	r5, fp, r9
 80023ee:	eb4c 060a 	adc.w	r6, ip, sl
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	4619      	mov	r1, r3
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	f04f 0300 	mov.w	r3, #0
 8002400:	f04f 0400 	mov.w	r4, #0
 8002404:	0094      	lsls	r4, r2, #2
 8002406:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800240a:	008b      	lsls	r3, r1, #2
 800240c:	461a      	mov	r2, r3
 800240e:	4623      	mov	r3, r4
 8002410:	4628      	mov	r0, r5
 8002412:	4631      	mov	r1, r6
 8002414:	f7fd ff3c 	bl	8000290 <__aeabi_uldivmod>
 8002418:	4603      	mov	r3, r0
 800241a:	460c      	mov	r4, r1
 800241c:	461a      	mov	r2, r3
 800241e:	4b32      	ldr	r3, [pc, #200]	; (80024e8 <UART_SetConfig+0x6f4>)
 8002420:	fba3 1302 	umull	r1, r3, r3, r2
 8002424:	095b      	lsrs	r3, r3, #5
 8002426:	2164      	movs	r1, #100	; 0x64
 8002428:	fb01 f303 	mul.w	r3, r1, r3
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	3332      	adds	r3, #50	; 0x32
 8002432:	4a2d      	ldr	r2, [pc, #180]	; (80024e8 <UART_SetConfig+0x6f4>)
 8002434:	fba2 2303 	umull	r2, r3, r2, r3
 8002438:	095b      	lsrs	r3, r3, #5
 800243a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800243e:	4498      	add	r8, r3
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	469b      	mov	fp, r3
 8002444:	f04f 0c00 	mov.w	ip, #0
 8002448:	46d9      	mov	r9, fp
 800244a:	46e2      	mov	sl, ip
 800244c:	eb19 0309 	adds.w	r3, r9, r9
 8002450:	eb4a 040a 	adc.w	r4, sl, sl
 8002454:	4699      	mov	r9, r3
 8002456:	46a2      	mov	sl, r4
 8002458:	eb19 090b 	adds.w	r9, r9, fp
 800245c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002460:	f04f 0100 	mov.w	r1, #0
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800246c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002470:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002474:	4689      	mov	r9, r1
 8002476:	4692      	mov	sl, r2
 8002478:	eb1b 0509 	adds.w	r5, fp, r9
 800247c:	eb4c 060a 	adc.w	r6, ip, sl
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	4619      	mov	r1, r3
 8002486:	f04f 0200 	mov.w	r2, #0
 800248a:	f04f 0300 	mov.w	r3, #0
 800248e:	f04f 0400 	mov.w	r4, #0
 8002492:	0094      	lsls	r4, r2, #2
 8002494:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002498:	008b      	lsls	r3, r1, #2
 800249a:	461a      	mov	r2, r3
 800249c:	4623      	mov	r3, r4
 800249e:	4628      	mov	r0, r5
 80024a0:	4631      	mov	r1, r6
 80024a2:	f7fd fef5 	bl	8000290 <__aeabi_uldivmod>
 80024a6:	4603      	mov	r3, r0
 80024a8:	460c      	mov	r4, r1
 80024aa:	461a      	mov	r2, r3
 80024ac:	4b0e      	ldr	r3, [pc, #56]	; (80024e8 <UART_SetConfig+0x6f4>)
 80024ae:	fba3 1302 	umull	r1, r3, r3, r2
 80024b2:	095b      	lsrs	r3, r3, #5
 80024b4:	2164      	movs	r1, #100	; 0x64
 80024b6:	fb01 f303 	mul.w	r3, r1, r3
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	011b      	lsls	r3, r3, #4
 80024be:	3332      	adds	r3, #50	; 0x32
 80024c0:	4a09      	ldr	r2, [pc, #36]	; (80024e8 <UART_SetConfig+0x6f4>)
 80024c2:	fba2 2303 	umull	r2, r3, r2, r3
 80024c6:	095b      	lsrs	r3, r3, #5
 80024c8:	f003 020f 	and.w	r2, r3, #15
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4442      	add	r2, r8
 80024d2:	609a      	str	r2, [r3, #8]
}
 80024d4:	e7ff      	b.n	80024d6 <UART_SetConfig+0x6e2>
 80024d6:	bf00      	nop
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024e0:	40011000 	.word	0x40011000
 80024e4:	40011400 	.word	0x40011400
 80024e8:	51eb851f 	.word	0x51eb851f

080024ec <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80024f6:	2300      	movs	r3, #0
 80024f8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80024fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024fe:	2b84      	cmp	r3, #132	; 0x84
 8002500:	d005      	beq.n	800250e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002502:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	4413      	add	r3, r2
 800250a:	3303      	adds	r3, #3
 800250c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800250e:	68fb      	ldr	r3, [r7, #12]
}
 8002510:	4618      	mov	r0, r3
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002522:	f3ef 8305 	mrs	r3, IPSR
 8002526:	607b      	str	r3, [r7, #4]
  return(result);
 8002528:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800252a:	2b00      	cmp	r3, #0
 800252c:	bf14      	ite	ne
 800252e:	2301      	movne	r3, #1
 8002530:	2300      	moveq	r3, #0
 8002532:	b2db      	uxtb	r3, r3
}
 8002534:	4618      	mov	r0, r3
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002544:	f001 fa3a 	bl	80039bc <vTaskStartScheduler>
  
  return osOK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	bd80      	pop	{r7, pc}

0800254e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800254e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002550:	b089      	sub	sp, #36	; 0x24
 8002552:	af04      	add	r7, sp, #16
 8002554:	6078      	str	r0, [r7, #4]
 8002556:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d020      	beq.n	80025a2 <osThreadCreate+0x54>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d01c      	beq.n	80025a2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685c      	ldr	r4, [r3, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681d      	ldr	r5, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691e      	ldr	r6, [r3, #16]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff ffb6 	bl	80024ec <makeFreeRtosPriority>
 8002580:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800258a:	9202      	str	r2, [sp, #8]
 800258c:	9301      	str	r3, [sp, #4]
 800258e:	9100      	str	r1, [sp, #0]
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	4632      	mov	r2, r6
 8002594:	4629      	mov	r1, r5
 8002596:	4620      	mov	r0, r4
 8002598:	f001 f84c 	bl	8003634 <xTaskCreateStatic>
 800259c:	4603      	mov	r3, r0
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	e01c      	b.n	80025dc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685c      	ldr	r4, [r3, #4]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80025ae:	b29e      	uxth	r6, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff ff98 	bl	80024ec <makeFreeRtosPriority>
 80025bc:	4602      	mov	r2, r0
 80025be:	f107 030c 	add.w	r3, r7, #12
 80025c2:	9301      	str	r3, [sp, #4]
 80025c4:	9200      	str	r2, [sp, #0]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	4632      	mov	r2, r6
 80025ca:	4629      	mov	r1, r5
 80025cc:	4620      	mov	r0, r4
 80025ce:	f001 f88b 	bl	80036e8 <xTaskCreate>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d001      	beq.n	80025dc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80025d8:	2300      	movs	r3, #0
 80025da:	e000      	b.n	80025de <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80025dc:	68fb      	ldr	r3, [r7, #12]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080025e8 <osThreadYield>:
* @brief  Pass control to next thread that is in state \b READY.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadYield shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadYield (void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  taskYIELD();
 80025ec:	4b06      	ldr	r3, [pc, #24]	; (8002608 <osThreadYield+0x20>)
 80025ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	f3bf 8f4f 	dsb	sy
 80025f8:	f3bf 8f6f 	isb	sy
  
  return osOK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	e000ed04 	.word	0xe000ed04

0800260c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <osDelay+0x16>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	e000      	b.n	8002624 <osDelay+0x18>
 8002622:	2301      	movs	r3, #1
 8002624:	4618      	mov	r0, r3
 8002626:	f001 f995 	bl	8003954 <vTaskDelay>
  
  return osOK;
 800262a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800262c:	4618      	mov	r0, r3
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	3303      	adds	r3, #3
 8002642:	f023 0303 	bic.w	r3, r3, #3
 8002646:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8002648:	2014      	movs	r0, #20
 800264a:	f002 fc61 	bl	8004f10 <pvPortMalloc>
 800264e:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d046      	beq.n	80026e4 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	2200      	movs	r2, #0
 8002668:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f002 fc4e 	bl	8004f10 <pvPortMalloc>
 8002674:	4602      	mov	r2, r0
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d02b      	beq.n	80026da <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	fb02 f303 	mul.w	r3, r2, r3
 800268c:	4618      	mov	r0, r3
 800268e:	f002 fc3f 	bl	8004f10 <pvPortMalloc>
 8002692:	4602      	mov	r2, r0
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d011      	beq.n	80026c4 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 80026a0:	2300      	movs	r3, #0
 80026a2:	613b      	str	r3, [r7, #16]
 80026a4:	e008      	b.n	80026b8 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	4413      	add	r3, r2
 80026ae:	2200      	movs	r2, #0
 80026b0:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	3301      	adds	r3, #1
 80026b6:	613b      	str	r3, [r7, #16]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d3f1      	bcc.n	80026a6 <osPoolCreate+0x72>
 80026c2:	e00f      	b.n	80026e4 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f002 fce3 	bl	8005094 <vPortFree>
        vPortFree(thePool);
 80026ce:	6978      	ldr	r0, [r7, #20]
 80026d0:	f002 fce0 	bl	8005094 <vPortFree>
        thePool = NULL;
 80026d4:	2300      	movs	r3, #0
 80026d6:	617b      	str	r3, [r7, #20]
 80026d8:	e004      	b.n	80026e4 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 80026da:	6978      	ldr	r0, [r7, #20]
 80026dc:	f002 fcda 	bl	8005094 <vPortFree>
      thePool = NULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 80026e4:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3718      	adds	r7, #24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b085      	sub	sp, #20
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
 80026f6:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <osPoolFree+0x14>
    return osErrorParameter;
 80026fe:	2380      	movs	r3, #128	; 0x80
 8002700:	e030      	b.n	8002764 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <osPoolFree+0x1e>
    return osErrorParameter;
 8002708:	2380      	movs	r3, #128	; 0x80
 800270a:	e02b      	b.n	8002764 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d201      	bcs.n	800271a <osPoolFree+0x2c>
    return osErrorParameter;
 8002716:	2380      	movs	r3, #128	; 0x80
 8002718:	e024      	b.n	8002764 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6812      	ldr	r2, [r2, #0]
 8002720:	1a9b      	subs	r3, r3, r2
 8002722:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68da      	ldr	r2, [r3, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	fbb3 f1f2 	udiv	r1, r3, r2
 800272e:	fb02 f201 	mul.w	r2, r2, r1
 8002732:	1a9b      	subs	r3, r3, r2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <osPoolFree+0x4e>
    return osErrorParameter;
 8002738:	2380      	movs	r3, #128	; 0x80
 800273a:	e013      	b.n	8002764 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	fbb2 f3f3 	udiv	r3, r2, r3
 8002746:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	429a      	cmp	r2, r3
 8002750:	d301      	bcc.n	8002756 <osPoolFree+0x68>
    return osErrorParameter;
 8002752:	2380      	movs	r3, #128	; 0x80
 8002754:	e006      	b.n	8002764 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	4413      	add	r3, r2
 800275e:	2200      	movs	r2, #0
 8002760:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8002770:	b590      	push	{r4, r7, lr}
 8002772:	b087      	sub	sp, #28
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	613b      	str	r3, [r7, #16]
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689c      	ldr	r4, [r3, #8]
 800278e:	200c      	movs	r0, #12
 8002790:	f002 fbbe 	bl	8004f10 <pvPortMalloc>
 8002794:	4603      	mov	r3, r0
 8002796:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <osMailCreate+0x36>
    return NULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	e038      	b.n	8002818 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6818      	ldr	r0, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	681c      	ldr	r4, [r3, #0]
 80027ba:	2200      	movs	r2, #0
 80027bc:	2104      	movs	r1, #4
 80027be:	f000 fa86 	bl	8002cce <xQueueGenericCreate>
 80027c2:	4603      	mov	r3, r0
 80027c4:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d107      	bne.n	80027e2 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f002 fc5b 	bl	8005094 <vPortFree>
    return NULL;
 80027de:	2300      	movs	r3, #0
 80027e0:	e01a      	b.n	8002818 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	681c      	ldr	r4, [r3, #0]
 80027e8:	f107 030c 	add.w	r3, r7, #12
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff ff21 	bl	8002634 <osPoolCreate>
 80027f2:	4603      	mov	r3, r0
 80027f4:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d107      	bne.n	8002812 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f002 fc43 	bl	8005094 <vPortFree>
    return NULL;
 800280e:	2300      	movs	r3, #0
 8002810:	e002      	b.n	8002818 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8002818:	4618      	mov	r0, r3
 800281a:	371c      	adds	r7, #28
 800281c:	46bd      	mov	sp, r7
 800281e:	bd90      	pop	{r4, r7, pc}

08002820 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d101      	bne.n	8002834 <osMailPut+0x14>
    return osErrorParameter;
 8002830:	2380      	movs	r3, #128	; 0x80
 8002832:	e02c      	b.n	800288e <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8002834:	2300      	movs	r3, #0
 8002836:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8002838:	f7ff fe70 	bl	800251c <inHandlerMode>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d018      	beq.n	8002874 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6858      	ldr	r0, [r3, #4]
 8002846:	f107 020c 	add.w	r2, r7, #12
 800284a:	4639      	mov	r1, r7
 800284c:	2300      	movs	r3, #0
 800284e:	f000 fb97 	bl	8002f80 <xQueueGenericSendFromISR>
 8002852:	4603      	mov	r3, r0
 8002854:	2b01      	cmp	r3, #1
 8002856:	d001      	beq.n	800285c <osMailPut+0x3c>
      return osErrorOS;
 8002858:	23ff      	movs	r3, #255	; 0xff
 800285a:	e018      	b.n	800288e <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d014      	beq.n	800288c <osMailPut+0x6c>
 8002862:	4b0d      	ldr	r3, [pc, #52]	; (8002898 <osMailPut+0x78>)
 8002864:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	f3bf 8f4f 	dsb	sy
 800286e:	f3bf 8f6f 	isb	sy
 8002872:	e00b      	b.n	800288c <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6858      	ldr	r0, [r3, #4]
 8002878:	4639      	mov	r1, r7
 800287a:	2300      	movs	r3, #0
 800287c:	2200      	movs	r2, #0
 800287e:	f000 fa85 	bl	8002d8c <xQueueGenericSend>
 8002882:	4603      	mov	r3, r0
 8002884:	2b01      	cmp	r3, #1
 8002886:	d001      	beq.n	800288c <osMailPut+0x6c>
      return osErrorOS;
 8002888:	23ff      	movs	r3, #255	; 0xff
 800288a:	e000      	b.n	800288e <osMailPut+0x6e>
    }
  }
  
  return osOK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	e000ed04 	.word	0xe000ed04

0800289c <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 800289c:	b590      	push	{r4, r7, lr}
 800289e:	b08b      	sub	sp, #44	; 0x2c
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10a      	bne.n	80028c8 <osMailGet+0x2c>
    event.status = osErrorParameter;
 80028b2:	2380      	movs	r3, #128	; 0x80
 80028b4:	617b      	str	r3, [r7, #20]
    return event;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	461c      	mov	r4, r3
 80028ba:	f107 0314 	add.w	r3, r7, #20
 80028be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80028c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80028c6:	e056      	b.n	8002976 <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80028c8:	2300      	movs	r3, #0
 80028ca:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80028cc:	2300      	movs	r3, #0
 80028ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d6:	d103      	bne.n	80028e0 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 80028d8:	f04f 33ff 	mov.w	r3, #4294967295
 80028dc:	627b      	str	r3, [r7, #36]	; 0x24
 80028de:	e009      	b.n	80028f4 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d006      	beq.n	80028f4 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <osMailGet+0x58>
      ticks = 1;
 80028f0:	2301      	movs	r3, #1
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80028f4:	f7ff fe12 	bl	800251c <inHandlerMode>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d01d      	beq.n	800293a <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	6858      	ldr	r0, [r3, #4]
 8002902:	f107 0220 	add.w	r2, r7, #32
 8002906:	f107 0314 	add.w	r3, r7, #20
 800290a:	3304      	adds	r3, #4
 800290c:	4619      	mov	r1, r3
 800290e:	f000 fca7 	bl	8003260 <xQueueReceiveFromISR>
 8002912:	4603      	mov	r3, r0
 8002914:	2b01      	cmp	r3, #1
 8002916:	d102      	bne.n	800291e <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8002918:	2320      	movs	r3, #32
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	e001      	b.n	8002922 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 800291e:	2300      	movs	r3, #0
 8002920:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d01e      	beq.n	8002966 <osMailGet+0xca>
 8002928:	4b15      	ldr	r3, [pc, #84]	; (8002980 <osMailGet+0xe4>)
 800292a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	f3bf 8f4f 	dsb	sy
 8002934:	f3bf 8f6f 	isb	sy
 8002938:	e015      	b.n	8002966 <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	6858      	ldr	r0, [r3, #4]
 800293e:	f107 0314 	add.w	r3, r7, #20
 8002942:	3304      	adds	r3, #4
 8002944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002946:	4619      	mov	r1, r3
 8002948:	f000 fbae 	bl	80030a8 <xQueueReceive>
 800294c:	4603      	mov	r3, r0
 800294e:	2b01      	cmp	r3, #1
 8002950:	d102      	bne.n	8002958 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8002952:	2320      	movs	r3, #32
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	e006      	b.n	8002966 <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <osMailGet+0xc6>
 800295e:	2300      	movs	r3, #0
 8002960:	e000      	b.n	8002964 <osMailGet+0xc8>
 8002962:	2340      	movs	r3, #64	; 0x40
 8002964:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	461c      	mov	r4, r3
 800296a:	f107 0314 	add.w	r3, r7, #20
 800296e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002972:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	372c      	adds	r7, #44	; 0x2c
 800297a:	46bd      	mov	sp, r7
 800297c:	bd90      	pop	{r4, r7, pc}
 800297e:	bf00      	nop
 8002980:	e000ed04 	.word	0xe000ed04

08002984 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <osMailFree+0x14>
    return osErrorParameter;
 8002994:	2380      	movs	r3, #128	; 0x80
 8002996:	e006      	b.n	80029a6 <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	6839      	ldr	r1, [r7, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff fea5 	bl	80026ee <osPoolFree>
 80029a4:	4603      	mov	r3, r0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f103 0208 	add.w	r2, r3, #8
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f04f 32ff 	mov.w	r2, #4294967295
 80029c6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f103 0208 	add.w	r2, r3, #8
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f103 0208 	add.w	r2, r3, #8
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	1c5a      	adds	r2, r3, #1
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	601a      	str	r2, [r3, #0]
}
 8002a44:	bf00      	nop
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a66:	d103      	bne.n	8002a70 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	60fb      	str	r3, [r7, #12]
 8002a6e:	e00c      	b.n	8002a8a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3308      	adds	r3, #8
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	e002      	b.n	8002a7e <vListInsert+0x2e>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	60fb      	str	r3, [r7, #12]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d2f6      	bcs.n	8002a78 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	1c5a      	adds	r2, r3, #1
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	601a      	str	r2, [r3, #0]
}
 8002ab6:	bf00      	nop
 8002ab8:	3714      	adds	r7, #20
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b085      	sub	sp, #20
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	6892      	ldr	r2, [r2, #8]
 8002ad8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6852      	ldr	r2, [r2, #4]
 8002ae2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d103      	bne.n	8002af6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689a      	ldr	r2, [r3, #8]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	1e5a      	subs	r2, r3, #1
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
	...

08002b18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d109      	bne.n	8002b40 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b30:	f383 8811 	msr	BASEPRI, r3
 8002b34:	f3bf 8f6f 	isb	sy
 8002b38:	f3bf 8f4f 	dsb	sy
 8002b3c:	60bb      	str	r3, [r7, #8]
 8002b3e:	e7fe      	b.n	8002b3e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002b40:	f002 f8cc 	bl	8004cdc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4c:	68f9      	ldr	r1, [r7, #12]
 8002b4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b50:	fb01 f303 	mul.w	r3, r1, r3
 8002b54:	441a      	add	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b70:	3b01      	subs	r3, #1
 8002b72:	68f9      	ldr	r1, [r7, #12]
 8002b74:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b76:	fb01 f303 	mul.w	r3, r1, r3
 8002b7a:	441a      	add	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	22ff      	movs	r2, #255	; 0xff
 8002b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	22ff      	movs	r2, #255	; 0xff
 8002b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d114      	bne.n	8002bc0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d01a      	beq.n	8002bd4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	3310      	adds	r3, #16
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f001 f988 	bl	8003eb8 <xTaskRemoveFromEventList>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d012      	beq.n	8002bd4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002bae:	4b0d      	ldr	r3, [pc, #52]	; (8002be4 <xQueueGenericReset+0xcc>)
 8002bb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	f3bf 8f4f 	dsb	sy
 8002bba:	f3bf 8f6f 	isb	sy
 8002bbe:	e009      	b.n	8002bd4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	3310      	adds	r3, #16
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff fef2 	bl	80029ae <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	3324      	adds	r3, #36	; 0x24
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff feed 	bl	80029ae <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002bd4:	f002 f8b0 	bl	8004d38 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002bd8:	2301      	movs	r3, #1
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	e000ed04 	.word	0xe000ed04

08002be8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b08e      	sub	sp, #56	; 0x38
 8002bec:	af02      	add	r7, sp, #8
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
 8002bf4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d109      	bne.n	8002c10 <xQueueGenericCreateStatic+0x28>
 8002bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c00:	f383 8811 	msr	BASEPRI, r3
 8002c04:	f3bf 8f6f 	isb	sy
 8002c08:	f3bf 8f4f 	dsb	sy
 8002c0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c0e:	e7fe      	b.n	8002c0e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d109      	bne.n	8002c2a <xQueueGenericCreateStatic+0x42>
 8002c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c1a:	f383 8811 	msr	BASEPRI, r3
 8002c1e:	f3bf 8f6f 	isb	sy
 8002c22:	f3bf 8f4f 	dsb	sy
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
 8002c28:	e7fe      	b.n	8002c28 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d002      	beq.n	8002c36 <xQueueGenericCreateStatic+0x4e>
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <xQueueGenericCreateStatic+0x52>
 8002c36:	2301      	movs	r3, #1
 8002c38:	e000      	b.n	8002c3c <xQueueGenericCreateStatic+0x54>
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d109      	bne.n	8002c54 <xQueueGenericCreateStatic+0x6c>
 8002c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c44:	f383 8811 	msr	BASEPRI, r3
 8002c48:	f3bf 8f6f 	isb	sy
 8002c4c:	f3bf 8f4f 	dsb	sy
 8002c50:	623b      	str	r3, [r7, #32]
 8002c52:	e7fe      	b.n	8002c52 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d102      	bne.n	8002c60 <xQueueGenericCreateStatic+0x78>
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <xQueueGenericCreateStatic+0x7c>
 8002c60:	2301      	movs	r3, #1
 8002c62:	e000      	b.n	8002c66 <xQueueGenericCreateStatic+0x7e>
 8002c64:	2300      	movs	r3, #0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d109      	bne.n	8002c7e <xQueueGenericCreateStatic+0x96>
 8002c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c6e:	f383 8811 	msr	BASEPRI, r3
 8002c72:	f3bf 8f6f 	isb	sy
 8002c76:	f3bf 8f4f 	dsb	sy
 8002c7a:	61fb      	str	r3, [r7, #28]
 8002c7c:	e7fe      	b.n	8002c7c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002c7e:	2348      	movs	r3, #72	; 0x48
 8002c80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	2b48      	cmp	r3, #72	; 0x48
 8002c86:	d009      	beq.n	8002c9c <xQueueGenericCreateStatic+0xb4>
 8002c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8c:	f383 8811 	msr	BASEPRI, r3
 8002c90:	f3bf 8f6f 	isb	sy
 8002c94:	f3bf 8f4f 	dsb	sy
 8002c98:	61bb      	str	r3, [r7, #24]
 8002c9a:	e7fe      	b.n	8002c9a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002c9c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00d      	beq.n	8002cc4 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002cb0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 f844 	bl	8002d4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3730      	adds	r7, #48	; 0x30
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b08a      	sub	sp, #40	; 0x28
 8002cd2:	af02      	add	r7, sp, #8
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d109      	bne.n	8002cf6 <xQueueGenericCreate+0x28>
 8002ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce6:	f383 8811 	msr	BASEPRI, r3
 8002cea:	f3bf 8f6f 	isb	sy
 8002cee:	f3bf 8f4f 	dsb	sy
 8002cf2:	613b      	str	r3, [r7, #16]
 8002cf4:	e7fe      	b.n	8002cf4 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d102      	bne.n	8002d02 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	61fb      	str	r3, [r7, #28]
 8002d00:	e004      	b.n	8002d0c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	fb02 f303 	mul.w	r3, r2, r3
 8002d0a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	3348      	adds	r3, #72	; 0x48
 8002d10:	4618      	mov	r0, r3
 8002d12:	f002 f8fd 	bl	8004f10 <pvPortMalloc>
 8002d16:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d011      	beq.n	8002d42 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	3348      	adds	r3, #72	; 0x48
 8002d26:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d30:	79fa      	ldrb	r2, [r7, #7]
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	4613      	mov	r3, r2
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	68b9      	ldr	r1, [r7, #8]
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 f805 	bl	8002d4c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002d42:	69bb      	ldr	r3, [r7, #24]
	}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3720      	adds	r7, #32
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
 8002d58:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d103      	bne.n	8002d68 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	e002      	b.n	8002d6e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	69b8      	ldr	r0, [r7, #24]
 8002d7e:	f7ff fecb 	bl	8002b18 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002d82:	bf00      	nop
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
	...

08002d8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b08e      	sub	sp, #56	; 0x38
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
 8002d98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d109      	bne.n	8002dbc <xQueueGenericSend+0x30>
 8002da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dac:	f383 8811 	msr	BASEPRI, r3
 8002db0:	f3bf 8f6f 	isb	sy
 8002db4:	f3bf 8f4f 	dsb	sy
 8002db8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dba:	e7fe      	b.n	8002dba <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d103      	bne.n	8002dca <xQueueGenericSend+0x3e>
 8002dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <xQueueGenericSend+0x42>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e000      	b.n	8002dd0 <xQueueGenericSend+0x44>
 8002dce:	2300      	movs	r3, #0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d109      	bne.n	8002de8 <xQueueGenericSend+0x5c>
 8002dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd8:	f383 8811 	msr	BASEPRI, r3
 8002ddc:	f3bf 8f6f 	isb	sy
 8002de0:	f3bf 8f4f 	dsb	sy
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24
 8002de6:	e7fe      	b.n	8002de6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d103      	bne.n	8002df6 <xQueueGenericSend+0x6a>
 8002dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <xQueueGenericSend+0x6e>
 8002df6:	2301      	movs	r3, #1
 8002df8:	e000      	b.n	8002dfc <xQueueGenericSend+0x70>
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d109      	bne.n	8002e14 <xQueueGenericSend+0x88>
 8002e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e04:	f383 8811 	msr	BASEPRI, r3
 8002e08:	f3bf 8f6f 	isb	sy
 8002e0c:	f3bf 8f4f 	dsb	sy
 8002e10:	623b      	str	r3, [r7, #32]
 8002e12:	e7fe      	b.n	8002e12 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e14:	f001 fa06 	bl	8004224 <xTaskGetSchedulerState>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d102      	bne.n	8002e24 <xQueueGenericSend+0x98>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <xQueueGenericSend+0x9c>
 8002e24:	2301      	movs	r3, #1
 8002e26:	e000      	b.n	8002e2a <xQueueGenericSend+0x9e>
 8002e28:	2300      	movs	r3, #0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d109      	bne.n	8002e42 <xQueueGenericSend+0xb6>
 8002e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e32:	f383 8811 	msr	BASEPRI, r3
 8002e36:	f3bf 8f6f 	isb	sy
 8002e3a:	f3bf 8f4f 	dsb	sy
 8002e3e:	61fb      	str	r3, [r7, #28]
 8002e40:	e7fe      	b.n	8002e40 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e42:	f001 ff4b 	bl	8004cdc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d302      	bcc.n	8002e58 <xQueueGenericSend+0xcc>
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d129      	bne.n	8002eac <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	68b9      	ldr	r1, [r7, #8]
 8002e5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e5e:	f000 fa7c 	bl	800335a <prvCopyDataToQueue>
 8002e62:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d010      	beq.n	8002e8e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6e:	3324      	adds	r3, #36	; 0x24
 8002e70:	4618      	mov	r0, r3
 8002e72:	f001 f821 	bl	8003eb8 <xTaskRemoveFromEventList>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d013      	beq.n	8002ea4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e7c:	4b3f      	ldr	r3, [pc, #252]	; (8002f7c <xQueueGenericSend+0x1f0>)
 8002e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	f3bf 8f4f 	dsb	sy
 8002e88:	f3bf 8f6f 	isb	sy
 8002e8c:	e00a      	b.n	8002ea4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d007      	beq.n	8002ea4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e94:	4b39      	ldr	r3, [pc, #228]	; (8002f7c <xQueueGenericSend+0x1f0>)
 8002e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	f3bf 8f4f 	dsb	sy
 8002ea0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002ea4:	f001 ff48 	bl	8004d38 <vPortExitCritical>
				return pdPASS;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e063      	b.n	8002f74 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d103      	bne.n	8002eba <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002eb2:	f001 ff41 	bl	8004d38 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	e05c      	b.n	8002f74 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d106      	bne.n	8002ece <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ec0:	f107 0314 	add.w	r3, r7, #20
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f001 f859 	bl	8003f7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ece:	f001 ff33 	bl	8004d38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ed2:	f000 fdd7 	bl	8003a84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ed6:	f001 ff01 	bl	8004cdc <vPortEnterCritical>
 8002eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002edc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ee0:	b25b      	sxtb	r3, r3
 8002ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee6:	d103      	bne.n	8002ef0 <xQueueGenericSend+0x164>
 8002ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ef6:	b25b      	sxtb	r3, r3
 8002ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efc:	d103      	bne.n	8002f06 <xQueueGenericSend+0x17a>
 8002efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f06:	f001 ff17 	bl	8004d38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f0a:	1d3a      	adds	r2, r7, #4
 8002f0c:	f107 0314 	add.w	r3, r7, #20
 8002f10:	4611      	mov	r1, r2
 8002f12:	4618      	mov	r0, r3
 8002f14:	f001 f848 	bl	8003fa8 <xTaskCheckForTimeOut>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d124      	bne.n	8002f68 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002f1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f20:	f000 fb13 	bl	800354a <prvIsQueueFull>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d018      	beq.n	8002f5c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2c:	3310      	adds	r3, #16
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	4611      	mov	r1, r2
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 ff72 	bl	8003e1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002f38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f3a:	f000 fa9e 	bl	800347a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002f3e:	f000 fdaf 	bl	8003aa0 <xTaskResumeAll>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f47f af7c 	bne.w	8002e42 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002f4a:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <xQueueGenericSend+0x1f0>)
 8002f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	f3bf 8f4f 	dsb	sy
 8002f56:	f3bf 8f6f 	isb	sy
 8002f5a:	e772      	b.n	8002e42 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002f5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f5e:	f000 fa8c 	bl	800347a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f62:	f000 fd9d 	bl	8003aa0 <xTaskResumeAll>
 8002f66:	e76c      	b.n	8002e42 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f6a:	f000 fa86 	bl	800347a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f6e:	f000 fd97 	bl	8003aa0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f72:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3738      	adds	r7, #56	; 0x38
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	e000ed04 	.word	0xe000ed04

08002f80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b08e      	sub	sp, #56	; 0x38
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
 8002f8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d109      	bne.n	8002fac <xQueueGenericSendFromISR+0x2c>
 8002f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9c:	f383 8811 	msr	BASEPRI, r3
 8002fa0:	f3bf 8f6f 	isb	sy
 8002fa4:	f3bf 8f4f 	dsb	sy
 8002fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8002faa:	e7fe      	b.n	8002faa <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d103      	bne.n	8002fba <xQueueGenericSendFromISR+0x3a>
 8002fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <xQueueGenericSendFromISR+0x3e>
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e000      	b.n	8002fc0 <xQueueGenericSendFromISR+0x40>
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d109      	bne.n	8002fd8 <xQueueGenericSendFromISR+0x58>
 8002fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc8:	f383 8811 	msr	BASEPRI, r3
 8002fcc:	f3bf 8f6f 	isb	sy
 8002fd0:	f3bf 8f4f 	dsb	sy
 8002fd4:	623b      	str	r3, [r7, #32]
 8002fd6:	e7fe      	b.n	8002fd6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d103      	bne.n	8002fe6 <xQueueGenericSendFromISR+0x66>
 8002fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d101      	bne.n	8002fea <xQueueGenericSendFromISR+0x6a>
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e000      	b.n	8002fec <xQueueGenericSendFromISR+0x6c>
 8002fea:	2300      	movs	r3, #0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d109      	bne.n	8003004 <xQueueGenericSendFromISR+0x84>
 8002ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff4:	f383 8811 	msr	BASEPRI, r3
 8002ff8:	f3bf 8f6f 	isb	sy
 8002ffc:	f3bf 8f4f 	dsb	sy
 8003000:	61fb      	str	r3, [r7, #28]
 8003002:	e7fe      	b.n	8003002 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003004:	f001 ff46 	bl	8004e94 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003008:	f3ef 8211 	mrs	r2, BASEPRI
 800300c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003010:	f383 8811 	msr	BASEPRI, r3
 8003014:	f3bf 8f6f 	isb	sy
 8003018:	f3bf 8f4f 	dsb	sy
 800301c:	61ba      	str	r2, [r7, #24]
 800301e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003020:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003022:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003026:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800302a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302c:	429a      	cmp	r2, r3
 800302e:	d302      	bcc.n	8003036 <xQueueGenericSendFromISR+0xb6>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	2b02      	cmp	r3, #2
 8003034:	d12c      	bne.n	8003090 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003038:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800303c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	68b9      	ldr	r1, [r7, #8]
 8003044:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003046:	f000 f988 	bl	800335a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800304a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800304e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003052:	d112      	bne.n	800307a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003058:	2b00      	cmp	r3, #0
 800305a:	d016      	beq.n	800308a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800305c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305e:	3324      	adds	r3, #36	; 0x24
 8003060:	4618      	mov	r0, r3
 8003062:	f000 ff29 	bl	8003eb8 <xTaskRemoveFromEventList>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00e      	beq.n	800308a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00b      	beq.n	800308a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	e007      	b.n	800308a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800307a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800307e:	3301      	adds	r3, #1
 8003080:	b2db      	uxtb	r3, r3
 8003082:	b25a      	sxtb	r2, r3
 8003084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003086:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800308a:	2301      	movs	r3, #1
 800308c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800308e:	e001      	b.n	8003094 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003090:	2300      	movs	r3, #0
 8003092:	637b      	str	r3, [r7, #52]	; 0x34
 8003094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003096:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800309e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3738      	adds	r7, #56	; 0x38
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b08c      	sub	sp, #48	; 0x30
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80030b4:	2300      	movs	r3, #0
 80030b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80030bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d109      	bne.n	80030d6 <xQueueReceive+0x2e>
	__asm volatile
 80030c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c6:	f383 8811 	msr	BASEPRI, r3
 80030ca:	f3bf 8f6f 	isb	sy
 80030ce:	f3bf 8f4f 	dsb	sy
 80030d2:	623b      	str	r3, [r7, #32]
 80030d4:	e7fe      	b.n	80030d4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d103      	bne.n	80030e4 <xQueueReceive+0x3c>
 80030dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <xQueueReceive+0x40>
 80030e4:	2301      	movs	r3, #1
 80030e6:	e000      	b.n	80030ea <xQueueReceive+0x42>
 80030e8:	2300      	movs	r3, #0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d109      	bne.n	8003102 <xQueueReceive+0x5a>
 80030ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f2:	f383 8811 	msr	BASEPRI, r3
 80030f6:	f3bf 8f6f 	isb	sy
 80030fa:	f3bf 8f4f 	dsb	sy
 80030fe:	61fb      	str	r3, [r7, #28]
 8003100:	e7fe      	b.n	8003100 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003102:	f001 f88f 	bl	8004224 <xTaskGetSchedulerState>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d102      	bne.n	8003112 <xQueueReceive+0x6a>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <xQueueReceive+0x6e>
 8003112:	2301      	movs	r3, #1
 8003114:	e000      	b.n	8003118 <xQueueReceive+0x70>
 8003116:	2300      	movs	r3, #0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d109      	bne.n	8003130 <xQueueReceive+0x88>
 800311c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003120:	f383 8811 	msr	BASEPRI, r3
 8003124:	f3bf 8f6f 	isb	sy
 8003128:	f3bf 8f4f 	dsb	sy
 800312c:	61bb      	str	r3, [r7, #24]
 800312e:	e7fe      	b.n	800312e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003130:	f001 fdd4 	bl	8004cdc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003138:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	2b00      	cmp	r3, #0
 800313e:	d01f      	beq.n	8003180 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003140:	68b9      	ldr	r1, [r7, #8]
 8003142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003144:	f000 f973 	bl	800342e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	1e5a      	subs	r2, r3, #1
 800314c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00f      	beq.n	8003178 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315a:	3310      	adds	r3, #16
 800315c:	4618      	mov	r0, r3
 800315e:	f000 feab 	bl	8003eb8 <xTaskRemoveFromEventList>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d007      	beq.n	8003178 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003168:	4b3c      	ldr	r3, [pc, #240]	; (800325c <xQueueReceive+0x1b4>)
 800316a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	f3bf 8f4f 	dsb	sy
 8003174:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003178:	f001 fdde 	bl	8004d38 <vPortExitCritical>
				return pdPASS;
 800317c:	2301      	movs	r3, #1
 800317e:	e069      	b.n	8003254 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d103      	bne.n	800318e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003186:	f001 fdd7 	bl	8004d38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800318a:	2300      	movs	r3, #0
 800318c:	e062      	b.n	8003254 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800318e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003190:	2b00      	cmp	r3, #0
 8003192:	d106      	bne.n	80031a2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003194:	f107 0310 	add.w	r3, r7, #16
 8003198:	4618      	mov	r0, r3
 800319a:	f000 feef 	bl	8003f7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800319e:	2301      	movs	r3, #1
 80031a0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80031a2:	f001 fdc9 	bl	8004d38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80031a6:	f000 fc6d 	bl	8003a84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80031aa:	f001 fd97 	bl	8004cdc <vPortEnterCritical>
 80031ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031b4:	b25b      	sxtb	r3, r3
 80031b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ba:	d103      	bne.n	80031c4 <xQueueReceive+0x11c>
 80031bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031ca:	b25b      	sxtb	r3, r3
 80031cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d0:	d103      	bne.n	80031da <xQueueReceive+0x132>
 80031d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031da:	f001 fdad 	bl	8004d38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031de:	1d3a      	adds	r2, r7, #4
 80031e0:	f107 0310 	add.w	r3, r7, #16
 80031e4:	4611      	mov	r1, r2
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 fede 	bl	8003fa8 <xTaskCheckForTimeOut>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d123      	bne.n	800323a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031f4:	f000 f993 	bl	800351e <prvIsQueueEmpty>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d017      	beq.n	800322e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003200:	3324      	adds	r3, #36	; 0x24
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	4611      	mov	r1, r2
 8003206:	4618      	mov	r0, r3
 8003208:	f000 fe08 	bl	8003e1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800320c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800320e:	f000 f934 	bl	800347a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003212:	f000 fc45 	bl	8003aa0 <xTaskResumeAll>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d189      	bne.n	8003130 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800321c:	4b0f      	ldr	r3, [pc, #60]	; (800325c <xQueueReceive+0x1b4>)
 800321e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	f3bf 8f4f 	dsb	sy
 8003228:	f3bf 8f6f 	isb	sy
 800322c:	e780      	b.n	8003130 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800322e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003230:	f000 f923 	bl	800347a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003234:	f000 fc34 	bl	8003aa0 <xTaskResumeAll>
 8003238:	e77a      	b.n	8003130 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800323a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800323c:	f000 f91d 	bl	800347a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003240:	f000 fc2e 	bl	8003aa0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003244:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003246:	f000 f96a 	bl	800351e <prvIsQueueEmpty>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	f43f af6f 	beq.w	8003130 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003252:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003254:	4618      	mov	r0, r3
 8003256:	3730      	adds	r7, #48	; 0x30
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	e000ed04 	.word	0xe000ed04

08003260 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b08e      	sub	sp, #56	; 0x38
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003272:	2b00      	cmp	r3, #0
 8003274:	d109      	bne.n	800328a <xQueueReceiveFromISR+0x2a>
 8003276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327a:	f383 8811 	msr	BASEPRI, r3
 800327e:	f3bf 8f6f 	isb	sy
 8003282:	f3bf 8f4f 	dsb	sy
 8003286:	623b      	str	r3, [r7, #32]
 8003288:	e7fe      	b.n	8003288 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d103      	bne.n	8003298 <xQueueReceiveFromISR+0x38>
 8003290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <xQueueReceiveFromISR+0x3c>
 8003298:	2301      	movs	r3, #1
 800329a:	e000      	b.n	800329e <xQueueReceiveFromISR+0x3e>
 800329c:	2300      	movs	r3, #0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d109      	bne.n	80032b6 <xQueueReceiveFromISR+0x56>
 80032a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a6:	f383 8811 	msr	BASEPRI, r3
 80032aa:	f3bf 8f6f 	isb	sy
 80032ae:	f3bf 8f4f 	dsb	sy
 80032b2:	61fb      	str	r3, [r7, #28]
 80032b4:	e7fe      	b.n	80032b4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80032b6:	f001 fded 	bl	8004e94 <vPortValidateInterruptPriority>
	__asm volatile
 80032ba:	f3ef 8211 	mrs	r2, BASEPRI
 80032be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c2:	f383 8811 	msr	BASEPRI, r3
 80032c6:	f3bf 8f6f 	isb	sy
 80032ca:	f3bf 8f4f 	dsb	sy
 80032ce:	61ba      	str	r2, [r7, #24]
 80032d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80032d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80032d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d02f      	beq.n	8003342 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80032e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80032ec:	68b9      	ldr	r1, [r7, #8]
 80032ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032f0:	f000 f89d 	bl	800342e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80032f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f6:	1e5a      	subs	r2, r3, #1
 80032f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80032fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003304:	d112      	bne.n	800332c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d016      	beq.n	800333c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800330e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003310:	3310      	adds	r3, #16
 8003312:	4618      	mov	r0, r3
 8003314:	f000 fdd0 	bl	8003eb8 <xTaskRemoveFromEventList>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00e      	beq.n	800333c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00b      	beq.n	800333c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	e007      	b.n	800333c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800332c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003330:	3301      	adds	r3, #1
 8003332:	b2db      	uxtb	r3, r3
 8003334:	b25a      	sxtb	r2, r3
 8003336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800333c:	2301      	movs	r3, #1
 800333e:	637b      	str	r3, [r7, #52]	; 0x34
 8003340:	e001      	b.n	8003346 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8003342:	2300      	movs	r3, #0
 8003344:	637b      	str	r3, [r7, #52]	; 0x34
 8003346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003348:	613b      	str	r3, [r7, #16]
	__asm volatile
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003352:	4618      	mov	r0, r3
 8003354:	3738      	adds	r7, #56	; 0x38
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b086      	sub	sp, #24
 800335e:	af00      	add	r7, sp, #0
 8003360:	60f8      	str	r0, [r7, #12]
 8003362:	60b9      	str	r1, [r7, #8]
 8003364:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003366:	2300      	movs	r3, #0
 8003368:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10d      	bne.n	8003394 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d14d      	bne.n	800341c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	4618      	mov	r0, r3
 8003386:	f000 ff6b 	bl	8004260 <xTaskPriorityDisinherit>
 800338a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	609a      	str	r2, [r3, #8]
 8003392:	e043      	b.n	800341c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d119      	bne.n	80033ce <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6858      	ldr	r0, [r3, #4]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	461a      	mov	r2, r3
 80033a4:	68b9      	ldr	r1, [r7, #8]
 80033a6:	f001 ffb3 	bl	8005310 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	441a      	add	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d32b      	bcc.n	800341c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	605a      	str	r2, [r3, #4]
 80033cc:	e026      	b.n	800341c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	68d8      	ldr	r0, [r3, #12]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	461a      	mov	r2, r3
 80033d8:	68b9      	ldr	r1, [r7, #8]
 80033da:	f001 ff99 	bl	8005310 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	425b      	negs	r3, r3
 80033e8:	441a      	add	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d207      	bcs.n	800340a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	689a      	ldr	r2, [r3, #8]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	425b      	negs	r3, r3
 8003404:	441a      	add	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b02      	cmp	r3, #2
 800340e:	d105      	bne.n	800341c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d002      	beq.n	800341c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	3b01      	subs	r3, #1
 800341a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1c5a      	adds	r2, r3, #1
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003424:	697b      	ldr	r3, [r7, #20]
}
 8003426:	4618      	mov	r0, r3
 8003428:	3718      	adds	r7, #24
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b082      	sub	sp, #8
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
 8003436:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	2b00      	cmp	r3, #0
 800343e:	d018      	beq.n	8003472 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68da      	ldr	r2, [r3, #12]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003448:	441a      	add	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68da      	ldr	r2, [r3, #12]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	429a      	cmp	r2, r3
 8003458:	d303      	bcc.n	8003462 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68d9      	ldr	r1, [r3, #12]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	461a      	mov	r2, r3
 800346c:	6838      	ldr	r0, [r7, #0]
 800346e:	f001 ff4f 	bl	8005310 <memcpy>
	}
}
 8003472:	bf00      	nop
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b084      	sub	sp, #16
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003482:	f001 fc2b 	bl	8004cdc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800348c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800348e:	e011      	b.n	80034b4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	2b00      	cmp	r3, #0
 8003496:	d012      	beq.n	80034be <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3324      	adds	r3, #36	; 0x24
 800349c:	4618      	mov	r0, r3
 800349e:	f000 fd0b 	bl	8003eb8 <xTaskRemoveFromEventList>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80034a8:	f000 fdde 	bl	8004068 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80034ac:	7bfb      	ldrb	r3, [r7, #15]
 80034ae:	3b01      	subs	r3, #1
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80034b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	dce9      	bgt.n	8003490 <prvUnlockQueue+0x16>
 80034bc:	e000      	b.n	80034c0 <prvUnlockQueue+0x46>
					break;
 80034be:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	22ff      	movs	r2, #255	; 0xff
 80034c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80034c8:	f001 fc36 	bl	8004d38 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80034cc:	f001 fc06 	bl	8004cdc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034d6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034d8:	e011      	b.n	80034fe <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d012      	beq.n	8003508 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3310      	adds	r3, #16
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 fce6 	bl	8003eb8 <xTaskRemoveFromEventList>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80034f2:	f000 fdb9 	bl	8004068 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80034f6:	7bbb      	ldrb	r3, [r7, #14]
 80034f8:	3b01      	subs	r3, #1
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003502:	2b00      	cmp	r3, #0
 8003504:	dce9      	bgt.n	80034da <prvUnlockQueue+0x60>
 8003506:	e000      	b.n	800350a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003508:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	22ff      	movs	r2, #255	; 0xff
 800350e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003512:	f001 fc11 	bl	8004d38 <vPortExitCritical>
}
 8003516:	bf00      	nop
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b084      	sub	sp, #16
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003526:	f001 fbd9 	bl	8004cdc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352e:	2b00      	cmp	r3, #0
 8003530:	d102      	bne.n	8003538 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003532:	2301      	movs	r3, #1
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	e001      	b.n	800353c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003538:	2300      	movs	r3, #0
 800353a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800353c:	f001 fbfc 	bl	8004d38 <vPortExitCritical>

	return xReturn;
 8003540:	68fb      	ldr	r3, [r7, #12]
}
 8003542:	4618      	mov	r0, r3
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b084      	sub	sp, #16
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003552:	f001 fbc3 	bl	8004cdc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355e:	429a      	cmp	r2, r3
 8003560:	d102      	bne.n	8003568 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003562:	2301      	movs	r3, #1
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	e001      	b.n	800356c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003568:	2300      	movs	r3, #0
 800356a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800356c:	f001 fbe4 	bl	8004d38 <vPortExitCritical>

	return xReturn;
 8003570:	68fb      	ldr	r3, [r7, #12]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
	...

0800357c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003586:	2300      	movs	r3, #0
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	e014      	b.n	80035b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800358c:	4a0e      	ldr	r2, [pc, #56]	; (80035c8 <vQueueAddToRegistry+0x4c>)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10b      	bne.n	80035b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003598:	490b      	ldr	r1, [pc, #44]	; (80035c8 <vQueueAddToRegistry+0x4c>)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80035a2:	4a09      	ldr	r2, [pc, #36]	; (80035c8 <vQueueAddToRegistry+0x4c>)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	4413      	add	r3, r2
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80035ae:	e005      	b.n	80035bc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	3301      	adds	r3, #1
 80035b4:	60fb      	str	r3, [r7, #12]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2b07      	cmp	r3, #7
 80035ba:	d9e7      	bls.n	800358c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80035bc:	bf00      	nop
 80035be:	3714      	adds	r7, #20
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	200045f0 	.word	0x200045f0

080035cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80035dc:	f001 fb7e 	bl	8004cdc <vPortEnterCritical>
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035e6:	b25b      	sxtb	r3, r3
 80035e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ec:	d103      	bne.n	80035f6 <vQueueWaitForMessageRestricted+0x2a>
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035fc:	b25b      	sxtb	r3, r3
 80035fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003602:	d103      	bne.n	800360c <vQueueWaitForMessageRestricted+0x40>
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800360c:	f001 fb94 	bl	8004d38 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003614:	2b00      	cmp	r3, #0
 8003616:	d106      	bne.n	8003626 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	3324      	adds	r3, #36	; 0x24
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	68b9      	ldr	r1, [r7, #8]
 8003620:	4618      	mov	r0, r3
 8003622:	f000 fc1f 	bl	8003e64 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003626:	6978      	ldr	r0, [r7, #20]
 8003628:	f7ff ff27 	bl	800347a <prvUnlockQueue>
	}
 800362c:	bf00      	nop
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003634:	b580      	push	{r7, lr}
 8003636:	b08e      	sub	sp, #56	; 0x38
 8003638:	af04      	add	r7, sp, #16
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
 8003640:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003644:	2b00      	cmp	r3, #0
 8003646:	d109      	bne.n	800365c <xTaskCreateStatic+0x28>
	__asm volatile
 8003648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364c:	f383 8811 	msr	BASEPRI, r3
 8003650:	f3bf 8f6f 	isb	sy
 8003654:	f3bf 8f4f 	dsb	sy
 8003658:	623b      	str	r3, [r7, #32]
 800365a:	e7fe      	b.n	800365a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800365c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365e:	2b00      	cmp	r3, #0
 8003660:	d109      	bne.n	8003676 <xTaskCreateStatic+0x42>
 8003662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003666:	f383 8811 	msr	BASEPRI, r3
 800366a:	f3bf 8f6f 	isb	sy
 800366e:	f3bf 8f4f 	dsb	sy
 8003672:	61fb      	str	r3, [r7, #28]
 8003674:	e7fe      	b.n	8003674 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003676:	2354      	movs	r3, #84	; 0x54
 8003678:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	2b54      	cmp	r3, #84	; 0x54
 800367e:	d009      	beq.n	8003694 <xTaskCreateStatic+0x60>
 8003680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003684:	f383 8811 	msr	BASEPRI, r3
 8003688:	f3bf 8f6f 	isb	sy
 800368c:	f3bf 8f4f 	dsb	sy
 8003690:	61bb      	str	r3, [r7, #24]
 8003692:	e7fe      	b.n	8003692 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003694:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003698:	2b00      	cmp	r3, #0
 800369a:	d01e      	beq.n	80036da <xTaskCreateStatic+0xa6>
 800369c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d01b      	beq.n	80036da <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80036a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036aa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80036ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80036b4:	2300      	movs	r3, #0
 80036b6:	9303      	str	r3, [sp, #12]
 80036b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ba:	9302      	str	r3, [sp, #8]
 80036bc:	f107 0314 	add.w	r3, r7, #20
 80036c0:	9301      	str	r3, [sp, #4]
 80036c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	68b9      	ldr	r1, [r7, #8]
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f000 f850 	bl	8003772 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036d4:	f000 f8d4 	bl	8003880 <prvAddNewTaskToReadyList>
 80036d8:	e001      	b.n	80036de <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80036da:	2300      	movs	r3, #0
 80036dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80036de:	697b      	ldr	r3, [r7, #20]
	}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3728      	adds	r7, #40	; 0x28
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b08c      	sub	sp, #48	; 0x30
 80036ec:	af04      	add	r7, sp, #16
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	603b      	str	r3, [r7, #0]
 80036f4:	4613      	mov	r3, r2
 80036f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80036f8:	88fb      	ldrh	r3, [r7, #6]
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4618      	mov	r0, r3
 80036fe:	f001 fc07 	bl	8004f10 <pvPortMalloc>
 8003702:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00e      	beq.n	8003728 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800370a:	2054      	movs	r0, #84	; 0x54
 800370c:	f001 fc00 	bl	8004f10 <pvPortMalloc>
 8003710:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d003      	beq.n	8003720 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	631a      	str	r2, [r3, #48]	; 0x30
 800371e:	e005      	b.n	800372c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003720:	6978      	ldr	r0, [r7, #20]
 8003722:	f001 fcb7 	bl	8005094 <vPortFree>
 8003726:	e001      	b.n	800372c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003728:	2300      	movs	r3, #0
 800372a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d017      	beq.n	8003762 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800373a:	88fa      	ldrh	r2, [r7, #6]
 800373c:	2300      	movs	r3, #0
 800373e:	9303      	str	r3, [sp, #12]
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	9302      	str	r3, [sp, #8]
 8003744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003746:	9301      	str	r3, [sp, #4]
 8003748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	68b9      	ldr	r1, [r7, #8]
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 f80e 	bl	8003772 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003756:	69f8      	ldr	r0, [r7, #28]
 8003758:	f000 f892 	bl	8003880 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800375c:	2301      	movs	r3, #1
 800375e:	61bb      	str	r3, [r7, #24]
 8003760:	e002      	b.n	8003768 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003762:	f04f 33ff 	mov.w	r3, #4294967295
 8003766:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003768:	69bb      	ldr	r3, [r7, #24]
	}
 800376a:	4618      	mov	r0, r3
 800376c:	3720      	adds	r7, #32
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b088      	sub	sp, #32
 8003776:	af00      	add	r7, sp, #0
 8003778:	60f8      	str	r0, [r7, #12]
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	607a      	str	r2, [r7, #4]
 800377e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003782:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800378a:	3b01      	subs	r3, #1
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	f023 0307 	bic.w	r3, r3, #7
 8003798:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d009      	beq.n	80037b8 <prvInitialiseNewTask+0x46>
 80037a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a8:	f383 8811 	msr	BASEPRI, r3
 80037ac:	f3bf 8f6f 	isb	sy
 80037b0:	f3bf 8f4f 	dsb	sy
 80037b4:	617b      	str	r3, [r7, #20]
 80037b6:	e7fe      	b.n	80037b6 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d01f      	beq.n	80037fe <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037be:	2300      	movs	r3, #0
 80037c0:	61fb      	str	r3, [r7, #28]
 80037c2:	e012      	b.n	80037ea <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	4413      	add	r3, r2
 80037ca:	7819      	ldrb	r1, [r3, #0]
 80037cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	4413      	add	r3, r2
 80037d2:	3334      	adds	r3, #52	; 0x34
 80037d4:	460a      	mov	r2, r1
 80037d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	4413      	add	r3, r2
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d006      	beq.n	80037f2 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	3301      	adds	r3, #1
 80037e8:	61fb      	str	r3, [r7, #28]
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	2b0f      	cmp	r3, #15
 80037ee:	d9e9      	bls.n	80037c4 <prvInitialiseNewTask+0x52>
 80037f0:	e000      	b.n	80037f4 <prvInitialiseNewTask+0x82>
			{
				break;
 80037f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037fc:	e003      	b.n	8003806 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80037fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003800:	2200      	movs	r2, #0
 8003802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003808:	2b06      	cmp	r3, #6
 800380a:	d901      	bls.n	8003810 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800380c:	2306      	movs	r3, #6
 800380e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003812:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003814:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003818:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800381a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800381c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381e:	2200      	movs	r2, #0
 8003820:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003824:	3304      	adds	r3, #4
 8003826:	4618      	mov	r0, r3
 8003828:	f7ff f8e1 	bl	80029ee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800382c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382e:	3318      	adds	r3, #24
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff f8dc 	bl	80029ee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800383a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800383c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383e:	f1c3 0207 	rsb	r2, r3, #7
 8003842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003844:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800384a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800384c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384e:	2200      	movs	r2, #0
 8003850:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	68f9      	ldr	r1, [r7, #12]
 800385e:	69b8      	ldr	r0, [r7, #24]
 8003860:	f001 f916 	bl	8004a90 <pxPortInitialiseStack>
 8003864:	4602      	mov	r2, r0
 8003866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003868:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800386a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386c:	2b00      	cmp	r3, #0
 800386e:	d002      	beq.n	8003876 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003874:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003876:	bf00      	nop
 8003878:	3720      	adds	r7, #32
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
	...

08003880 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003888:	f001 fa28 	bl	8004cdc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800388c:	4b2a      	ldr	r3, [pc, #168]	; (8003938 <prvAddNewTaskToReadyList+0xb8>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	3301      	adds	r3, #1
 8003892:	4a29      	ldr	r2, [pc, #164]	; (8003938 <prvAddNewTaskToReadyList+0xb8>)
 8003894:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003896:	4b29      	ldr	r3, [pc, #164]	; (800393c <prvAddNewTaskToReadyList+0xbc>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d109      	bne.n	80038b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800389e:	4a27      	ldr	r2, [pc, #156]	; (800393c <prvAddNewTaskToReadyList+0xbc>)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038a4:	4b24      	ldr	r3, [pc, #144]	; (8003938 <prvAddNewTaskToReadyList+0xb8>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d110      	bne.n	80038ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80038ac:	f000 fc00 	bl	80040b0 <prvInitialiseTaskLists>
 80038b0:	e00d      	b.n	80038ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80038b2:	4b23      	ldr	r3, [pc, #140]	; (8003940 <prvAddNewTaskToReadyList+0xc0>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d109      	bne.n	80038ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80038ba:	4b20      	ldr	r3, [pc, #128]	; (800393c <prvAddNewTaskToReadyList+0xbc>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d802      	bhi.n	80038ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80038c8:	4a1c      	ldr	r2, [pc, #112]	; (800393c <prvAddNewTaskToReadyList+0xbc>)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80038ce:	4b1d      	ldr	r3, [pc, #116]	; (8003944 <prvAddNewTaskToReadyList+0xc4>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	3301      	adds	r3, #1
 80038d4:	4a1b      	ldr	r2, [pc, #108]	; (8003944 <prvAddNewTaskToReadyList+0xc4>)
 80038d6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038dc:	2201      	movs	r2, #1
 80038de:	409a      	lsls	r2, r3
 80038e0:	4b19      	ldr	r3, [pc, #100]	; (8003948 <prvAddNewTaskToReadyList+0xc8>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	4a18      	ldr	r2, [pc, #96]	; (8003948 <prvAddNewTaskToReadyList+0xc8>)
 80038e8:	6013      	str	r3, [r2, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ee:	4613      	mov	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4413      	add	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4a15      	ldr	r2, [pc, #84]	; (800394c <prvAddNewTaskToReadyList+0xcc>)
 80038f8:	441a      	add	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	3304      	adds	r3, #4
 80038fe:	4619      	mov	r1, r3
 8003900:	4610      	mov	r0, r2
 8003902:	f7ff f881 	bl	8002a08 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003906:	f001 fa17 	bl	8004d38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800390a:	4b0d      	ldr	r3, [pc, #52]	; (8003940 <prvAddNewTaskToReadyList+0xc0>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00e      	beq.n	8003930 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003912:	4b0a      	ldr	r3, [pc, #40]	; (800393c <prvAddNewTaskToReadyList+0xbc>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391c:	429a      	cmp	r2, r3
 800391e:	d207      	bcs.n	8003930 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003920:	4b0b      	ldr	r3, [pc, #44]	; (8003950 <prvAddNewTaskToReadyList+0xd0>)
 8003922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	f3bf 8f4f 	dsb	sy
 800392c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003930:	bf00      	nop
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	2000083c 	.word	0x2000083c
 800393c:	2000073c 	.word	0x2000073c
 8003940:	20000848 	.word	0x20000848
 8003944:	20000858 	.word	0x20000858
 8003948:	20000844 	.word	0x20000844
 800394c:	20000740 	.word	0x20000740
 8003950:	e000ed04 	.word	0xe000ed04

08003954 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800395c:	2300      	movs	r3, #0
 800395e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d016      	beq.n	8003994 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003966:	4b13      	ldr	r3, [pc, #76]	; (80039b4 <vTaskDelay+0x60>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d009      	beq.n	8003982 <vTaskDelay+0x2e>
 800396e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003972:	f383 8811 	msr	BASEPRI, r3
 8003976:	f3bf 8f6f 	isb	sy
 800397a:	f3bf 8f4f 	dsb	sy
 800397e:	60bb      	str	r3, [r7, #8]
 8003980:	e7fe      	b.n	8003980 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003982:	f000 f87f 	bl	8003a84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003986:	2100      	movs	r1, #0
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 fced 	bl	8004368 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800398e:	f000 f887 	bl	8003aa0 <xTaskResumeAll>
 8003992:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d107      	bne.n	80039aa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800399a:	4b07      	ldr	r3, [pc, #28]	; (80039b8 <vTaskDelay+0x64>)
 800399c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039a0:	601a      	str	r2, [r3, #0]
 80039a2:	f3bf 8f4f 	dsb	sy
 80039a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80039aa:	bf00      	nop
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	20000864 	.word	0x20000864
 80039b8:	e000ed04 	.word	0xe000ed04

080039bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b08a      	sub	sp, #40	; 0x28
 80039c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80039c2:	2300      	movs	r3, #0
 80039c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80039c6:	2300      	movs	r3, #0
 80039c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80039ca:	463a      	mov	r2, r7
 80039cc:	1d39      	adds	r1, r7, #4
 80039ce:	f107 0308 	add.w	r3, r7, #8
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7fc fddc 	bl	8000590 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80039d8:	6839      	ldr	r1, [r7, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68ba      	ldr	r2, [r7, #8]
 80039de:	9202      	str	r2, [sp, #8]
 80039e0:	9301      	str	r3, [sp, #4]
 80039e2:	2300      	movs	r3, #0
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	2300      	movs	r3, #0
 80039e8:	460a      	mov	r2, r1
 80039ea:	4920      	ldr	r1, [pc, #128]	; (8003a6c <vTaskStartScheduler+0xb0>)
 80039ec:	4820      	ldr	r0, [pc, #128]	; (8003a70 <vTaskStartScheduler+0xb4>)
 80039ee:	f7ff fe21 	bl	8003634 <xTaskCreateStatic>
 80039f2:	4602      	mov	r2, r0
 80039f4:	4b1f      	ldr	r3, [pc, #124]	; (8003a74 <vTaskStartScheduler+0xb8>)
 80039f6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80039f8:	4b1e      	ldr	r3, [pc, #120]	; (8003a74 <vTaskStartScheduler+0xb8>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a00:	2301      	movs	r3, #1
 8003a02:	617b      	str	r3, [r7, #20]
 8003a04:	e001      	b.n	8003a0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a06:	2300      	movs	r3, #0
 8003a08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d102      	bne.n	8003a16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003a10:	f000 fd10 	bl	8004434 <xTimerCreateTimerTask>
 8003a14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d115      	bne.n	8003a48 <vTaskStartScheduler+0x8c>
 8003a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a20:	f383 8811 	msr	BASEPRI, r3
 8003a24:	f3bf 8f6f 	isb	sy
 8003a28:	f3bf 8f4f 	dsb	sy
 8003a2c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a2e:	4b12      	ldr	r3, [pc, #72]	; (8003a78 <vTaskStartScheduler+0xbc>)
 8003a30:	f04f 32ff 	mov.w	r2, #4294967295
 8003a34:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a36:	4b11      	ldr	r3, [pc, #68]	; (8003a7c <vTaskStartScheduler+0xc0>)
 8003a38:	2201      	movs	r2, #1
 8003a3a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a3c:	4b10      	ldr	r3, [pc, #64]	; (8003a80 <vTaskStartScheduler+0xc4>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a42:	f001 f8ad 	bl	8004ba0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a46:	e00d      	b.n	8003a64 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4e:	d109      	bne.n	8003a64 <vTaskStartScheduler+0xa8>
 8003a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a54:	f383 8811 	msr	BASEPRI, r3
 8003a58:	f3bf 8f6f 	isb	sy
 8003a5c:	f3bf 8f4f 	dsb	sy
 8003a60:	60fb      	str	r3, [r7, #12]
 8003a62:	e7fe      	b.n	8003a62 <vTaskStartScheduler+0xa6>
}
 8003a64:	bf00      	nop
 8003a66:	3718      	adds	r7, #24
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	08005c38 	.word	0x08005c38
 8003a70:	08004081 	.word	0x08004081
 8003a74:	20000860 	.word	0x20000860
 8003a78:	2000085c 	.word	0x2000085c
 8003a7c:	20000848 	.word	0x20000848
 8003a80:	20000840 	.word	0x20000840

08003a84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003a88:	4b04      	ldr	r3, [pc, #16]	; (8003a9c <vTaskSuspendAll+0x18>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	4a03      	ldr	r2, [pc, #12]	; (8003a9c <vTaskSuspendAll+0x18>)
 8003a90:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003a92:	bf00      	nop
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	20000864 	.word	0x20000864

08003aa0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003aae:	4b41      	ldr	r3, [pc, #260]	; (8003bb4 <xTaskResumeAll+0x114>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d109      	bne.n	8003aca <xTaskResumeAll+0x2a>
 8003ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aba:	f383 8811 	msr	BASEPRI, r3
 8003abe:	f3bf 8f6f 	isb	sy
 8003ac2:	f3bf 8f4f 	dsb	sy
 8003ac6:	603b      	str	r3, [r7, #0]
 8003ac8:	e7fe      	b.n	8003ac8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003aca:	f001 f907 	bl	8004cdc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003ace:	4b39      	ldr	r3, [pc, #228]	; (8003bb4 <xTaskResumeAll+0x114>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	4a37      	ldr	r2, [pc, #220]	; (8003bb4 <xTaskResumeAll+0x114>)
 8003ad6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ad8:	4b36      	ldr	r3, [pc, #216]	; (8003bb4 <xTaskResumeAll+0x114>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d161      	bne.n	8003ba4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ae0:	4b35      	ldr	r3, [pc, #212]	; (8003bb8 <xTaskResumeAll+0x118>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d05d      	beq.n	8003ba4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ae8:	e02e      	b.n	8003b48 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003aea:	4b34      	ldr	r3, [pc, #208]	; (8003bbc <xTaskResumeAll+0x11c>)
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	3318      	adds	r3, #24
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fe ffe3 	bl	8002ac2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	3304      	adds	r3, #4
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7fe ffde 	bl	8002ac2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	409a      	lsls	r2, r3
 8003b0e:	4b2c      	ldr	r3, [pc, #176]	; (8003bc0 <xTaskResumeAll+0x120>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	4a2a      	ldr	r2, [pc, #168]	; (8003bc0 <xTaskResumeAll+0x120>)
 8003b16:	6013      	str	r3, [r2, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4a27      	ldr	r2, [pc, #156]	; (8003bc4 <xTaskResumeAll+0x124>)
 8003b26:	441a      	add	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	3304      	adds	r3, #4
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4610      	mov	r0, r2
 8003b30:	f7fe ff6a 	bl	8002a08 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b38:	4b23      	ldr	r3, [pc, #140]	; (8003bc8 <xTaskResumeAll+0x128>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d302      	bcc.n	8003b48 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003b42:	4b22      	ldr	r3, [pc, #136]	; (8003bcc <xTaskResumeAll+0x12c>)
 8003b44:	2201      	movs	r2, #1
 8003b46:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b48:	4b1c      	ldr	r3, [pc, #112]	; (8003bbc <xTaskResumeAll+0x11c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1cc      	bne.n	8003aea <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b56:	f000 fb45 	bl	80041e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003b5a:	4b1d      	ldr	r3, [pc, #116]	; (8003bd0 <xTaskResumeAll+0x130>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d010      	beq.n	8003b88 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b66:	f000 f847 	bl	8003bf8 <xTaskIncrementTick>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d002      	beq.n	8003b76 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003b70:	4b16      	ldr	r3, [pc, #88]	; (8003bcc <xTaskResumeAll+0x12c>)
 8003b72:	2201      	movs	r2, #1
 8003b74:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1f1      	bne.n	8003b66 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003b82:	4b13      	ldr	r3, [pc, #76]	; (8003bd0 <xTaskResumeAll+0x130>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b88:	4b10      	ldr	r3, [pc, #64]	; (8003bcc <xTaskResumeAll+0x12c>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d009      	beq.n	8003ba4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003b90:	2301      	movs	r3, #1
 8003b92:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003b94:	4b0f      	ldr	r3, [pc, #60]	; (8003bd4 <xTaskResumeAll+0x134>)
 8003b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b9a:	601a      	str	r2, [r3, #0]
 8003b9c:	f3bf 8f4f 	dsb	sy
 8003ba0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ba4:	f001 f8c8 	bl	8004d38 <vPortExitCritical>

	return xAlreadyYielded;
 8003ba8:	68bb      	ldr	r3, [r7, #8]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20000864 	.word	0x20000864
 8003bb8:	2000083c 	.word	0x2000083c
 8003bbc:	200007fc 	.word	0x200007fc
 8003bc0:	20000844 	.word	0x20000844
 8003bc4:	20000740 	.word	0x20000740
 8003bc8:	2000073c 	.word	0x2000073c
 8003bcc:	20000850 	.word	0x20000850
 8003bd0:	2000084c 	.word	0x2000084c
 8003bd4:	e000ed04 	.word	0xe000ed04

08003bd8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003bde:	4b05      	ldr	r3, [pc, #20]	; (8003bf4 <xTaskGetTickCount+0x1c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003be4:	687b      	ldr	r3, [r7, #4]
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	20000840 	.word	0x20000840

08003bf8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c02:	4b4e      	ldr	r3, [pc, #312]	; (8003d3c <xTaskIncrementTick+0x144>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f040 8087 	bne.w	8003d1a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c0c:	4b4c      	ldr	r3, [pc, #304]	; (8003d40 <xTaskIncrementTick+0x148>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	3301      	adds	r3, #1
 8003c12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c14:	4a4a      	ldr	r2, [pc, #296]	; (8003d40 <xTaskIncrementTick+0x148>)
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d11f      	bne.n	8003c60 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c20:	4b48      	ldr	r3, [pc, #288]	; (8003d44 <xTaskIncrementTick+0x14c>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d009      	beq.n	8003c3e <xTaskIncrementTick+0x46>
 8003c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2e:	f383 8811 	msr	BASEPRI, r3
 8003c32:	f3bf 8f6f 	isb	sy
 8003c36:	f3bf 8f4f 	dsb	sy
 8003c3a:	603b      	str	r3, [r7, #0]
 8003c3c:	e7fe      	b.n	8003c3c <xTaskIncrementTick+0x44>
 8003c3e:	4b41      	ldr	r3, [pc, #260]	; (8003d44 <xTaskIncrementTick+0x14c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	4b40      	ldr	r3, [pc, #256]	; (8003d48 <xTaskIncrementTick+0x150>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a3e      	ldr	r2, [pc, #248]	; (8003d44 <xTaskIncrementTick+0x14c>)
 8003c4a:	6013      	str	r3, [r2, #0]
 8003c4c:	4a3e      	ldr	r2, [pc, #248]	; (8003d48 <xTaskIncrementTick+0x150>)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6013      	str	r3, [r2, #0]
 8003c52:	4b3e      	ldr	r3, [pc, #248]	; (8003d4c <xTaskIncrementTick+0x154>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	3301      	adds	r3, #1
 8003c58:	4a3c      	ldr	r2, [pc, #240]	; (8003d4c <xTaskIncrementTick+0x154>)
 8003c5a:	6013      	str	r3, [r2, #0]
 8003c5c:	f000 fac2 	bl	80041e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c60:	4b3b      	ldr	r3, [pc, #236]	; (8003d50 <xTaskIncrementTick+0x158>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d348      	bcc.n	8003cfc <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c6a:	4b36      	ldr	r3, [pc, #216]	; (8003d44 <xTaskIncrementTick+0x14c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d104      	bne.n	8003c7e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c74:	4b36      	ldr	r3, [pc, #216]	; (8003d50 <xTaskIncrementTick+0x158>)
 8003c76:	f04f 32ff 	mov.w	r2, #4294967295
 8003c7a:	601a      	str	r2, [r3, #0]
					break;
 8003c7c:	e03e      	b.n	8003cfc <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c7e:	4b31      	ldr	r3, [pc, #196]	; (8003d44 <xTaskIncrementTick+0x14c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d203      	bcs.n	8003c9e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c96:	4a2e      	ldr	r2, [pc, #184]	; (8003d50 <xTaskIncrementTick+0x158>)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003c9c:	e02e      	b.n	8003cfc <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	3304      	adds	r3, #4
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7fe ff0d 	bl	8002ac2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d004      	beq.n	8003cba <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	3318      	adds	r3, #24
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7fe ff04 	bl	8002ac2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	409a      	lsls	r2, r3
 8003cc2:	4b24      	ldr	r3, [pc, #144]	; (8003d54 <xTaskIncrementTick+0x15c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	4a22      	ldr	r2, [pc, #136]	; (8003d54 <xTaskIncrementTick+0x15c>)
 8003cca:	6013      	str	r3, [r2, #0]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	4413      	add	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4a1f      	ldr	r2, [pc, #124]	; (8003d58 <xTaskIncrementTick+0x160>)
 8003cda:	441a      	add	r2, r3
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	3304      	adds	r3, #4
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	4610      	mov	r0, r2
 8003ce4:	f7fe fe90 	bl	8002a08 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cec:	4b1b      	ldr	r3, [pc, #108]	; (8003d5c <xTaskIncrementTick+0x164>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d3b9      	bcc.n	8003c6a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cfa:	e7b6      	b.n	8003c6a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003cfc:	4b17      	ldr	r3, [pc, #92]	; (8003d5c <xTaskIncrementTick+0x164>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d02:	4915      	ldr	r1, [pc, #84]	; (8003d58 <xTaskIncrementTick+0x160>)
 8003d04:	4613      	mov	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d907      	bls.n	8003d24 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8003d14:	2301      	movs	r3, #1
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	e004      	b.n	8003d24 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003d1a:	4b11      	ldr	r3, [pc, #68]	; (8003d60 <xTaskIncrementTick+0x168>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	4a0f      	ldr	r2, [pc, #60]	; (8003d60 <xTaskIncrementTick+0x168>)
 8003d22:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003d24:	4b0f      	ldr	r3, [pc, #60]	; (8003d64 <xTaskIncrementTick+0x16c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003d30:	697b      	ldr	r3, [r7, #20]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3718      	adds	r7, #24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	20000864 	.word	0x20000864
 8003d40:	20000840 	.word	0x20000840
 8003d44:	200007f4 	.word	0x200007f4
 8003d48:	200007f8 	.word	0x200007f8
 8003d4c:	20000854 	.word	0x20000854
 8003d50:	2000085c 	.word	0x2000085c
 8003d54:	20000844 	.word	0x20000844
 8003d58:	20000740 	.word	0x20000740
 8003d5c:	2000073c 	.word	0x2000073c
 8003d60:	2000084c 	.word	0x2000084c
 8003d64:	20000850 	.word	0x20000850

08003d68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d6e:	4b26      	ldr	r3, [pc, #152]	; (8003e08 <vTaskSwitchContext+0xa0>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d76:	4b25      	ldr	r3, [pc, #148]	; (8003e0c <vTaskSwitchContext+0xa4>)
 8003d78:	2201      	movs	r2, #1
 8003d7a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d7c:	e03e      	b.n	8003dfc <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003d7e:	4b23      	ldr	r3, [pc, #140]	; (8003e0c <vTaskSwitchContext+0xa4>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d84:	4b22      	ldr	r3, [pc, #136]	; (8003e10 <vTaskSwitchContext+0xa8>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	fab3 f383 	clz	r3, r3
 8003d90:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003d92:	7afb      	ldrb	r3, [r7, #11]
 8003d94:	f1c3 031f 	rsb	r3, r3, #31
 8003d98:	617b      	str	r3, [r7, #20]
 8003d9a:	491e      	ldr	r1, [pc, #120]	; (8003e14 <vTaskSwitchContext+0xac>)
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4413      	add	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	440b      	add	r3, r1
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d109      	bne.n	8003dc2 <vTaskSwitchContext+0x5a>
	__asm volatile
 8003dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db2:	f383 8811 	msr	BASEPRI, r3
 8003db6:	f3bf 8f6f 	isb	sy
 8003dba:	f3bf 8f4f 	dsb	sy
 8003dbe:	607b      	str	r3, [r7, #4]
 8003dc0:	e7fe      	b.n	8003dc0 <vTaskSwitchContext+0x58>
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4413      	add	r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	4a11      	ldr	r2, [pc, #68]	; (8003e14 <vTaskSwitchContext+0xac>)
 8003dce:	4413      	add	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	605a      	str	r2, [r3, #4]
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	3308      	adds	r3, #8
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d104      	bne.n	8003df2 <vTaskSwitchContext+0x8a>
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	605a      	str	r2, [r3, #4]
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	4a07      	ldr	r2, [pc, #28]	; (8003e18 <vTaskSwitchContext+0xb0>)
 8003dfa:	6013      	str	r3, [r2, #0]
}
 8003dfc:	bf00      	nop
 8003dfe:	371c      	adds	r7, #28
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	20000864 	.word	0x20000864
 8003e0c:	20000850 	.word	0x20000850
 8003e10:	20000844 	.word	0x20000844
 8003e14:	20000740 	.word	0x20000740
 8003e18:	2000073c 	.word	0x2000073c

08003e1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d109      	bne.n	8003e40 <vTaskPlaceOnEventList+0x24>
 8003e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e30:	f383 8811 	msr	BASEPRI, r3
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	60fb      	str	r3, [r7, #12]
 8003e3e:	e7fe      	b.n	8003e3e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e40:	4b07      	ldr	r3, [pc, #28]	; (8003e60 <vTaskPlaceOnEventList+0x44>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	3318      	adds	r3, #24
 8003e46:	4619      	mov	r1, r3
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7fe fe01 	bl	8002a50 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e4e:	2101      	movs	r1, #1
 8003e50:	6838      	ldr	r0, [r7, #0]
 8003e52:	f000 fa89 	bl	8004368 <prvAddCurrentTaskToDelayedList>
}
 8003e56:	bf00      	nop
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	2000073c 	.word	0x2000073c

08003e64 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d109      	bne.n	8003e8a <vTaskPlaceOnEventListRestricted+0x26>
 8003e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7a:	f383 8811 	msr	BASEPRI, r3
 8003e7e:	f3bf 8f6f 	isb	sy
 8003e82:	f3bf 8f4f 	dsb	sy
 8003e86:	617b      	str	r3, [r7, #20]
 8003e88:	e7fe      	b.n	8003e88 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e8a:	4b0a      	ldr	r3, [pc, #40]	; (8003eb4 <vTaskPlaceOnEventListRestricted+0x50>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	3318      	adds	r3, #24
 8003e90:	4619      	mov	r1, r3
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f7fe fdb8 	bl	8002a08 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d002      	beq.n	8003ea4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8003e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003ea2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003ea4:	6879      	ldr	r1, [r7, #4]
 8003ea6:	68b8      	ldr	r0, [r7, #8]
 8003ea8:	f000 fa5e 	bl	8004368 <prvAddCurrentTaskToDelayedList>
	}
 8003eac:	bf00      	nop
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	2000073c 	.word	0x2000073c

08003eb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d109      	bne.n	8003ee2 <xTaskRemoveFromEventList+0x2a>
 8003ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed2:	f383 8811 	msr	BASEPRI, r3
 8003ed6:	f3bf 8f6f 	isb	sy
 8003eda:	f3bf 8f4f 	dsb	sy
 8003ede:	60fb      	str	r3, [r7, #12]
 8003ee0:	e7fe      	b.n	8003ee0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	3318      	adds	r3, #24
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fe fdeb 	bl	8002ac2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003eec:	4b1d      	ldr	r3, [pc, #116]	; (8003f64 <xTaskRemoveFromEventList+0xac>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d11c      	bne.n	8003f2e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7fe fde2 	bl	8002ac2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f02:	2201      	movs	r2, #1
 8003f04:	409a      	lsls	r2, r3
 8003f06:	4b18      	ldr	r3, [pc, #96]	; (8003f68 <xTaskRemoveFromEventList+0xb0>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	4a16      	ldr	r2, [pc, #88]	; (8003f68 <xTaskRemoveFromEventList+0xb0>)
 8003f0e:	6013      	str	r3, [r2, #0]
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f14:	4613      	mov	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4a13      	ldr	r2, [pc, #76]	; (8003f6c <xTaskRemoveFromEventList+0xb4>)
 8003f1e:	441a      	add	r2, r3
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	3304      	adds	r3, #4
 8003f24:	4619      	mov	r1, r3
 8003f26:	4610      	mov	r0, r2
 8003f28:	f7fe fd6e 	bl	8002a08 <vListInsertEnd>
 8003f2c:	e005      	b.n	8003f3a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	3318      	adds	r3, #24
 8003f32:	4619      	mov	r1, r3
 8003f34:	480e      	ldr	r0, [pc, #56]	; (8003f70 <xTaskRemoveFromEventList+0xb8>)
 8003f36:	f7fe fd67 	bl	8002a08 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f3e:	4b0d      	ldr	r3, [pc, #52]	; (8003f74 <xTaskRemoveFromEventList+0xbc>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d905      	bls.n	8003f54 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003f4c:	4b0a      	ldr	r3, [pc, #40]	; (8003f78 <xTaskRemoveFromEventList+0xc0>)
 8003f4e:	2201      	movs	r2, #1
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	e001      	b.n	8003f58 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8003f54:	2300      	movs	r3, #0
 8003f56:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003f58:	697b      	ldr	r3, [r7, #20]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3718      	adds	r7, #24
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	20000864 	.word	0x20000864
 8003f68:	20000844 	.word	0x20000844
 8003f6c:	20000740 	.word	0x20000740
 8003f70:	200007fc 	.word	0x200007fc
 8003f74:	2000073c 	.word	0x2000073c
 8003f78:	20000850 	.word	0x20000850

08003f7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f84:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <vTaskInternalSetTimeOutState+0x24>)
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003f8c:	4b05      	ldr	r3, [pc, #20]	; (8003fa4 <vTaskInternalSetTimeOutState+0x28>)
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	605a      	str	r2, [r3, #4]
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	20000854 	.word	0x20000854
 8003fa4:	20000840 	.word	0x20000840

08003fa8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b088      	sub	sp, #32
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d109      	bne.n	8003fcc <xTaskCheckForTimeOut+0x24>
 8003fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fbc:	f383 8811 	msr	BASEPRI, r3
 8003fc0:	f3bf 8f6f 	isb	sy
 8003fc4:	f3bf 8f4f 	dsb	sy
 8003fc8:	613b      	str	r3, [r7, #16]
 8003fca:	e7fe      	b.n	8003fca <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d109      	bne.n	8003fe6 <xTaskCheckForTimeOut+0x3e>
 8003fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd6:	f383 8811 	msr	BASEPRI, r3
 8003fda:	f3bf 8f6f 	isb	sy
 8003fde:	f3bf 8f4f 	dsb	sy
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	e7fe      	b.n	8003fe4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003fe6:	f000 fe79 	bl	8004cdc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003fea:	4b1d      	ldr	r3, [pc, #116]	; (8004060 <xTaskCheckForTimeOut+0xb8>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004002:	d102      	bne.n	800400a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004004:	2300      	movs	r3, #0
 8004006:	61fb      	str	r3, [r7, #28]
 8004008:	e023      	b.n	8004052 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	4b15      	ldr	r3, [pc, #84]	; (8004064 <xTaskCheckForTimeOut+0xbc>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	429a      	cmp	r2, r3
 8004014:	d007      	beq.n	8004026 <xTaskCheckForTimeOut+0x7e>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	429a      	cmp	r2, r3
 800401e:	d302      	bcc.n	8004026 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004020:	2301      	movs	r3, #1
 8004022:	61fb      	str	r3, [r7, #28]
 8004024:	e015      	b.n	8004052 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	429a      	cmp	r2, r3
 800402e:	d20b      	bcs.n	8004048 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	1ad2      	subs	r2, r2, r3
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f7ff ff9d 	bl	8003f7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004042:	2300      	movs	r3, #0
 8004044:	61fb      	str	r3, [r7, #28]
 8004046:	e004      	b.n	8004052 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	2200      	movs	r2, #0
 800404c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800404e:	2301      	movs	r3, #1
 8004050:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004052:	f000 fe71 	bl	8004d38 <vPortExitCritical>

	return xReturn;
 8004056:	69fb      	ldr	r3, [r7, #28]
}
 8004058:	4618      	mov	r0, r3
 800405a:	3720      	adds	r7, #32
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	20000840 	.word	0x20000840
 8004064:	20000854 	.word	0x20000854

08004068 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004068:	b480      	push	{r7}
 800406a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800406c:	4b03      	ldr	r3, [pc, #12]	; (800407c <vTaskMissedYield+0x14>)
 800406e:	2201      	movs	r2, #1
 8004070:	601a      	str	r2, [r3, #0]
}
 8004072:	bf00      	nop
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr
 800407c:	20000850 	.word	0x20000850

08004080 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004088:	f000 f852 	bl	8004130 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800408c:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <prvIdleTask+0x28>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d9f9      	bls.n	8004088 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004094:	4b05      	ldr	r3, [pc, #20]	; (80040ac <prvIdleTask+0x2c>)
 8004096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800409a:	601a      	str	r2, [r3, #0]
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80040a4:	e7f0      	b.n	8004088 <prvIdleTask+0x8>
 80040a6:	bf00      	nop
 80040a8:	20000740 	.word	0x20000740
 80040ac:	e000ed04 	.word	0xe000ed04

080040b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040b6:	2300      	movs	r3, #0
 80040b8:	607b      	str	r3, [r7, #4]
 80040ba:	e00c      	b.n	80040d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	4613      	mov	r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	4413      	add	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4a12      	ldr	r2, [pc, #72]	; (8004110 <prvInitialiseTaskLists+0x60>)
 80040c8:	4413      	add	r3, r2
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fe fc6f 	bl	80029ae <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3301      	adds	r3, #1
 80040d4:	607b      	str	r3, [r7, #4]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b06      	cmp	r3, #6
 80040da:	d9ef      	bls.n	80040bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80040dc:	480d      	ldr	r0, [pc, #52]	; (8004114 <prvInitialiseTaskLists+0x64>)
 80040de:	f7fe fc66 	bl	80029ae <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80040e2:	480d      	ldr	r0, [pc, #52]	; (8004118 <prvInitialiseTaskLists+0x68>)
 80040e4:	f7fe fc63 	bl	80029ae <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80040e8:	480c      	ldr	r0, [pc, #48]	; (800411c <prvInitialiseTaskLists+0x6c>)
 80040ea:	f7fe fc60 	bl	80029ae <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80040ee:	480c      	ldr	r0, [pc, #48]	; (8004120 <prvInitialiseTaskLists+0x70>)
 80040f0:	f7fe fc5d 	bl	80029ae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80040f4:	480b      	ldr	r0, [pc, #44]	; (8004124 <prvInitialiseTaskLists+0x74>)
 80040f6:	f7fe fc5a 	bl	80029ae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80040fa:	4b0b      	ldr	r3, [pc, #44]	; (8004128 <prvInitialiseTaskLists+0x78>)
 80040fc:	4a05      	ldr	r2, [pc, #20]	; (8004114 <prvInitialiseTaskLists+0x64>)
 80040fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004100:	4b0a      	ldr	r3, [pc, #40]	; (800412c <prvInitialiseTaskLists+0x7c>)
 8004102:	4a05      	ldr	r2, [pc, #20]	; (8004118 <prvInitialiseTaskLists+0x68>)
 8004104:	601a      	str	r2, [r3, #0]
}
 8004106:	bf00      	nop
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	20000740 	.word	0x20000740
 8004114:	200007cc 	.word	0x200007cc
 8004118:	200007e0 	.word	0x200007e0
 800411c:	200007fc 	.word	0x200007fc
 8004120:	20000810 	.word	0x20000810
 8004124:	20000828 	.word	0x20000828
 8004128:	200007f4 	.word	0x200007f4
 800412c:	200007f8 	.word	0x200007f8

08004130 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004136:	e019      	b.n	800416c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004138:	f000 fdd0 	bl	8004cdc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800413c:	4b0f      	ldr	r3, [pc, #60]	; (800417c <prvCheckTasksWaitingTermination+0x4c>)
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	3304      	adds	r3, #4
 8004148:	4618      	mov	r0, r3
 800414a:	f7fe fcba 	bl	8002ac2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800414e:	4b0c      	ldr	r3, [pc, #48]	; (8004180 <prvCheckTasksWaitingTermination+0x50>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	3b01      	subs	r3, #1
 8004154:	4a0a      	ldr	r2, [pc, #40]	; (8004180 <prvCheckTasksWaitingTermination+0x50>)
 8004156:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004158:	4b0a      	ldr	r3, [pc, #40]	; (8004184 <prvCheckTasksWaitingTermination+0x54>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	3b01      	subs	r3, #1
 800415e:	4a09      	ldr	r2, [pc, #36]	; (8004184 <prvCheckTasksWaitingTermination+0x54>)
 8004160:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004162:	f000 fde9 	bl	8004d38 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f80e 	bl	8004188 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800416c:	4b05      	ldr	r3, [pc, #20]	; (8004184 <prvCheckTasksWaitingTermination+0x54>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1e1      	bne.n	8004138 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004174:	bf00      	nop
 8004176:	3708      	adds	r7, #8
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	20000810 	.word	0x20000810
 8004180:	2000083c 	.word	0x2000083c
 8004184:	20000824 	.word	0x20000824

08004188 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004196:	2b00      	cmp	r3, #0
 8004198:	d108      	bne.n	80041ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 ff78 	bl	8005094 <vPortFree>
				vPortFree( pxTCB );
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 ff75 	bl	8005094 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80041aa:	e017      	b.n	80041dc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d103      	bne.n	80041be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 ff6c 	bl	8005094 <vPortFree>
	}
 80041bc:	e00e      	b.n	80041dc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d009      	beq.n	80041dc <prvDeleteTCB+0x54>
 80041c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041cc:	f383 8811 	msr	BASEPRI, r3
 80041d0:	f3bf 8f6f 	isb	sy
 80041d4:	f3bf 8f4f 	dsb	sy
 80041d8:	60fb      	str	r3, [r7, #12]
 80041da:	e7fe      	b.n	80041da <prvDeleteTCB+0x52>
	}
 80041dc:	bf00      	nop
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041ea:	4b0c      	ldr	r3, [pc, #48]	; (800421c <prvResetNextTaskUnblockTime+0x38>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d104      	bne.n	80041fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80041f4:	4b0a      	ldr	r3, [pc, #40]	; (8004220 <prvResetNextTaskUnblockTime+0x3c>)
 80041f6:	f04f 32ff 	mov.w	r2, #4294967295
 80041fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80041fc:	e008      	b.n	8004210 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041fe:	4b07      	ldr	r3, [pc, #28]	; (800421c <prvResetNextTaskUnblockTime+0x38>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	4a04      	ldr	r2, [pc, #16]	; (8004220 <prvResetNextTaskUnblockTime+0x3c>)
 800420e:	6013      	str	r3, [r2, #0]
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	200007f4 	.word	0x200007f4
 8004220:	2000085c 	.word	0x2000085c

08004224 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800422a:	4b0b      	ldr	r3, [pc, #44]	; (8004258 <xTaskGetSchedulerState+0x34>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d102      	bne.n	8004238 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004232:	2301      	movs	r3, #1
 8004234:	607b      	str	r3, [r7, #4]
 8004236:	e008      	b.n	800424a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004238:	4b08      	ldr	r3, [pc, #32]	; (800425c <xTaskGetSchedulerState+0x38>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d102      	bne.n	8004246 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004240:	2302      	movs	r3, #2
 8004242:	607b      	str	r3, [r7, #4]
 8004244:	e001      	b.n	800424a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004246:	2300      	movs	r3, #0
 8004248:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800424a:	687b      	ldr	r3, [r7, #4]
	}
 800424c:	4618      	mov	r0, r3
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	20000848 	.word	0x20000848
 800425c:	20000864 	.word	0x20000864

08004260 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800426c:	2300      	movs	r3, #0
 800426e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d06c      	beq.n	8004350 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004276:	4b39      	ldr	r3, [pc, #228]	; (800435c <xTaskPriorityDisinherit+0xfc>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	429a      	cmp	r2, r3
 800427e:	d009      	beq.n	8004294 <xTaskPriorityDisinherit+0x34>
 8004280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004284:	f383 8811 	msr	BASEPRI, r3
 8004288:	f3bf 8f6f 	isb	sy
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	60fb      	str	r3, [r7, #12]
 8004292:	e7fe      	b.n	8004292 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004298:	2b00      	cmp	r3, #0
 800429a:	d109      	bne.n	80042b0 <xTaskPriorityDisinherit+0x50>
 800429c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a0:	f383 8811 	msr	BASEPRI, r3
 80042a4:	f3bf 8f6f 	isb	sy
 80042a8:	f3bf 8f4f 	dsb	sy
 80042ac:	60bb      	str	r3, [r7, #8]
 80042ae:	e7fe      	b.n	80042ae <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042b4:	1e5a      	subs	r2, r3, #1
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d044      	beq.n	8004350 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d140      	bne.n	8004350 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	3304      	adds	r3, #4
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fe fbf5 	bl	8002ac2 <uxListRemove>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d115      	bne.n	800430a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e2:	491f      	ldr	r1, [pc, #124]	; (8004360 <xTaskPriorityDisinherit+0x100>)
 80042e4:	4613      	mov	r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	440b      	add	r3, r1
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10a      	bne.n	800430a <xTaskPriorityDisinherit+0xaa>
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f8:	2201      	movs	r2, #1
 80042fa:	fa02 f303 	lsl.w	r3, r2, r3
 80042fe:	43da      	mvns	r2, r3
 8004300:	4b18      	ldr	r3, [pc, #96]	; (8004364 <xTaskPriorityDisinherit+0x104>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4013      	ands	r3, r2
 8004306:	4a17      	ldr	r2, [pc, #92]	; (8004364 <xTaskPriorityDisinherit+0x104>)
 8004308:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004316:	f1c3 0207 	rsb	r2, r3, #7
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004322:	2201      	movs	r2, #1
 8004324:	409a      	lsls	r2, r3
 8004326:	4b0f      	ldr	r3, [pc, #60]	; (8004364 <xTaskPriorityDisinherit+0x104>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4313      	orrs	r3, r2
 800432c:	4a0d      	ldr	r2, [pc, #52]	; (8004364 <xTaskPriorityDisinherit+0x104>)
 800432e:	6013      	str	r3, [r2, #0]
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004334:	4613      	mov	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4a08      	ldr	r2, [pc, #32]	; (8004360 <xTaskPriorityDisinherit+0x100>)
 800433e:	441a      	add	r2, r3
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	3304      	adds	r3, #4
 8004344:	4619      	mov	r1, r3
 8004346:	4610      	mov	r0, r2
 8004348:	f7fe fb5e 	bl	8002a08 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800434c:	2301      	movs	r3, #1
 800434e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004350:	697b      	ldr	r3, [r7, #20]
	}
 8004352:	4618      	mov	r0, r3
 8004354:	3718      	adds	r7, #24
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	2000073c 	.word	0x2000073c
 8004360:	20000740 	.word	0x20000740
 8004364:	20000844 	.word	0x20000844

08004368 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004372:	4b29      	ldr	r3, [pc, #164]	; (8004418 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004378:	4b28      	ldr	r3, [pc, #160]	; (800441c <prvAddCurrentTaskToDelayedList+0xb4>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	3304      	adds	r3, #4
 800437e:	4618      	mov	r0, r3
 8004380:	f7fe fb9f 	bl	8002ac2 <uxListRemove>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10b      	bne.n	80043a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800438a:	4b24      	ldr	r3, [pc, #144]	; (800441c <prvAddCurrentTaskToDelayedList+0xb4>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004390:	2201      	movs	r2, #1
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	43da      	mvns	r2, r3
 8004398:	4b21      	ldr	r3, [pc, #132]	; (8004420 <prvAddCurrentTaskToDelayedList+0xb8>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4013      	ands	r3, r2
 800439e:	4a20      	ldr	r2, [pc, #128]	; (8004420 <prvAddCurrentTaskToDelayedList+0xb8>)
 80043a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a8:	d10a      	bne.n	80043c0 <prvAddCurrentTaskToDelayedList+0x58>
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d007      	beq.n	80043c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043b0:	4b1a      	ldr	r3, [pc, #104]	; (800441c <prvAddCurrentTaskToDelayedList+0xb4>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	3304      	adds	r3, #4
 80043b6:	4619      	mov	r1, r3
 80043b8:	481a      	ldr	r0, [pc, #104]	; (8004424 <prvAddCurrentTaskToDelayedList+0xbc>)
 80043ba:	f7fe fb25 	bl	8002a08 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80043be:	e026      	b.n	800440e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4413      	add	r3, r2
 80043c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80043c8:	4b14      	ldr	r3, [pc, #80]	; (800441c <prvAddCurrentTaskToDelayedList+0xb4>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d209      	bcs.n	80043ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043d8:	4b13      	ldr	r3, [pc, #76]	; (8004428 <prvAddCurrentTaskToDelayedList+0xc0>)
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	4b0f      	ldr	r3, [pc, #60]	; (800441c <prvAddCurrentTaskToDelayedList+0xb4>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	3304      	adds	r3, #4
 80043e2:	4619      	mov	r1, r3
 80043e4:	4610      	mov	r0, r2
 80043e6:	f7fe fb33 	bl	8002a50 <vListInsert>
}
 80043ea:	e010      	b.n	800440e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043ec:	4b0f      	ldr	r3, [pc, #60]	; (800442c <prvAddCurrentTaskToDelayedList+0xc4>)
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	4b0a      	ldr	r3, [pc, #40]	; (800441c <prvAddCurrentTaskToDelayedList+0xb4>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	3304      	adds	r3, #4
 80043f6:	4619      	mov	r1, r3
 80043f8:	4610      	mov	r0, r2
 80043fa:	f7fe fb29 	bl	8002a50 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80043fe:	4b0c      	ldr	r3, [pc, #48]	; (8004430 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	429a      	cmp	r2, r3
 8004406:	d202      	bcs.n	800440e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004408:	4a09      	ldr	r2, [pc, #36]	; (8004430 <prvAddCurrentTaskToDelayedList+0xc8>)
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	6013      	str	r3, [r2, #0]
}
 800440e:	bf00      	nop
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	20000840 	.word	0x20000840
 800441c:	2000073c 	.word	0x2000073c
 8004420:	20000844 	.word	0x20000844
 8004424:	20000828 	.word	0x20000828
 8004428:	200007f8 	.word	0x200007f8
 800442c:	200007f4 	.word	0x200007f4
 8004430:	2000085c 	.word	0x2000085c

08004434 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b08a      	sub	sp, #40	; 0x28
 8004438:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800443a:	2300      	movs	r3, #0
 800443c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800443e:	f000 fae7 	bl	8004a10 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004442:	4b1c      	ldr	r3, [pc, #112]	; (80044b4 <xTimerCreateTimerTask+0x80>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d021      	beq.n	800448e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800444a:	2300      	movs	r3, #0
 800444c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800444e:	2300      	movs	r3, #0
 8004450:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004452:	1d3a      	adds	r2, r7, #4
 8004454:	f107 0108 	add.w	r1, r7, #8
 8004458:	f107 030c 	add.w	r3, r7, #12
 800445c:	4618      	mov	r0, r3
 800445e:	f7fc f8b1 	bl	80005c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004462:	6879      	ldr	r1, [r7, #4]
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	9202      	str	r2, [sp, #8]
 800446a:	9301      	str	r3, [sp, #4]
 800446c:	2302      	movs	r3, #2
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	2300      	movs	r3, #0
 8004472:	460a      	mov	r2, r1
 8004474:	4910      	ldr	r1, [pc, #64]	; (80044b8 <xTimerCreateTimerTask+0x84>)
 8004476:	4811      	ldr	r0, [pc, #68]	; (80044bc <xTimerCreateTimerTask+0x88>)
 8004478:	f7ff f8dc 	bl	8003634 <xTaskCreateStatic>
 800447c:	4602      	mov	r2, r0
 800447e:	4b10      	ldr	r3, [pc, #64]	; (80044c0 <xTimerCreateTimerTask+0x8c>)
 8004480:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004482:	4b0f      	ldr	r3, [pc, #60]	; (80044c0 <xTimerCreateTimerTask+0x8c>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d001      	beq.n	800448e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800448a:	2301      	movs	r3, #1
 800448c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d109      	bne.n	80044a8 <xTimerCreateTimerTask+0x74>
 8004494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004498:	f383 8811 	msr	BASEPRI, r3
 800449c:	f3bf 8f6f 	isb	sy
 80044a0:	f3bf 8f4f 	dsb	sy
 80044a4:	613b      	str	r3, [r7, #16]
 80044a6:	e7fe      	b.n	80044a6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80044a8:	697b      	ldr	r3, [r7, #20]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3718      	adds	r7, #24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	20000898 	.word	0x20000898
 80044b8:	08005c40 	.word	0x08005c40
 80044bc:	080045f5 	.word	0x080045f5
 80044c0:	2000089c 	.word	0x2000089c

080044c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b08a      	sub	sp, #40	; 0x28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
 80044d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80044d2:	2300      	movs	r3, #0
 80044d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d109      	bne.n	80044f0 <xTimerGenericCommand+0x2c>
 80044dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e0:	f383 8811 	msr	BASEPRI, r3
 80044e4:	f3bf 8f6f 	isb	sy
 80044e8:	f3bf 8f4f 	dsb	sy
 80044ec:	623b      	str	r3, [r7, #32]
 80044ee:	e7fe      	b.n	80044ee <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80044f0:	4b19      	ldr	r3, [pc, #100]	; (8004558 <xTimerGenericCommand+0x94>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d02a      	beq.n	800454e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2b05      	cmp	r3, #5
 8004508:	dc18      	bgt.n	800453c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800450a:	f7ff fe8b 	bl	8004224 <xTaskGetSchedulerState>
 800450e:	4603      	mov	r3, r0
 8004510:	2b02      	cmp	r3, #2
 8004512:	d109      	bne.n	8004528 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004514:	4b10      	ldr	r3, [pc, #64]	; (8004558 <xTimerGenericCommand+0x94>)
 8004516:	6818      	ldr	r0, [r3, #0]
 8004518:	f107 0114 	add.w	r1, r7, #20
 800451c:	2300      	movs	r3, #0
 800451e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004520:	f7fe fc34 	bl	8002d8c <xQueueGenericSend>
 8004524:	6278      	str	r0, [r7, #36]	; 0x24
 8004526:	e012      	b.n	800454e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004528:	4b0b      	ldr	r3, [pc, #44]	; (8004558 <xTimerGenericCommand+0x94>)
 800452a:	6818      	ldr	r0, [r3, #0]
 800452c:	f107 0114 	add.w	r1, r7, #20
 8004530:	2300      	movs	r3, #0
 8004532:	2200      	movs	r2, #0
 8004534:	f7fe fc2a 	bl	8002d8c <xQueueGenericSend>
 8004538:	6278      	str	r0, [r7, #36]	; 0x24
 800453a:	e008      	b.n	800454e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800453c:	4b06      	ldr	r3, [pc, #24]	; (8004558 <xTimerGenericCommand+0x94>)
 800453e:	6818      	ldr	r0, [r3, #0]
 8004540:	f107 0114 	add.w	r1, r7, #20
 8004544:	2300      	movs	r3, #0
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	f7fe fd1a 	bl	8002f80 <xQueueGenericSendFromISR>
 800454c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004550:	4618      	mov	r0, r3
 8004552:	3728      	adds	r7, #40	; 0x28
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	20000898 	.word	0x20000898

0800455c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b088      	sub	sp, #32
 8004560:	af02      	add	r7, sp, #8
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004566:	4b22      	ldr	r3, [pc, #136]	; (80045f0 <prvProcessExpiredTimer+0x94>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	3304      	adds	r3, #4
 8004574:	4618      	mov	r0, r3
 8004576:	f7fe faa4 	bl	8002ac2 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b00      	cmp	r3, #0
 8004586:	d021      	beq.n	80045cc <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	699a      	ldr	r2, [r3, #24]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	18d1      	adds	r1, r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	6978      	ldr	r0, [r7, #20]
 8004596:	f000 f8d1 	bl	800473c <prvInsertTimerInActiveList>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d01e      	beq.n	80045de <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80045a0:	2300      	movs	r3, #0
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	2300      	movs	r3, #0
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	2100      	movs	r1, #0
 80045aa:	6978      	ldr	r0, [r7, #20]
 80045ac:	f7ff ff8a 	bl	80044c4 <xTimerGenericCommand>
 80045b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d112      	bne.n	80045de <prvProcessExpiredTimer+0x82>
 80045b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045bc:	f383 8811 	msr	BASEPRI, r3
 80045c0:	f3bf 8f6f 	isb	sy
 80045c4:	f3bf 8f4f 	dsb	sy
 80045c8:	60fb      	str	r3, [r7, #12]
 80045ca:	e7fe      	b.n	80045ca <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80045d2:	f023 0301 	bic.w	r3, r3, #1
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	6978      	ldr	r0, [r7, #20]
 80045e4:	4798      	blx	r3
}
 80045e6:	bf00      	nop
 80045e8:	3718      	adds	r7, #24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	20000890 	.word	0x20000890

080045f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045fc:	f107 0308 	add.w	r3, r7, #8
 8004600:	4618      	mov	r0, r3
 8004602:	f000 f857 	bl	80046b4 <prvGetNextExpireTime>
 8004606:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	4619      	mov	r1, r3
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f000 f803 	bl	8004618 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004612:	f000 f8d5 	bl	80047c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004616:	e7f1      	b.n	80045fc <prvTimerTask+0x8>

08004618 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004622:	f7ff fa2f 	bl	8003a84 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004626:	f107 0308 	add.w	r3, r7, #8
 800462a:	4618      	mov	r0, r3
 800462c:	f000 f866 	bl	80046fc <prvSampleTimeNow>
 8004630:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d130      	bne.n	800469a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10a      	bne.n	8004654 <prvProcessTimerOrBlockTask+0x3c>
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	429a      	cmp	r2, r3
 8004644:	d806      	bhi.n	8004654 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004646:	f7ff fa2b 	bl	8003aa0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800464a:	68f9      	ldr	r1, [r7, #12]
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f7ff ff85 	bl	800455c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004652:	e024      	b.n	800469e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d008      	beq.n	800466c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800465a:	4b13      	ldr	r3, [pc, #76]	; (80046a8 <prvProcessTimerOrBlockTask+0x90>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <prvProcessTimerOrBlockTask+0x50>
 8004664:	2301      	movs	r3, #1
 8004666:	e000      	b.n	800466a <prvProcessTimerOrBlockTask+0x52>
 8004668:	2300      	movs	r3, #0
 800466a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800466c:	4b0f      	ldr	r3, [pc, #60]	; (80046ac <prvProcessTimerOrBlockTask+0x94>)
 800466e:	6818      	ldr	r0, [r3, #0]
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	4619      	mov	r1, r3
 800467a:	f7fe ffa7 	bl	80035cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800467e:	f7ff fa0f 	bl	8003aa0 <xTaskResumeAll>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10a      	bne.n	800469e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004688:	4b09      	ldr	r3, [pc, #36]	; (80046b0 <prvProcessTimerOrBlockTask+0x98>)
 800468a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800468e:	601a      	str	r2, [r3, #0]
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	f3bf 8f6f 	isb	sy
}
 8004698:	e001      	b.n	800469e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800469a:	f7ff fa01 	bl	8003aa0 <xTaskResumeAll>
}
 800469e:	bf00      	nop
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	20000894 	.word	0x20000894
 80046ac:	20000898 	.word	0x20000898
 80046b0:	e000ed04 	.word	0xe000ed04

080046b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80046bc:	4b0e      	ldr	r3, [pc, #56]	; (80046f8 <prvGetNextExpireTime+0x44>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <prvGetNextExpireTime+0x16>
 80046c6:	2201      	movs	r2, #1
 80046c8:	e000      	b.n	80046cc <prvGetNextExpireTime+0x18>
 80046ca:	2200      	movs	r2, #0
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d105      	bne.n	80046e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80046d8:	4b07      	ldr	r3, [pc, #28]	; (80046f8 <prvGetNextExpireTime+0x44>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	e001      	b.n	80046e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80046e8:	68fb      	ldr	r3, [r7, #12]
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3714      	adds	r7, #20
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	20000890 	.word	0x20000890

080046fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004704:	f7ff fa68 	bl	8003bd8 <xTaskGetTickCount>
 8004708:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800470a:	4b0b      	ldr	r3, [pc, #44]	; (8004738 <prvSampleTimeNow+0x3c>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	429a      	cmp	r2, r3
 8004712:	d205      	bcs.n	8004720 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004714:	f000 f918 	bl	8004948 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	601a      	str	r2, [r3, #0]
 800471e:	e002      	b.n	8004726 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004726:	4a04      	ldr	r2, [pc, #16]	; (8004738 <prvSampleTimeNow+0x3c>)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800472c:	68fb      	ldr	r3, [r7, #12]
}
 800472e:	4618      	mov	r0, r3
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	200008a0 	.word	0x200008a0

0800473c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
 8004748:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800474a:	2300      	movs	r3, #0
 800474c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800475a:	68ba      	ldr	r2, [r7, #8]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	429a      	cmp	r2, r3
 8004760:	d812      	bhi.n	8004788 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	1ad2      	subs	r2, r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	429a      	cmp	r2, r3
 800476e:	d302      	bcc.n	8004776 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004770:	2301      	movs	r3, #1
 8004772:	617b      	str	r3, [r7, #20]
 8004774:	e01b      	b.n	80047ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004776:	4b10      	ldr	r3, [pc, #64]	; (80047b8 <prvInsertTimerInActiveList+0x7c>)
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	3304      	adds	r3, #4
 800477e:	4619      	mov	r1, r3
 8004780:	4610      	mov	r0, r2
 8004782:	f7fe f965 	bl	8002a50 <vListInsert>
 8004786:	e012      	b.n	80047ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	429a      	cmp	r2, r3
 800478e:	d206      	bcs.n	800479e <prvInsertTimerInActiveList+0x62>
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	429a      	cmp	r2, r3
 8004796:	d302      	bcc.n	800479e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004798:	2301      	movs	r3, #1
 800479a:	617b      	str	r3, [r7, #20]
 800479c:	e007      	b.n	80047ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800479e:	4b07      	ldr	r3, [pc, #28]	; (80047bc <prvInsertTimerInActiveList+0x80>)
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	3304      	adds	r3, #4
 80047a6:	4619      	mov	r1, r3
 80047a8:	4610      	mov	r0, r2
 80047aa:	f7fe f951 	bl	8002a50 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80047ae:	697b      	ldr	r3, [r7, #20]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3718      	adds	r7, #24
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	20000894 	.word	0x20000894
 80047bc:	20000890 	.word	0x20000890

080047c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b08c      	sub	sp, #48	; 0x30
 80047c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80047c6:	e0ac      	b.n	8004922 <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f2c0 80a8 	blt.w	8004920 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d004      	beq.n	80047e6 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047de:	3304      	adds	r3, #4
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7fe f96e 	bl	8002ac2 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80047e6:	1d3b      	adds	r3, r7, #4
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7ff ff87 	bl	80046fc <prvSampleTimeNow>
 80047ee:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2b09      	cmp	r3, #9
 80047f4:	f200 8095 	bhi.w	8004922 <prvProcessReceivedCommands+0x162>
 80047f8:	a201      	add	r2, pc, #4	; (adr r2, 8004800 <prvProcessReceivedCommands+0x40>)
 80047fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fe:	bf00      	nop
 8004800:	08004829 	.word	0x08004829
 8004804:	08004829 	.word	0x08004829
 8004808:	08004829 	.word	0x08004829
 800480c:	0800489b 	.word	0x0800489b
 8004810:	080048af 	.word	0x080048af
 8004814:	080048f7 	.word	0x080048f7
 8004818:	08004829 	.word	0x08004829
 800481c:	08004829 	.word	0x08004829
 8004820:	0800489b 	.word	0x0800489b
 8004824:	080048af 	.word	0x080048af
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800482e:	f043 0301 	orr.w	r3, r3, #1
 8004832:	b2da      	uxtb	r2, r3
 8004834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004836:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	18d1      	adds	r1, r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6a3a      	ldr	r2, [r7, #32]
 8004846:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004848:	f7ff ff78 	bl	800473c <prvInsertTimerInActiveList>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d067      	beq.n	8004922 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004858:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004860:	f003 0304 	and.w	r3, r3, #4
 8004864:	2b00      	cmp	r3, #0
 8004866:	d05c      	beq.n	8004922 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	441a      	add	r2, r3
 8004870:	2300      	movs	r3, #0
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	2300      	movs	r3, #0
 8004876:	2100      	movs	r1, #0
 8004878:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800487a:	f7ff fe23 	bl	80044c4 <xTimerGenericCommand>
 800487e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d14d      	bne.n	8004922 <prvProcessReceivedCommands+0x162>
 8004886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488a:	f383 8811 	msr	BASEPRI, r3
 800488e:	f3bf 8f6f 	isb	sy
 8004892:	f3bf 8f4f 	dsb	sy
 8004896:	61bb      	str	r3, [r7, #24]
 8004898:	e7fe      	b.n	8004898 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80048a0:	f023 0301 	bic.w	r3, r3, #1
 80048a4:	b2da      	uxtb	r2, r3
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 80048ac:	e039      	b.n	8004922 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80048ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80048b4:	f043 0301 	orr.w	r3, r3, #1
 80048b8:	b2da      	uxtb	r2, r3
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80048c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d109      	bne.n	80048e2 <prvProcessReceivedCommands+0x122>
 80048ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d2:	f383 8811 	msr	BASEPRI, r3
 80048d6:	f3bf 8f6f 	isb	sy
 80048da:	f3bf 8f4f 	dsb	sy
 80048de:	617b      	str	r3, [r7, #20]
 80048e0:	e7fe      	b.n	80048e0 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	699a      	ldr	r2, [r3, #24]
 80048e6:	6a3b      	ldr	r3, [r7, #32]
 80048e8:	18d1      	adds	r1, r2, r3
 80048ea:	6a3b      	ldr	r3, [r7, #32]
 80048ec:	6a3a      	ldr	r2, [r7, #32]
 80048ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048f0:	f7ff ff24 	bl	800473c <prvInsertTimerInActiveList>
					break;
 80048f4:	e015      	b.n	8004922 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80048f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d103      	bne.n	800490c <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8004904:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004906:	f000 fbc5 	bl	8005094 <vPortFree>
 800490a:	e00a      	b.n	8004922 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004912:	f023 0301 	bic.w	r3, r3, #1
 8004916:	b2da      	uxtb	r2, r3
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800491e:	e000      	b.n	8004922 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004920:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004922:	4b08      	ldr	r3, [pc, #32]	; (8004944 <prvProcessReceivedCommands+0x184>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f107 0108 	add.w	r1, r7, #8
 800492a:	2200      	movs	r2, #0
 800492c:	4618      	mov	r0, r3
 800492e:	f7fe fbbb 	bl	80030a8 <xQueueReceive>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	f47f af47 	bne.w	80047c8 <prvProcessReceivedCommands+0x8>
	}
}
 800493a:	bf00      	nop
 800493c:	3728      	adds	r7, #40	; 0x28
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	20000898 	.word	0x20000898

08004948 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b088      	sub	sp, #32
 800494c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800494e:	e047      	b.n	80049e0 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004950:	4b2d      	ldr	r3, [pc, #180]	; (8004a08 <prvSwitchTimerLists+0xc0>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800495a:	4b2b      	ldr	r3, [pc, #172]	; (8004a08 <prvSwitchTimerLists+0xc0>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	3304      	adds	r3, #4
 8004968:	4618      	mov	r0, r3
 800496a:	f7fe f8aa 	bl	8002ac2 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800497c:	f003 0304 	and.w	r3, r3, #4
 8004980:	2b00      	cmp	r3, #0
 8004982:	d02d      	beq.n	80049e0 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	4413      	add	r3, r2
 800498c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	429a      	cmp	r2, r3
 8004994:	d90e      	bls.n	80049b4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80049a2:	4b19      	ldr	r3, [pc, #100]	; (8004a08 <prvSwitchTimerLists+0xc0>)
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	3304      	adds	r3, #4
 80049aa:	4619      	mov	r1, r3
 80049ac:	4610      	mov	r0, r2
 80049ae:	f7fe f84f 	bl	8002a50 <vListInsert>
 80049b2:	e015      	b.n	80049e0 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049b4:	2300      	movs	r3, #0
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	2300      	movs	r3, #0
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	2100      	movs	r1, #0
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f7ff fd80 	bl	80044c4 <xTimerGenericCommand>
 80049c4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d109      	bne.n	80049e0 <prvSwitchTimerLists+0x98>
 80049cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d0:	f383 8811 	msr	BASEPRI, r3
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	f3bf 8f4f 	dsb	sy
 80049dc:	603b      	str	r3, [r7, #0]
 80049de:	e7fe      	b.n	80049de <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80049e0:	4b09      	ldr	r3, [pc, #36]	; (8004a08 <prvSwitchTimerLists+0xc0>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1b2      	bne.n	8004950 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80049ea:	4b07      	ldr	r3, [pc, #28]	; (8004a08 <prvSwitchTimerLists+0xc0>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80049f0:	4b06      	ldr	r3, [pc, #24]	; (8004a0c <prvSwitchTimerLists+0xc4>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a04      	ldr	r2, [pc, #16]	; (8004a08 <prvSwitchTimerLists+0xc0>)
 80049f6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80049f8:	4a04      	ldr	r2, [pc, #16]	; (8004a0c <prvSwitchTimerLists+0xc4>)
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	6013      	str	r3, [r2, #0]
}
 80049fe:	bf00      	nop
 8004a00:	3718      	adds	r7, #24
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	20000890 	.word	0x20000890
 8004a0c:	20000894 	.word	0x20000894

08004a10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004a16:	f000 f961 	bl	8004cdc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004a1a:	4b15      	ldr	r3, [pc, #84]	; (8004a70 <prvCheckForValidListAndQueue+0x60>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d120      	bne.n	8004a64 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004a22:	4814      	ldr	r0, [pc, #80]	; (8004a74 <prvCheckForValidListAndQueue+0x64>)
 8004a24:	f7fd ffc3 	bl	80029ae <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004a28:	4813      	ldr	r0, [pc, #76]	; (8004a78 <prvCheckForValidListAndQueue+0x68>)
 8004a2a:	f7fd ffc0 	bl	80029ae <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004a2e:	4b13      	ldr	r3, [pc, #76]	; (8004a7c <prvCheckForValidListAndQueue+0x6c>)
 8004a30:	4a10      	ldr	r2, [pc, #64]	; (8004a74 <prvCheckForValidListAndQueue+0x64>)
 8004a32:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004a34:	4b12      	ldr	r3, [pc, #72]	; (8004a80 <prvCheckForValidListAndQueue+0x70>)
 8004a36:	4a10      	ldr	r2, [pc, #64]	; (8004a78 <prvCheckForValidListAndQueue+0x68>)
 8004a38:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	9300      	str	r3, [sp, #0]
 8004a3e:	4b11      	ldr	r3, [pc, #68]	; (8004a84 <prvCheckForValidListAndQueue+0x74>)
 8004a40:	4a11      	ldr	r2, [pc, #68]	; (8004a88 <prvCheckForValidListAndQueue+0x78>)
 8004a42:	210c      	movs	r1, #12
 8004a44:	200a      	movs	r0, #10
 8004a46:	f7fe f8cf 	bl	8002be8 <xQueueGenericCreateStatic>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	4b08      	ldr	r3, [pc, #32]	; (8004a70 <prvCheckForValidListAndQueue+0x60>)
 8004a4e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004a50:	4b07      	ldr	r3, [pc, #28]	; (8004a70 <prvCheckForValidListAndQueue+0x60>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d005      	beq.n	8004a64 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004a58:	4b05      	ldr	r3, [pc, #20]	; (8004a70 <prvCheckForValidListAndQueue+0x60>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	490b      	ldr	r1, [pc, #44]	; (8004a8c <prvCheckForValidListAndQueue+0x7c>)
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7fe fd8c 	bl	800357c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a64:	f000 f968 	bl	8004d38 <vPortExitCritical>
}
 8004a68:	bf00      	nop
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	20000898 	.word	0x20000898
 8004a74:	20000868 	.word	0x20000868
 8004a78:	2000087c 	.word	0x2000087c
 8004a7c:	20000890 	.word	0x20000890
 8004a80:	20000894 	.word	0x20000894
 8004a84:	2000091c 	.word	0x2000091c
 8004a88:	200008a4 	.word	0x200008a4
 8004a8c:	08005c48 	.word	0x08005c48

08004a90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	3b04      	subs	r3, #4
 8004aa0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004aa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	3b04      	subs	r3, #4
 8004aae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f023 0201 	bic.w	r2, r3, #1
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	3b04      	subs	r3, #4
 8004abe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ac0:	4a0c      	ldr	r2, [pc, #48]	; (8004af4 <pxPortInitialiseStack+0x64>)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	3b14      	subs	r3, #20
 8004aca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	3b04      	subs	r3, #4
 8004ad6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f06f 0202 	mvn.w	r2, #2
 8004ade:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	3b20      	subs	r3, #32
 8004ae4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3714      	adds	r7, #20
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	08004af9 	.word	0x08004af9

08004af8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004afe:	2300      	movs	r3, #0
 8004b00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b02:	4b11      	ldr	r3, [pc, #68]	; (8004b48 <prvTaskExitError+0x50>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0a:	d009      	beq.n	8004b20 <prvTaskExitError+0x28>
 8004b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b10:	f383 8811 	msr	BASEPRI, r3
 8004b14:	f3bf 8f6f 	isb	sy
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	60fb      	str	r3, [r7, #12]
 8004b1e:	e7fe      	b.n	8004b1e <prvTaskExitError+0x26>
 8004b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b24:	f383 8811 	msr	BASEPRI, r3
 8004b28:	f3bf 8f6f 	isb	sy
 8004b2c:	f3bf 8f4f 	dsb	sy
 8004b30:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004b32:	bf00      	nop
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d0fc      	beq.n	8004b34 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004b3a:	bf00      	nop
 8004b3c:	3714      	adds	r7, #20
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	2000000c 	.word	0x2000000c
 8004b4c:	00000000 	.word	0x00000000

08004b50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004b50:	4b07      	ldr	r3, [pc, #28]	; (8004b70 <pxCurrentTCBConst2>)
 8004b52:	6819      	ldr	r1, [r3, #0]
 8004b54:	6808      	ldr	r0, [r1, #0]
 8004b56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b5a:	f380 8809 	msr	PSP, r0
 8004b5e:	f3bf 8f6f 	isb	sy
 8004b62:	f04f 0000 	mov.w	r0, #0
 8004b66:	f380 8811 	msr	BASEPRI, r0
 8004b6a:	4770      	bx	lr
 8004b6c:	f3af 8000 	nop.w

08004b70 <pxCurrentTCBConst2>:
 8004b70:	2000073c 	.word	0x2000073c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004b74:	bf00      	nop
 8004b76:	bf00      	nop

08004b78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004b78:	4808      	ldr	r0, [pc, #32]	; (8004b9c <prvPortStartFirstTask+0x24>)
 8004b7a:	6800      	ldr	r0, [r0, #0]
 8004b7c:	6800      	ldr	r0, [r0, #0]
 8004b7e:	f380 8808 	msr	MSP, r0
 8004b82:	f04f 0000 	mov.w	r0, #0
 8004b86:	f380 8814 	msr	CONTROL, r0
 8004b8a:	b662      	cpsie	i
 8004b8c:	b661      	cpsie	f
 8004b8e:	f3bf 8f4f 	dsb	sy
 8004b92:	f3bf 8f6f 	isb	sy
 8004b96:	df00      	svc	0
 8004b98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004b9a:	bf00      	nop
 8004b9c:	e000ed08 	.word	0xe000ed08

08004ba0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ba6:	4b44      	ldr	r3, [pc, #272]	; (8004cb8 <xPortStartScheduler+0x118>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a44      	ldr	r2, [pc, #272]	; (8004cbc <xPortStartScheduler+0x11c>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d109      	bne.n	8004bc4 <xPortStartScheduler+0x24>
 8004bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb4:	f383 8811 	msr	BASEPRI, r3
 8004bb8:	f3bf 8f6f 	isb	sy
 8004bbc:	f3bf 8f4f 	dsb	sy
 8004bc0:	613b      	str	r3, [r7, #16]
 8004bc2:	e7fe      	b.n	8004bc2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004bc4:	4b3c      	ldr	r3, [pc, #240]	; (8004cb8 <xPortStartScheduler+0x118>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a3d      	ldr	r2, [pc, #244]	; (8004cc0 <xPortStartScheduler+0x120>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d109      	bne.n	8004be2 <xPortStartScheduler+0x42>
 8004bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd2:	f383 8811 	msr	BASEPRI, r3
 8004bd6:	f3bf 8f6f 	isb	sy
 8004bda:	f3bf 8f4f 	dsb	sy
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	e7fe      	b.n	8004be0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004be2:	4b38      	ldr	r3, [pc, #224]	; (8004cc4 <xPortStartScheduler+0x124>)
 8004be4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	22ff      	movs	r2, #255	; 0xff
 8004bf2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004bfc:	78fb      	ldrb	r3, [r7, #3]
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c04:	b2da      	uxtb	r2, r3
 8004c06:	4b30      	ldr	r3, [pc, #192]	; (8004cc8 <xPortStartScheduler+0x128>)
 8004c08:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c0a:	4b30      	ldr	r3, [pc, #192]	; (8004ccc <xPortStartScheduler+0x12c>)
 8004c0c:	2207      	movs	r2, #7
 8004c0e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c10:	e009      	b.n	8004c26 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004c12:	4b2e      	ldr	r3, [pc, #184]	; (8004ccc <xPortStartScheduler+0x12c>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	3b01      	subs	r3, #1
 8004c18:	4a2c      	ldr	r2, [pc, #176]	; (8004ccc <xPortStartScheduler+0x12c>)
 8004c1a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c1c:	78fb      	ldrb	r3, [r7, #3]
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	005b      	lsls	r3, r3, #1
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c26:	78fb      	ldrb	r3, [r7, #3]
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c2e:	2b80      	cmp	r3, #128	; 0x80
 8004c30:	d0ef      	beq.n	8004c12 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c32:	4b26      	ldr	r3, [pc, #152]	; (8004ccc <xPortStartScheduler+0x12c>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f1c3 0307 	rsb	r3, r3, #7
 8004c3a:	2b04      	cmp	r3, #4
 8004c3c:	d009      	beq.n	8004c52 <xPortStartScheduler+0xb2>
 8004c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c42:	f383 8811 	msr	BASEPRI, r3
 8004c46:	f3bf 8f6f 	isb	sy
 8004c4a:	f3bf 8f4f 	dsb	sy
 8004c4e:	60bb      	str	r3, [r7, #8]
 8004c50:	e7fe      	b.n	8004c50 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c52:	4b1e      	ldr	r3, [pc, #120]	; (8004ccc <xPortStartScheduler+0x12c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	021b      	lsls	r3, r3, #8
 8004c58:	4a1c      	ldr	r2, [pc, #112]	; (8004ccc <xPortStartScheduler+0x12c>)
 8004c5a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c5c:	4b1b      	ldr	r3, [pc, #108]	; (8004ccc <xPortStartScheduler+0x12c>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c64:	4a19      	ldr	r2, [pc, #100]	; (8004ccc <xPortStartScheduler+0x12c>)
 8004c66:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	b2da      	uxtb	r2, r3
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004c70:	4b17      	ldr	r3, [pc, #92]	; (8004cd0 <xPortStartScheduler+0x130>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a16      	ldr	r2, [pc, #88]	; (8004cd0 <xPortStartScheduler+0x130>)
 8004c76:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c7a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004c7c:	4b14      	ldr	r3, [pc, #80]	; (8004cd0 <xPortStartScheduler+0x130>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a13      	ldr	r2, [pc, #76]	; (8004cd0 <xPortStartScheduler+0x130>)
 8004c82:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004c86:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004c88:	f000 f8d6 	bl	8004e38 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004c8c:	4b11      	ldr	r3, [pc, #68]	; (8004cd4 <xPortStartScheduler+0x134>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004c92:	f000 f8f5 	bl	8004e80 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004c96:	4b10      	ldr	r3, [pc, #64]	; (8004cd8 <xPortStartScheduler+0x138>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a0f      	ldr	r2, [pc, #60]	; (8004cd8 <xPortStartScheduler+0x138>)
 8004c9c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004ca0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ca2:	f7ff ff69 	bl	8004b78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ca6:	f7ff f85f 	bl	8003d68 <vTaskSwitchContext>
	prvTaskExitError();
 8004caa:	f7ff ff25 	bl	8004af8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3718      	adds	r7, #24
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	e000ed00 	.word	0xe000ed00
 8004cbc:	410fc271 	.word	0x410fc271
 8004cc0:	410fc270 	.word	0x410fc270
 8004cc4:	e000e400 	.word	0xe000e400
 8004cc8:	20000964 	.word	0x20000964
 8004ccc:	20000968 	.word	0x20000968
 8004cd0:	e000ed20 	.word	0xe000ed20
 8004cd4:	2000000c 	.word	0x2000000c
 8004cd8:	e000ef34 	.word	0xe000ef34

08004cdc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce6:	f383 8811 	msr	BASEPRI, r3
 8004cea:	f3bf 8f6f 	isb	sy
 8004cee:	f3bf 8f4f 	dsb	sy
 8004cf2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004cf4:	4b0e      	ldr	r3, [pc, #56]	; (8004d30 <vPortEnterCritical+0x54>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	4a0d      	ldr	r2, [pc, #52]	; (8004d30 <vPortEnterCritical+0x54>)
 8004cfc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004cfe:	4b0c      	ldr	r3, [pc, #48]	; (8004d30 <vPortEnterCritical+0x54>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d10e      	bne.n	8004d24 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d06:	4b0b      	ldr	r3, [pc, #44]	; (8004d34 <vPortEnterCritical+0x58>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d009      	beq.n	8004d24 <vPortEnterCritical+0x48>
 8004d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d14:	f383 8811 	msr	BASEPRI, r3
 8004d18:	f3bf 8f6f 	isb	sy
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	603b      	str	r3, [r7, #0]
 8004d22:	e7fe      	b.n	8004d22 <vPortEnterCritical+0x46>
	}
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr
 8004d30:	2000000c 	.word	0x2000000c
 8004d34:	e000ed04 	.word	0xe000ed04

08004d38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004d3e:	4b11      	ldr	r3, [pc, #68]	; (8004d84 <vPortExitCritical+0x4c>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d109      	bne.n	8004d5a <vPortExitCritical+0x22>
 8004d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4a:	f383 8811 	msr	BASEPRI, r3
 8004d4e:	f3bf 8f6f 	isb	sy
 8004d52:	f3bf 8f4f 	dsb	sy
 8004d56:	607b      	str	r3, [r7, #4]
 8004d58:	e7fe      	b.n	8004d58 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004d5a:	4b0a      	ldr	r3, [pc, #40]	; (8004d84 <vPortExitCritical+0x4c>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	4a08      	ldr	r2, [pc, #32]	; (8004d84 <vPortExitCritical+0x4c>)
 8004d62:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004d64:	4b07      	ldr	r3, [pc, #28]	; (8004d84 <vPortExitCritical+0x4c>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d104      	bne.n	8004d76 <vPortExitCritical+0x3e>
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004d76:	bf00      	nop
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	2000000c 	.word	0x2000000c
	...

08004d90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004d90:	f3ef 8009 	mrs	r0, PSP
 8004d94:	f3bf 8f6f 	isb	sy
 8004d98:	4b15      	ldr	r3, [pc, #84]	; (8004df0 <pxCurrentTCBConst>)
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	f01e 0f10 	tst.w	lr, #16
 8004da0:	bf08      	it	eq
 8004da2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004da6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004daa:	6010      	str	r0, [r2, #0]
 8004dac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004db0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004db4:	f380 8811 	msr	BASEPRI, r0
 8004db8:	f3bf 8f4f 	dsb	sy
 8004dbc:	f3bf 8f6f 	isb	sy
 8004dc0:	f7fe ffd2 	bl	8003d68 <vTaskSwitchContext>
 8004dc4:	f04f 0000 	mov.w	r0, #0
 8004dc8:	f380 8811 	msr	BASEPRI, r0
 8004dcc:	bc09      	pop	{r0, r3}
 8004dce:	6819      	ldr	r1, [r3, #0]
 8004dd0:	6808      	ldr	r0, [r1, #0]
 8004dd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dd6:	f01e 0f10 	tst.w	lr, #16
 8004dda:	bf08      	it	eq
 8004ddc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004de0:	f380 8809 	msr	PSP, r0
 8004de4:	f3bf 8f6f 	isb	sy
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	f3af 8000 	nop.w

08004df0 <pxCurrentTCBConst>:
 8004df0:	2000073c 	.word	0x2000073c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004df4:	bf00      	nop
 8004df6:	bf00      	nop

08004df8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
	__asm volatile
 8004dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e02:	f383 8811 	msr	BASEPRI, r3
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	f3bf 8f4f 	dsb	sy
 8004e0e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e10:	f7fe fef2 	bl	8003bf8 <xTaskIncrementTick>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e1a:	4b06      	ldr	r3, [pc, #24]	; (8004e34 <xPortSysTickHandler+0x3c>)
 8004e1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e20:	601a      	str	r2, [r3, #0]
 8004e22:	2300      	movs	r3, #0
 8004e24:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004e2c:	bf00      	nop
 8004e2e:	3708      	adds	r7, #8
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	e000ed04 	.word	0xe000ed04

08004e38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004e38:	b480      	push	{r7}
 8004e3a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e3c:	4b0b      	ldr	r3, [pc, #44]	; (8004e6c <vPortSetupTimerInterrupt+0x34>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e42:	4b0b      	ldr	r3, [pc, #44]	; (8004e70 <vPortSetupTimerInterrupt+0x38>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e48:	4b0a      	ldr	r3, [pc, #40]	; (8004e74 <vPortSetupTimerInterrupt+0x3c>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a0a      	ldr	r2, [pc, #40]	; (8004e78 <vPortSetupTimerInterrupt+0x40>)
 8004e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e52:	099b      	lsrs	r3, r3, #6
 8004e54:	4a09      	ldr	r2, [pc, #36]	; (8004e7c <vPortSetupTimerInterrupt+0x44>)
 8004e56:	3b01      	subs	r3, #1
 8004e58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e5a:	4b04      	ldr	r3, [pc, #16]	; (8004e6c <vPortSetupTimerInterrupt+0x34>)
 8004e5c:	2207      	movs	r2, #7
 8004e5e:	601a      	str	r2, [r3, #0]
}
 8004e60:	bf00      	nop
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	e000e010 	.word	0xe000e010
 8004e70:	e000e018 	.word	0xe000e018
 8004e74:	20000000 	.word	0x20000000
 8004e78:	10624dd3 	.word	0x10624dd3
 8004e7c:	e000e014 	.word	0xe000e014

08004e80 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004e80:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004e90 <vPortEnableVFP+0x10>
 8004e84:	6801      	ldr	r1, [r0, #0]
 8004e86:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004e8a:	6001      	str	r1, [r0, #0]
 8004e8c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004e8e:	bf00      	nop
 8004e90:	e000ed88 	.word	0xe000ed88

08004e94 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004e9a:	f3ef 8305 	mrs	r3, IPSR
 8004e9e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2b0f      	cmp	r3, #15
 8004ea4:	d913      	bls.n	8004ece <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004ea6:	4a16      	ldr	r2, [pc, #88]	; (8004f00 <vPortValidateInterruptPriority+0x6c>)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	4413      	add	r3, r2
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004eb0:	4b14      	ldr	r3, [pc, #80]	; (8004f04 <vPortValidateInterruptPriority+0x70>)
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	7afa      	ldrb	r2, [r7, #11]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d209      	bcs.n	8004ece <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8004eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ebe:	f383 8811 	msr	BASEPRI, r3
 8004ec2:	f3bf 8f6f 	isb	sy
 8004ec6:	f3bf 8f4f 	dsb	sy
 8004eca:	607b      	str	r3, [r7, #4]
 8004ecc:	e7fe      	b.n	8004ecc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004ece:	4b0e      	ldr	r3, [pc, #56]	; (8004f08 <vPortValidateInterruptPriority+0x74>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ed6:	4b0d      	ldr	r3, [pc, #52]	; (8004f0c <vPortValidateInterruptPriority+0x78>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d909      	bls.n	8004ef2 <vPortValidateInterruptPriority+0x5e>
 8004ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	603b      	str	r3, [r7, #0]
 8004ef0:	e7fe      	b.n	8004ef0 <vPortValidateInterruptPriority+0x5c>
	}
 8004ef2:	bf00      	nop
 8004ef4:	3714      	adds	r7, #20
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	e000e3f0 	.word	0xe000e3f0
 8004f04:	20000964 	.word	0x20000964
 8004f08:	e000ed0c 	.word	0xe000ed0c
 8004f0c:	20000968 	.word	0x20000968

08004f10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b08a      	sub	sp, #40	; 0x28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f1c:	f7fe fdb2 	bl	8003a84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f20:	4b57      	ldr	r3, [pc, #348]	; (8005080 <pvPortMalloc+0x170>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d101      	bne.n	8004f2c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f28:	f000 f90c 	bl	8005144 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f2c:	4b55      	ldr	r3, [pc, #340]	; (8005084 <pvPortMalloc+0x174>)
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4013      	ands	r3, r2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f040 808c 	bne.w	8005052 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d01c      	beq.n	8004f7a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004f40:	2208      	movs	r2, #8
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4413      	add	r3, r2
 8004f46:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f003 0307 	and.w	r3, r3, #7
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d013      	beq.n	8004f7a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f023 0307 	bic.w	r3, r3, #7
 8004f58:	3308      	adds	r3, #8
 8004f5a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f003 0307 	and.w	r3, r3, #7
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d009      	beq.n	8004f7a <pvPortMalloc+0x6a>
 8004f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6a:	f383 8811 	msr	BASEPRI, r3
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	f3bf 8f4f 	dsb	sy
 8004f76:	617b      	str	r3, [r7, #20]
 8004f78:	e7fe      	b.n	8004f78 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d068      	beq.n	8005052 <pvPortMalloc+0x142>
 8004f80:	4b41      	ldr	r3, [pc, #260]	; (8005088 <pvPortMalloc+0x178>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d863      	bhi.n	8005052 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004f8a:	4b40      	ldr	r3, [pc, #256]	; (800508c <pvPortMalloc+0x17c>)
 8004f8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004f8e:	4b3f      	ldr	r3, [pc, #252]	; (800508c <pvPortMalloc+0x17c>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f94:	e004      	b.n	8004fa0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d903      	bls.n	8004fb2 <pvPortMalloc+0xa2>
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1f1      	bne.n	8004f96 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004fb2:	4b33      	ldr	r3, [pc, #204]	; (8005080 <pvPortMalloc+0x170>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d04a      	beq.n	8005052 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004fbc:	6a3b      	ldr	r3, [r7, #32]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2208      	movs	r2, #8
 8004fc2:	4413      	add	r3, r2
 8004fc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	6a3b      	ldr	r3, [r7, #32]
 8004fcc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	1ad2      	subs	r2, r2, r3
 8004fd6:	2308      	movs	r3, #8
 8004fd8:	005b      	lsls	r3, r3, #1
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d91e      	bls.n	800501c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	f003 0307 	and.w	r3, r3, #7
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d009      	beq.n	8005004 <pvPortMalloc+0xf4>
 8004ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff4:	f383 8811 	msr	BASEPRI, r3
 8004ff8:	f3bf 8f6f 	isb	sy
 8004ffc:	f3bf 8f4f 	dsb	sy
 8005000:	613b      	str	r3, [r7, #16]
 8005002:	e7fe      	b.n	8005002 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	685a      	ldr	r2, [r3, #4]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	1ad2      	subs	r2, r2, r3
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005016:	69b8      	ldr	r0, [r7, #24]
 8005018:	f000 f8f6 	bl	8005208 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800501c:	4b1a      	ldr	r3, [pc, #104]	; (8005088 <pvPortMalloc+0x178>)
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	4a18      	ldr	r2, [pc, #96]	; (8005088 <pvPortMalloc+0x178>)
 8005028:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800502a:	4b17      	ldr	r3, [pc, #92]	; (8005088 <pvPortMalloc+0x178>)
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	4b18      	ldr	r3, [pc, #96]	; (8005090 <pvPortMalloc+0x180>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	429a      	cmp	r2, r3
 8005034:	d203      	bcs.n	800503e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005036:	4b14      	ldr	r3, [pc, #80]	; (8005088 <pvPortMalloc+0x178>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a15      	ldr	r2, [pc, #84]	; (8005090 <pvPortMalloc+0x180>)
 800503c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800503e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005040:	685a      	ldr	r2, [r3, #4]
 8005042:	4b10      	ldr	r3, [pc, #64]	; (8005084 <pvPortMalloc+0x174>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	431a      	orrs	r2, r3
 8005048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	2200      	movs	r2, #0
 8005050:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005052:	f7fe fd25 	bl	8003aa0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	f003 0307 	and.w	r3, r3, #7
 800505c:	2b00      	cmp	r3, #0
 800505e:	d009      	beq.n	8005074 <pvPortMalloc+0x164>
 8005060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005064:	f383 8811 	msr	BASEPRI, r3
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	60fb      	str	r3, [r7, #12]
 8005072:	e7fe      	b.n	8005072 <pvPortMalloc+0x162>
	return pvReturn;
 8005074:	69fb      	ldr	r3, [r7, #28]
}
 8005076:	4618      	mov	r0, r3
 8005078:	3728      	adds	r7, #40	; 0x28
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	20004574 	.word	0x20004574
 8005084:	20004580 	.word	0x20004580
 8005088:	20004578 	.word	0x20004578
 800508c:	2000456c 	.word	0x2000456c
 8005090:	2000457c 	.word	0x2000457c

08005094 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d046      	beq.n	8005134 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80050a6:	2308      	movs	r3, #8
 80050a8:	425b      	negs	r3, r3
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	4413      	add	r3, r2
 80050ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	4b20      	ldr	r3, [pc, #128]	; (800513c <vPortFree+0xa8>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4013      	ands	r3, r2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d109      	bne.n	80050d6 <vPortFree+0x42>
 80050c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c6:	f383 8811 	msr	BASEPRI, r3
 80050ca:	f3bf 8f6f 	isb	sy
 80050ce:	f3bf 8f4f 	dsb	sy
 80050d2:	60fb      	str	r3, [r7, #12]
 80050d4:	e7fe      	b.n	80050d4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d009      	beq.n	80050f2 <vPortFree+0x5e>
 80050de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e2:	f383 8811 	msr	BASEPRI, r3
 80050e6:	f3bf 8f6f 	isb	sy
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	60bb      	str	r3, [r7, #8]
 80050f0:	e7fe      	b.n	80050f0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	685a      	ldr	r2, [r3, #4]
 80050f6:	4b11      	ldr	r3, [pc, #68]	; (800513c <vPortFree+0xa8>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4013      	ands	r3, r2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d019      	beq.n	8005134 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d115      	bne.n	8005134 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	685a      	ldr	r2, [r3, #4]
 800510c:	4b0b      	ldr	r3, [pc, #44]	; (800513c <vPortFree+0xa8>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	43db      	mvns	r3, r3
 8005112:	401a      	ands	r2, r3
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005118:	f7fe fcb4 	bl	8003a84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	4b07      	ldr	r3, [pc, #28]	; (8005140 <vPortFree+0xac>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4413      	add	r3, r2
 8005126:	4a06      	ldr	r2, [pc, #24]	; (8005140 <vPortFree+0xac>)
 8005128:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800512a:	6938      	ldr	r0, [r7, #16]
 800512c:	f000 f86c 	bl	8005208 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005130:	f7fe fcb6 	bl	8003aa0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005134:	bf00      	nop
 8005136:	3718      	adds	r7, #24
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	20004580 	.word	0x20004580
 8005140:	20004578 	.word	0x20004578

08005144 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005144:	b480      	push	{r7}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800514a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800514e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005150:	4b27      	ldr	r3, [pc, #156]	; (80051f0 <prvHeapInit+0xac>)
 8005152:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f003 0307 	and.w	r3, r3, #7
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00c      	beq.n	8005178 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	3307      	adds	r3, #7
 8005162:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f023 0307 	bic.w	r3, r3, #7
 800516a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	4a1f      	ldr	r2, [pc, #124]	; (80051f0 <prvHeapInit+0xac>)
 8005174:	4413      	add	r3, r2
 8005176:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800517c:	4a1d      	ldr	r2, [pc, #116]	; (80051f4 <prvHeapInit+0xb0>)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005182:	4b1c      	ldr	r3, [pc, #112]	; (80051f4 <prvHeapInit+0xb0>)
 8005184:	2200      	movs	r2, #0
 8005186:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	4413      	add	r3, r2
 800518e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005190:	2208      	movs	r2, #8
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	1a9b      	subs	r3, r3, r2
 8005196:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f023 0307 	bic.w	r3, r3, #7
 800519e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4a15      	ldr	r2, [pc, #84]	; (80051f8 <prvHeapInit+0xb4>)
 80051a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80051a6:	4b14      	ldr	r3, [pc, #80]	; (80051f8 <prvHeapInit+0xb4>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2200      	movs	r2, #0
 80051ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80051ae:	4b12      	ldr	r3, [pc, #72]	; (80051f8 <prvHeapInit+0xb4>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2200      	movs	r2, #0
 80051b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	1ad2      	subs	r2, r2, r3
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80051c4:	4b0c      	ldr	r3, [pc, #48]	; (80051f8 <prvHeapInit+0xb4>)
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	4a0a      	ldr	r2, [pc, #40]	; (80051fc <prvHeapInit+0xb8>)
 80051d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	4a09      	ldr	r2, [pc, #36]	; (8005200 <prvHeapInit+0xbc>)
 80051da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80051dc:	4b09      	ldr	r3, [pc, #36]	; (8005204 <prvHeapInit+0xc0>)
 80051de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80051e2:	601a      	str	r2, [r3, #0]
}
 80051e4:	bf00      	nop
 80051e6:	3714      	adds	r7, #20
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr
 80051f0:	2000096c 	.word	0x2000096c
 80051f4:	2000456c 	.word	0x2000456c
 80051f8:	20004574 	.word	0x20004574
 80051fc:	2000457c 	.word	0x2000457c
 8005200:	20004578 	.word	0x20004578
 8005204:	20004580 	.word	0x20004580

08005208 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005210:	4b28      	ldr	r3, [pc, #160]	; (80052b4 <prvInsertBlockIntoFreeList+0xac>)
 8005212:	60fb      	str	r3, [r7, #12]
 8005214:	e002      	b.n	800521c <prvInsertBlockIntoFreeList+0x14>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	60fb      	str	r3, [r7, #12]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	429a      	cmp	r2, r3
 8005224:	d8f7      	bhi.n	8005216 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	4413      	add	r3, r2
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	429a      	cmp	r2, r3
 8005236:	d108      	bne.n	800524a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	685a      	ldr	r2, [r3, #4]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	441a      	add	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	441a      	add	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	429a      	cmp	r2, r3
 800525c:	d118      	bne.n	8005290 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	4b15      	ldr	r3, [pc, #84]	; (80052b8 <prvInsertBlockIntoFreeList+0xb0>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	429a      	cmp	r2, r3
 8005268:	d00d      	beq.n	8005286 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685a      	ldr	r2, [r3, #4]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	441a      	add	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	e008      	b.n	8005298 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005286:	4b0c      	ldr	r3, [pc, #48]	; (80052b8 <prvInsertBlockIntoFreeList+0xb0>)
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	601a      	str	r2, [r3, #0]
 800528e:	e003      	b.n	8005298 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	429a      	cmp	r2, r3
 800529e:	d002      	beq.n	80052a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052a6:	bf00      	nop
 80052a8:	3714      	adds	r7, #20
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	2000456c 	.word	0x2000456c
 80052b8:	20004574 	.word	0x20004574

080052bc <__errno>:
 80052bc:	4b01      	ldr	r3, [pc, #4]	; (80052c4 <__errno+0x8>)
 80052be:	6818      	ldr	r0, [r3, #0]
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	20000010 	.word	0x20000010

080052c8 <__libc_init_array>:
 80052c8:	b570      	push	{r4, r5, r6, lr}
 80052ca:	4e0d      	ldr	r6, [pc, #52]	; (8005300 <__libc_init_array+0x38>)
 80052cc:	4c0d      	ldr	r4, [pc, #52]	; (8005304 <__libc_init_array+0x3c>)
 80052ce:	1ba4      	subs	r4, r4, r6
 80052d0:	10a4      	asrs	r4, r4, #2
 80052d2:	2500      	movs	r5, #0
 80052d4:	42a5      	cmp	r5, r4
 80052d6:	d109      	bne.n	80052ec <__libc_init_array+0x24>
 80052d8:	4e0b      	ldr	r6, [pc, #44]	; (8005308 <__libc_init_array+0x40>)
 80052da:	4c0c      	ldr	r4, [pc, #48]	; (800530c <__libc_init_array+0x44>)
 80052dc:	f000 fc28 	bl	8005b30 <_init>
 80052e0:	1ba4      	subs	r4, r4, r6
 80052e2:	10a4      	asrs	r4, r4, #2
 80052e4:	2500      	movs	r5, #0
 80052e6:	42a5      	cmp	r5, r4
 80052e8:	d105      	bne.n	80052f6 <__libc_init_array+0x2e>
 80052ea:	bd70      	pop	{r4, r5, r6, pc}
 80052ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052f0:	4798      	blx	r3
 80052f2:	3501      	adds	r5, #1
 80052f4:	e7ee      	b.n	80052d4 <__libc_init_array+0xc>
 80052f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052fa:	4798      	blx	r3
 80052fc:	3501      	adds	r5, #1
 80052fe:	e7f2      	b.n	80052e6 <__libc_init_array+0x1e>
 8005300:	08005cb0 	.word	0x08005cb0
 8005304:	08005cb0 	.word	0x08005cb0
 8005308:	08005cb0 	.word	0x08005cb0
 800530c:	08005cb4 	.word	0x08005cb4

08005310 <memcpy>:
 8005310:	b510      	push	{r4, lr}
 8005312:	1e43      	subs	r3, r0, #1
 8005314:	440a      	add	r2, r1
 8005316:	4291      	cmp	r1, r2
 8005318:	d100      	bne.n	800531c <memcpy+0xc>
 800531a:	bd10      	pop	{r4, pc}
 800531c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005320:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005324:	e7f7      	b.n	8005316 <memcpy+0x6>

08005326 <memset>:
 8005326:	4402      	add	r2, r0
 8005328:	4603      	mov	r3, r0
 800532a:	4293      	cmp	r3, r2
 800532c:	d100      	bne.n	8005330 <memset+0xa>
 800532e:	4770      	bx	lr
 8005330:	f803 1b01 	strb.w	r1, [r3], #1
 8005334:	e7f9      	b.n	800532a <memset+0x4>
	...

08005338 <siprintf>:
 8005338:	b40e      	push	{r1, r2, r3}
 800533a:	b500      	push	{lr}
 800533c:	b09c      	sub	sp, #112	; 0x70
 800533e:	ab1d      	add	r3, sp, #116	; 0x74
 8005340:	9002      	str	r0, [sp, #8]
 8005342:	9006      	str	r0, [sp, #24]
 8005344:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005348:	4809      	ldr	r0, [pc, #36]	; (8005370 <siprintf+0x38>)
 800534a:	9107      	str	r1, [sp, #28]
 800534c:	9104      	str	r1, [sp, #16]
 800534e:	4909      	ldr	r1, [pc, #36]	; (8005374 <siprintf+0x3c>)
 8005350:	f853 2b04 	ldr.w	r2, [r3], #4
 8005354:	9105      	str	r1, [sp, #20]
 8005356:	6800      	ldr	r0, [r0, #0]
 8005358:	9301      	str	r3, [sp, #4]
 800535a:	a902      	add	r1, sp, #8
 800535c:	f000 f866 	bl	800542c <_svfiprintf_r>
 8005360:	9b02      	ldr	r3, [sp, #8]
 8005362:	2200      	movs	r2, #0
 8005364:	701a      	strb	r2, [r3, #0]
 8005366:	b01c      	add	sp, #112	; 0x70
 8005368:	f85d eb04 	ldr.w	lr, [sp], #4
 800536c:	b003      	add	sp, #12
 800536e:	4770      	bx	lr
 8005370:	20000010 	.word	0x20000010
 8005374:	ffff0208 	.word	0xffff0208

08005378 <__ssputs_r>:
 8005378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800537c:	688e      	ldr	r6, [r1, #8]
 800537e:	429e      	cmp	r6, r3
 8005380:	4682      	mov	sl, r0
 8005382:	460c      	mov	r4, r1
 8005384:	4690      	mov	r8, r2
 8005386:	4699      	mov	r9, r3
 8005388:	d837      	bhi.n	80053fa <__ssputs_r+0x82>
 800538a:	898a      	ldrh	r2, [r1, #12]
 800538c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005390:	d031      	beq.n	80053f6 <__ssputs_r+0x7e>
 8005392:	6825      	ldr	r5, [r4, #0]
 8005394:	6909      	ldr	r1, [r1, #16]
 8005396:	1a6f      	subs	r7, r5, r1
 8005398:	6965      	ldr	r5, [r4, #20]
 800539a:	2302      	movs	r3, #2
 800539c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80053a0:	fb95 f5f3 	sdiv	r5, r5, r3
 80053a4:	f109 0301 	add.w	r3, r9, #1
 80053a8:	443b      	add	r3, r7
 80053aa:	429d      	cmp	r5, r3
 80053ac:	bf38      	it	cc
 80053ae:	461d      	movcc	r5, r3
 80053b0:	0553      	lsls	r3, r2, #21
 80053b2:	d530      	bpl.n	8005416 <__ssputs_r+0x9e>
 80053b4:	4629      	mov	r1, r5
 80053b6:	f000 fb21 	bl	80059fc <_malloc_r>
 80053ba:	4606      	mov	r6, r0
 80053bc:	b950      	cbnz	r0, 80053d4 <__ssputs_r+0x5c>
 80053be:	230c      	movs	r3, #12
 80053c0:	f8ca 3000 	str.w	r3, [sl]
 80053c4:	89a3      	ldrh	r3, [r4, #12]
 80053c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053ca:	81a3      	strh	r3, [r4, #12]
 80053cc:	f04f 30ff 	mov.w	r0, #4294967295
 80053d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053d4:	463a      	mov	r2, r7
 80053d6:	6921      	ldr	r1, [r4, #16]
 80053d8:	f7ff ff9a 	bl	8005310 <memcpy>
 80053dc:	89a3      	ldrh	r3, [r4, #12]
 80053de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80053e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053e6:	81a3      	strh	r3, [r4, #12]
 80053e8:	6126      	str	r6, [r4, #16]
 80053ea:	6165      	str	r5, [r4, #20]
 80053ec:	443e      	add	r6, r7
 80053ee:	1bed      	subs	r5, r5, r7
 80053f0:	6026      	str	r6, [r4, #0]
 80053f2:	60a5      	str	r5, [r4, #8]
 80053f4:	464e      	mov	r6, r9
 80053f6:	454e      	cmp	r6, r9
 80053f8:	d900      	bls.n	80053fc <__ssputs_r+0x84>
 80053fa:	464e      	mov	r6, r9
 80053fc:	4632      	mov	r2, r6
 80053fe:	4641      	mov	r1, r8
 8005400:	6820      	ldr	r0, [r4, #0]
 8005402:	f000 fa93 	bl	800592c <memmove>
 8005406:	68a3      	ldr	r3, [r4, #8]
 8005408:	1b9b      	subs	r3, r3, r6
 800540a:	60a3      	str	r3, [r4, #8]
 800540c:	6823      	ldr	r3, [r4, #0]
 800540e:	441e      	add	r6, r3
 8005410:	6026      	str	r6, [r4, #0]
 8005412:	2000      	movs	r0, #0
 8005414:	e7dc      	b.n	80053d0 <__ssputs_r+0x58>
 8005416:	462a      	mov	r2, r5
 8005418:	f000 fb4a 	bl	8005ab0 <_realloc_r>
 800541c:	4606      	mov	r6, r0
 800541e:	2800      	cmp	r0, #0
 8005420:	d1e2      	bne.n	80053e8 <__ssputs_r+0x70>
 8005422:	6921      	ldr	r1, [r4, #16]
 8005424:	4650      	mov	r0, sl
 8005426:	f000 fa9b 	bl	8005960 <_free_r>
 800542a:	e7c8      	b.n	80053be <__ssputs_r+0x46>

0800542c <_svfiprintf_r>:
 800542c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005430:	461d      	mov	r5, r3
 8005432:	898b      	ldrh	r3, [r1, #12]
 8005434:	061f      	lsls	r7, r3, #24
 8005436:	b09d      	sub	sp, #116	; 0x74
 8005438:	4680      	mov	r8, r0
 800543a:	460c      	mov	r4, r1
 800543c:	4616      	mov	r6, r2
 800543e:	d50f      	bpl.n	8005460 <_svfiprintf_r+0x34>
 8005440:	690b      	ldr	r3, [r1, #16]
 8005442:	b96b      	cbnz	r3, 8005460 <_svfiprintf_r+0x34>
 8005444:	2140      	movs	r1, #64	; 0x40
 8005446:	f000 fad9 	bl	80059fc <_malloc_r>
 800544a:	6020      	str	r0, [r4, #0]
 800544c:	6120      	str	r0, [r4, #16]
 800544e:	b928      	cbnz	r0, 800545c <_svfiprintf_r+0x30>
 8005450:	230c      	movs	r3, #12
 8005452:	f8c8 3000 	str.w	r3, [r8]
 8005456:	f04f 30ff 	mov.w	r0, #4294967295
 800545a:	e0c8      	b.n	80055ee <_svfiprintf_r+0x1c2>
 800545c:	2340      	movs	r3, #64	; 0x40
 800545e:	6163      	str	r3, [r4, #20]
 8005460:	2300      	movs	r3, #0
 8005462:	9309      	str	r3, [sp, #36]	; 0x24
 8005464:	2320      	movs	r3, #32
 8005466:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800546a:	2330      	movs	r3, #48	; 0x30
 800546c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005470:	9503      	str	r5, [sp, #12]
 8005472:	f04f 0b01 	mov.w	fp, #1
 8005476:	4637      	mov	r7, r6
 8005478:	463d      	mov	r5, r7
 800547a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800547e:	b10b      	cbz	r3, 8005484 <_svfiprintf_r+0x58>
 8005480:	2b25      	cmp	r3, #37	; 0x25
 8005482:	d13e      	bne.n	8005502 <_svfiprintf_r+0xd6>
 8005484:	ebb7 0a06 	subs.w	sl, r7, r6
 8005488:	d00b      	beq.n	80054a2 <_svfiprintf_r+0x76>
 800548a:	4653      	mov	r3, sl
 800548c:	4632      	mov	r2, r6
 800548e:	4621      	mov	r1, r4
 8005490:	4640      	mov	r0, r8
 8005492:	f7ff ff71 	bl	8005378 <__ssputs_r>
 8005496:	3001      	adds	r0, #1
 8005498:	f000 80a4 	beq.w	80055e4 <_svfiprintf_r+0x1b8>
 800549c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800549e:	4453      	add	r3, sl
 80054a0:	9309      	str	r3, [sp, #36]	; 0x24
 80054a2:	783b      	ldrb	r3, [r7, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f000 809d 	beq.w	80055e4 <_svfiprintf_r+0x1b8>
 80054aa:	2300      	movs	r3, #0
 80054ac:	f04f 32ff 	mov.w	r2, #4294967295
 80054b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054b4:	9304      	str	r3, [sp, #16]
 80054b6:	9307      	str	r3, [sp, #28]
 80054b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054bc:	931a      	str	r3, [sp, #104]	; 0x68
 80054be:	462f      	mov	r7, r5
 80054c0:	2205      	movs	r2, #5
 80054c2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80054c6:	4850      	ldr	r0, [pc, #320]	; (8005608 <_svfiprintf_r+0x1dc>)
 80054c8:	f7fa fe92 	bl	80001f0 <memchr>
 80054cc:	9b04      	ldr	r3, [sp, #16]
 80054ce:	b9d0      	cbnz	r0, 8005506 <_svfiprintf_r+0xda>
 80054d0:	06d9      	lsls	r1, r3, #27
 80054d2:	bf44      	itt	mi
 80054d4:	2220      	movmi	r2, #32
 80054d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80054da:	071a      	lsls	r2, r3, #28
 80054dc:	bf44      	itt	mi
 80054de:	222b      	movmi	r2, #43	; 0x2b
 80054e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80054e4:	782a      	ldrb	r2, [r5, #0]
 80054e6:	2a2a      	cmp	r2, #42	; 0x2a
 80054e8:	d015      	beq.n	8005516 <_svfiprintf_r+0xea>
 80054ea:	9a07      	ldr	r2, [sp, #28]
 80054ec:	462f      	mov	r7, r5
 80054ee:	2000      	movs	r0, #0
 80054f0:	250a      	movs	r5, #10
 80054f2:	4639      	mov	r1, r7
 80054f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054f8:	3b30      	subs	r3, #48	; 0x30
 80054fa:	2b09      	cmp	r3, #9
 80054fc:	d94d      	bls.n	800559a <_svfiprintf_r+0x16e>
 80054fe:	b1b8      	cbz	r0, 8005530 <_svfiprintf_r+0x104>
 8005500:	e00f      	b.n	8005522 <_svfiprintf_r+0xf6>
 8005502:	462f      	mov	r7, r5
 8005504:	e7b8      	b.n	8005478 <_svfiprintf_r+0x4c>
 8005506:	4a40      	ldr	r2, [pc, #256]	; (8005608 <_svfiprintf_r+0x1dc>)
 8005508:	1a80      	subs	r0, r0, r2
 800550a:	fa0b f000 	lsl.w	r0, fp, r0
 800550e:	4318      	orrs	r0, r3
 8005510:	9004      	str	r0, [sp, #16]
 8005512:	463d      	mov	r5, r7
 8005514:	e7d3      	b.n	80054be <_svfiprintf_r+0x92>
 8005516:	9a03      	ldr	r2, [sp, #12]
 8005518:	1d11      	adds	r1, r2, #4
 800551a:	6812      	ldr	r2, [r2, #0]
 800551c:	9103      	str	r1, [sp, #12]
 800551e:	2a00      	cmp	r2, #0
 8005520:	db01      	blt.n	8005526 <_svfiprintf_r+0xfa>
 8005522:	9207      	str	r2, [sp, #28]
 8005524:	e004      	b.n	8005530 <_svfiprintf_r+0x104>
 8005526:	4252      	negs	r2, r2
 8005528:	f043 0302 	orr.w	r3, r3, #2
 800552c:	9207      	str	r2, [sp, #28]
 800552e:	9304      	str	r3, [sp, #16]
 8005530:	783b      	ldrb	r3, [r7, #0]
 8005532:	2b2e      	cmp	r3, #46	; 0x2e
 8005534:	d10c      	bne.n	8005550 <_svfiprintf_r+0x124>
 8005536:	787b      	ldrb	r3, [r7, #1]
 8005538:	2b2a      	cmp	r3, #42	; 0x2a
 800553a:	d133      	bne.n	80055a4 <_svfiprintf_r+0x178>
 800553c:	9b03      	ldr	r3, [sp, #12]
 800553e:	1d1a      	adds	r2, r3, #4
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	9203      	str	r2, [sp, #12]
 8005544:	2b00      	cmp	r3, #0
 8005546:	bfb8      	it	lt
 8005548:	f04f 33ff 	movlt.w	r3, #4294967295
 800554c:	3702      	adds	r7, #2
 800554e:	9305      	str	r3, [sp, #20]
 8005550:	4d2e      	ldr	r5, [pc, #184]	; (800560c <_svfiprintf_r+0x1e0>)
 8005552:	7839      	ldrb	r1, [r7, #0]
 8005554:	2203      	movs	r2, #3
 8005556:	4628      	mov	r0, r5
 8005558:	f7fa fe4a 	bl	80001f0 <memchr>
 800555c:	b138      	cbz	r0, 800556e <_svfiprintf_r+0x142>
 800555e:	2340      	movs	r3, #64	; 0x40
 8005560:	1b40      	subs	r0, r0, r5
 8005562:	fa03 f000 	lsl.w	r0, r3, r0
 8005566:	9b04      	ldr	r3, [sp, #16]
 8005568:	4303      	orrs	r3, r0
 800556a:	3701      	adds	r7, #1
 800556c:	9304      	str	r3, [sp, #16]
 800556e:	7839      	ldrb	r1, [r7, #0]
 8005570:	4827      	ldr	r0, [pc, #156]	; (8005610 <_svfiprintf_r+0x1e4>)
 8005572:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005576:	2206      	movs	r2, #6
 8005578:	1c7e      	adds	r6, r7, #1
 800557a:	f7fa fe39 	bl	80001f0 <memchr>
 800557e:	2800      	cmp	r0, #0
 8005580:	d038      	beq.n	80055f4 <_svfiprintf_r+0x1c8>
 8005582:	4b24      	ldr	r3, [pc, #144]	; (8005614 <_svfiprintf_r+0x1e8>)
 8005584:	bb13      	cbnz	r3, 80055cc <_svfiprintf_r+0x1a0>
 8005586:	9b03      	ldr	r3, [sp, #12]
 8005588:	3307      	adds	r3, #7
 800558a:	f023 0307 	bic.w	r3, r3, #7
 800558e:	3308      	adds	r3, #8
 8005590:	9303      	str	r3, [sp, #12]
 8005592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005594:	444b      	add	r3, r9
 8005596:	9309      	str	r3, [sp, #36]	; 0x24
 8005598:	e76d      	b.n	8005476 <_svfiprintf_r+0x4a>
 800559a:	fb05 3202 	mla	r2, r5, r2, r3
 800559e:	2001      	movs	r0, #1
 80055a0:	460f      	mov	r7, r1
 80055a2:	e7a6      	b.n	80054f2 <_svfiprintf_r+0xc6>
 80055a4:	2300      	movs	r3, #0
 80055a6:	3701      	adds	r7, #1
 80055a8:	9305      	str	r3, [sp, #20]
 80055aa:	4619      	mov	r1, r3
 80055ac:	250a      	movs	r5, #10
 80055ae:	4638      	mov	r0, r7
 80055b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055b4:	3a30      	subs	r2, #48	; 0x30
 80055b6:	2a09      	cmp	r2, #9
 80055b8:	d903      	bls.n	80055c2 <_svfiprintf_r+0x196>
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d0c8      	beq.n	8005550 <_svfiprintf_r+0x124>
 80055be:	9105      	str	r1, [sp, #20]
 80055c0:	e7c6      	b.n	8005550 <_svfiprintf_r+0x124>
 80055c2:	fb05 2101 	mla	r1, r5, r1, r2
 80055c6:	2301      	movs	r3, #1
 80055c8:	4607      	mov	r7, r0
 80055ca:	e7f0      	b.n	80055ae <_svfiprintf_r+0x182>
 80055cc:	ab03      	add	r3, sp, #12
 80055ce:	9300      	str	r3, [sp, #0]
 80055d0:	4622      	mov	r2, r4
 80055d2:	4b11      	ldr	r3, [pc, #68]	; (8005618 <_svfiprintf_r+0x1ec>)
 80055d4:	a904      	add	r1, sp, #16
 80055d6:	4640      	mov	r0, r8
 80055d8:	f3af 8000 	nop.w
 80055dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80055e0:	4681      	mov	r9, r0
 80055e2:	d1d6      	bne.n	8005592 <_svfiprintf_r+0x166>
 80055e4:	89a3      	ldrh	r3, [r4, #12]
 80055e6:	065b      	lsls	r3, r3, #25
 80055e8:	f53f af35 	bmi.w	8005456 <_svfiprintf_r+0x2a>
 80055ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055ee:	b01d      	add	sp, #116	; 0x74
 80055f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055f4:	ab03      	add	r3, sp, #12
 80055f6:	9300      	str	r3, [sp, #0]
 80055f8:	4622      	mov	r2, r4
 80055fa:	4b07      	ldr	r3, [pc, #28]	; (8005618 <_svfiprintf_r+0x1ec>)
 80055fc:	a904      	add	r1, sp, #16
 80055fe:	4640      	mov	r0, r8
 8005600:	f000 f882 	bl	8005708 <_printf_i>
 8005604:	e7ea      	b.n	80055dc <_svfiprintf_r+0x1b0>
 8005606:	bf00      	nop
 8005608:	08005c74 	.word	0x08005c74
 800560c:	08005c7a 	.word	0x08005c7a
 8005610:	08005c7e 	.word	0x08005c7e
 8005614:	00000000 	.word	0x00000000
 8005618:	08005379 	.word	0x08005379

0800561c <_printf_common>:
 800561c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005620:	4691      	mov	r9, r2
 8005622:	461f      	mov	r7, r3
 8005624:	688a      	ldr	r2, [r1, #8]
 8005626:	690b      	ldr	r3, [r1, #16]
 8005628:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800562c:	4293      	cmp	r3, r2
 800562e:	bfb8      	it	lt
 8005630:	4613      	movlt	r3, r2
 8005632:	f8c9 3000 	str.w	r3, [r9]
 8005636:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800563a:	4606      	mov	r6, r0
 800563c:	460c      	mov	r4, r1
 800563e:	b112      	cbz	r2, 8005646 <_printf_common+0x2a>
 8005640:	3301      	adds	r3, #1
 8005642:	f8c9 3000 	str.w	r3, [r9]
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	0699      	lsls	r1, r3, #26
 800564a:	bf42      	ittt	mi
 800564c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005650:	3302      	addmi	r3, #2
 8005652:	f8c9 3000 	strmi.w	r3, [r9]
 8005656:	6825      	ldr	r5, [r4, #0]
 8005658:	f015 0506 	ands.w	r5, r5, #6
 800565c:	d107      	bne.n	800566e <_printf_common+0x52>
 800565e:	f104 0a19 	add.w	sl, r4, #25
 8005662:	68e3      	ldr	r3, [r4, #12]
 8005664:	f8d9 2000 	ldr.w	r2, [r9]
 8005668:	1a9b      	subs	r3, r3, r2
 800566a:	42ab      	cmp	r3, r5
 800566c:	dc28      	bgt.n	80056c0 <_printf_common+0xa4>
 800566e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005672:	6822      	ldr	r2, [r4, #0]
 8005674:	3300      	adds	r3, #0
 8005676:	bf18      	it	ne
 8005678:	2301      	movne	r3, #1
 800567a:	0692      	lsls	r2, r2, #26
 800567c:	d42d      	bmi.n	80056da <_printf_common+0xbe>
 800567e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005682:	4639      	mov	r1, r7
 8005684:	4630      	mov	r0, r6
 8005686:	47c0      	blx	r8
 8005688:	3001      	adds	r0, #1
 800568a:	d020      	beq.n	80056ce <_printf_common+0xb2>
 800568c:	6823      	ldr	r3, [r4, #0]
 800568e:	68e5      	ldr	r5, [r4, #12]
 8005690:	f8d9 2000 	ldr.w	r2, [r9]
 8005694:	f003 0306 	and.w	r3, r3, #6
 8005698:	2b04      	cmp	r3, #4
 800569a:	bf08      	it	eq
 800569c:	1aad      	subeq	r5, r5, r2
 800569e:	68a3      	ldr	r3, [r4, #8]
 80056a0:	6922      	ldr	r2, [r4, #16]
 80056a2:	bf0c      	ite	eq
 80056a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056a8:	2500      	movne	r5, #0
 80056aa:	4293      	cmp	r3, r2
 80056ac:	bfc4      	itt	gt
 80056ae:	1a9b      	subgt	r3, r3, r2
 80056b0:	18ed      	addgt	r5, r5, r3
 80056b2:	f04f 0900 	mov.w	r9, #0
 80056b6:	341a      	adds	r4, #26
 80056b8:	454d      	cmp	r5, r9
 80056ba:	d11a      	bne.n	80056f2 <_printf_common+0xd6>
 80056bc:	2000      	movs	r0, #0
 80056be:	e008      	b.n	80056d2 <_printf_common+0xb6>
 80056c0:	2301      	movs	r3, #1
 80056c2:	4652      	mov	r2, sl
 80056c4:	4639      	mov	r1, r7
 80056c6:	4630      	mov	r0, r6
 80056c8:	47c0      	blx	r8
 80056ca:	3001      	adds	r0, #1
 80056cc:	d103      	bne.n	80056d6 <_printf_common+0xba>
 80056ce:	f04f 30ff 	mov.w	r0, #4294967295
 80056d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056d6:	3501      	adds	r5, #1
 80056d8:	e7c3      	b.n	8005662 <_printf_common+0x46>
 80056da:	18e1      	adds	r1, r4, r3
 80056dc:	1c5a      	adds	r2, r3, #1
 80056de:	2030      	movs	r0, #48	; 0x30
 80056e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056e4:	4422      	add	r2, r4
 80056e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056ee:	3302      	adds	r3, #2
 80056f0:	e7c5      	b.n	800567e <_printf_common+0x62>
 80056f2:	2301      	movs	r3, #1
 80056f4:	4622      	mov	r2, r4
 80056f6:	4639      	mov	r1, r7
 80056f8:	4630      	mov	r0, r6
 80056fa:	47c0      	blx	r8
 80056fc:	3001      	adds	r0, #1
 80056fe:	d0e6      	beq.n	80056ce <_printf_common+0xb2>
 8005700:	f109 0901 	add.w	r9, r9, #1
 8005704:	e7d8      	b.n	80056b8 <_printf_common+0x9c>
	...

08005708 <_printf_i>:
 8005708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800570c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005710:	460c      	mov	r4, r1
 8005712:	7e09      	ldrb	r1, [r1, #24]
 8005714:	b085      	sub	sp, #20
 8005716:	296e      	cmp	r1, #110	; 0x6e
 8005718:	4617      	mov	r7, r2
 800571a:	4606      	mov	r6, r0
 800571c:	4698      	mov	r8, r3
 800571e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005720:	f000 80b3 	beq.w	800588a <_printf_i+0x182>
 8005724:	d822      	bhi.n	800576c <_printf_i+0x64>
 8005726:	2963      	cmp	r1, #99	; 0x63
 8005728:	d036      	beq.n	8005798 <_printf_i+0x90>
 800572a:	d80a      	bhi.n	8005742 <_printf_i+0x3a>
 800572c:	2900      	cmp	r1, #0
 800572e:	f000 80b9 	beq.w	80058a4 <_printf_i+0x19c>
 8005732:	2958      	cmp	r1, #88	; 0x58
 8005734:	f000 8083 	beq.w	800583e <_printf_i+0x136>
 8005738:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800573c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005740:	e032      	b.n	80057a8 <_printf_i+0xa0>
 8005742:	2964      	cmp	r1, #100	; 0x64
 8005744:	d001      	beq.n	800574a <_printf_i+0x42>
 8005746:	2969      	cmp	r1, #105	; 0x69
 8005748:	d1f6      	bne.n	8005738 <_printf_i+0x30>
 800574a:	6820      	ldr	r0, [r4, #0]
 800574c:	6813      	ldr	r3, [r2, #0]
 800574e:	0605      	lsls	r5, r0, #24
 8005750:	f103 0104 	add.w	r1, r3, #4
 8005754:	d52a      	bpl.n	80057ac <_printf_i+0xa4>
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6011      	str	r1, [r2, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	da03      	bge.n	8005766 <_printf_i+0x5e>
 800575e:	222d      	movs	r2, #45	; 0x2d
 8005760:	425b      	negs	r3, r3
 8005762:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005766:	486f      	ldr	r0, [pc, #444]	; (8005924 <_printf_i+0x21c>)
 8005768:	220a      	movs	r2, #10
 800576a:	e039      	b.n	80057e0 <_printf_i+0xd8>
 800576c:	2973      	cmp	r1, #115	; 0x73
 800576e:	f000 809d 	beq.w	80058ac <_printf_i+0x1a4>
 8005772:	d808      	bhi.n	8005786 <_printf_i+0x7e>
 8005774:	296f      	cmp	r1, #111	; 0x6f
 8005776:	d020      	beq.n	80057ba <_printf_i+0xb2>
 8005778:	2970      	cmp	r1, #112	; 0x70
 800577a:	d1dd      	bne.n	8005738 <_printf_i+0x30>
 800577c:	6823      	ldr	r3, [r4, #0]
 800577e:	f043 0320 	orr.w	r3, r3, #32
 8005782:	6023      	str	r3, [r4, #0]
 8005784:	e003      	b.n	800578e <_printf_i+0x86>
 8005786:	2975      	cmp	r1, #117	; 0x75
 8005788:	d017      	beq.n	80057ba <_printf_i+0xb2>
 800578a:	2978      	cmp	r1, #120	; 0x78
 800578c:	d1d4      	bne.n	8005738 <_printf_i+0x30>
 800578e:	2378      	movs	r3, #120	; 0x78
 8005790:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005794:	4864      	ldr	r0, [pc, #400]	; (8005928 <_printf_i+0x220>)
 8005796:	e055      	b.n	8005844 <_printf_i+0x13c>
 8005798:	6813      	ldr	r3, [r2, #0]
 800579a:	1d19      	adds	r1, r3, #4
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	6011      	str	r1, [r2, #0]
 80057a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057a8:	2301      	movs	r3, #1
 80057aa:	e08c      	b.n	80058c6 <_printf_i+0x1be>
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	6011      	str	r1, [r2, #0]
 80057b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80057b4:	bf18      	it	ne
 80057b6:	b21b      	sxthne	r3, r3
 80057b8:	e7cf      	b.n	800575a <_printf_i+0x52>
 80057ba:	6813      	ldr	r3, [r2, #0]
 80057bc:	6825      	ldr	r5, [r4, #0]
 80057be:	1d18      	adds	r0, r3, #4
 80057c0:	6010      	str	r0, [r2, #0]
 80057c2:	0628      	lsls	r0, r5, #24
 80057c4:	d501      	bpl.n	80057ca <_printf_i+0xc2>
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	e002      	b.n	80057d0 <_printf_i+0xc8>
 80057ca:	0668      	lsls	r0, r5, #25
 80057cc:	d5fb      	bpl.n	80057c6 <_printf_i+0xbe>
 80057ce:	881b      	ldrh	r3, [r3, #0]
 80057d0:	4854      	ldr	r0, [pc, #336]	; (8005924 <_printf_i+0x21c>)
 80057d2:	296f      	cmp	r1, #111	; 0x6f
 80057d4:	bf14      	ite	ne
 80057d6:	220a      	movne	r2, #10
 80057d8:	2208      	moveq	r2, #8
 80057da:	2100      	movs	r1, #0
 80057dc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057e0:	6865      	ldr	r5, [r4, #4]
 80057e2:	60a5      	str	r5, [r4, #8]
 80057e4:	2d00      	cmp	r5, #0
 80057e6:	f2c0 8095 	blt.w	8005914 <_printf_i+0x20c>
 80057ea:	6821      	ldr	r1, [r4, #0]
 80057ec:	f021 0104 	bic.w	r1, r1, #4
 80057f0:	6021      	str	r1, [r4, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d13d      	bne.n	8005872 <_printf_i+0x16a>
 80057f6:	2d00      	cmp	r5, #0
 80057f8:	f040 808e 	bne.w	8005918 <_printf_i+0x210>
 80057fc:	4665      	mov	r5, ip
 80057fe:	2a08      	cmp	r2, #8
 8005800:	d10b      	bne.n	800581a <_printf_i+0x112>
 8005802:	6823      	ldr	r3, [r4, #0]
 8005804:	07db      	lsls	r3, r3, #31
 8005806:	d508      	bpl.n	800581a <_printf_i+0x112>
 8005808:	6923      	ldr	r3, [r4, #16]
 800580a:	6862      	ldr	r2, [r4, #4]
 800580c:	429a      	cmp	r2, r3
 800580e:	bfde      	ittt	le
 8005810:	2330      	movle	r3, #48	; 0x30
 8005812:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005816:	f105 35ff 	addle.w	r5, r5, #4294967295
 800581a:	ebac 0305 	sub.w	r3, ip, r5
 800581e:	6123      	str	r3, [r4, #16]
 8005820:	f8cd 8000 	str.w	r8, [sp]
 8005824:	463b      	mov	r3, r7
 8005826:	aa03      	add	r2, sp, #12
 8005828:	4621      	mov	r1, r4
 800582a:	4630      	mov	r0, r6
 800582c:	f7ff fef6 	bl	800561c <_printf_common>
 8005830:	3001      	adds	r0, #1
 8005832:	d14d      	bne.n	80058d0 <_printf_i+0x1c8>
 8005834:	f04f 30ff 	mov.w	r0, #4294967295
 8005838:	b005      	add	sp, #20
 800583a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800583e:	4839      	ldr	r0, [pc, #228]	; (8005924 <_printf_i+0x21c>)
 8005840:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005844:	6813      	ldr	r3, [r2, #0]
 8005846:	6821      	ldr	r1, [r4, #0]
 8005848:	1d1d      	adds	r5, r3, #4
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6015      	str	r5, [r2, #0]
 800584e:	060a      	lsls	r2, r1, #24
 8005850:	d50b      	bpl.n	800586a <_printf_i+0x162>
 8005852:	07ca      	lsls	r2, r1, #31
 8005854:	bf44      	itt	mi
 8005856:	f041 0120 	orrmi.w	r1, r1, #32
 800585a:	6021      	strmi	r1, [r4, #0]
 800585c:	b91b      	cbnz	r3, 8005866 <_printf_i+0x15e>
 800585e:	6822      	ldr	r2, [r4, #0]
 8005860:	f022 0220 	bic.w	r2, r2, #32
 8005864:	6022      	str	r2, [r4, #0]
 8005866:	2210      	movs	r2, #16
 8005868:	e7b7      	b.n	80057da <_printf_i+0xd2>
 800586a:	064d      	lsls	r5, r1, #25
 800586c:	bf48      	it	mi
 800586e:	b29b      	uxthmi	r3, r3
 8005870:	e7ef      	b.n	8005852 <_printf_i+0x14a>
 8005872:	4665      	mov	r5, ip
 8005874:	fbb3 f1f2 	udiv	r1, r3, r2
 8005878:	fb02 3311 	mls	r3, r2, r1, r3
 800587c:	5cc3      	ldrb	r3, [r0, r3]
 800587e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005882:	460b      	mov	r3, r1
 8005884:	2900      	cmp	r1, #0
 8005886:	d1f5      	bne.n	8005874 <_printf_i+0x16c>
 8005888:	e7b9      	b.n	80057fe <_printf_i+0xf6>
 800588a:	6813      	ldr	r3, [r2, #0]
 800588c:	6825      	ldr	r5, [r4, #0]
 800588e:	6961      	ldr	r1, [r4, #20]
 8005890:	1d18      	adds	r0, r3, #4
 8005892:	6010      	str	r0, [r2, #0]
 8005894:	0628      	lsls	r0, r5, #24
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	d501      	bpl.n	800589e <_printf_i+0x196>
 800589a:	6019      	str	r1, [r3, #0]
 800589c:	e002      	b.n	80058a4 <_printf_i+0x19c>
 800589e:	066a      	lsls	r2, r5, #25
 80058a0:	d5fb      	bpl.n	800589a <_printf_i+0x192>
 80058a2:	8019      	strh	r1, [r3, #0]
 80058a4:	2300      	movs	r3, #0
 80058a6:	6123      	str	r3, [r4, #16]
 80058a8:	4665      	mov	r5, ip
 80058aa:	e7b9      	b.n	8005820 <_printf_i+0x118>
 80058ac:	6813      	ldr	r3, [r2, #0]
 80058ae:	1d19      	adds	r1, r3, #4
 80058b0:	6011      	str	r1, [r2, #0]
 80058b2:	681d      	ldr	r5, [r3, #0]
 80058b4:	6862      	ldr	r2, [r4, #4]
 80058b6:	2100      	movs	r1, #0
 80058b8:	4628      	mov	r0, r5
 80058ba:	f7fa fc99 	bl	80001f0 <memchr>
 80058be:	b108      	cbz	r0, 80058c4 <_printf_i+0x1bc>
 80058c0:	1b40      	subs	r0, r0, r5
 80058c2:	6060      	str	r0, [r4, #4]
 80058c4:	6863      	ldr	r3, [r4, #4]
 80058c6:	6123      	str	r3, [r4, #16]
 80058c8:	2300      	movs	r3, #0
 80058ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058ce:	e7a7      	b.n	8005820 <_printf_i+0x118>
 80058d0:	6923      	ldr	r3, [r4, #16]
 80058d2:	462a      	mov	r2, r5
 80058d4:	4639      	mov	r1, r7
 80058d6:	4630      	mov	r0, r6
 80058d8:	47c0      	blx	r8
 80058da:	3001      	adds	r0, #1
 80058dc:	d0aa      	beq.n	8005834 <_printf_i+0x12c>
 80058de:	6823      	ldr	r3, [r4, #0]
 80058e0:	079b      	lsls	r3, r3, #30
 80058e2:	d413      	bmi.n	800590c <_printf_i+0x204>
 80058e4:	68e0      	ldr	r0, [r4, #12]
 80058e6:	9b03      	ldr	r3, [sp, #12]
 80058e8:	4298      	cmp	r0, r3
 80058ea:	bfb8      	it	lt
 80058ec:	4618      	movlt	r0, r3
 80058ee:	e7a3      	b.n	8005838 <_printf_i+0x130>
 80058f0:	2301      	movs	r3, #1
 80058f2:	464a      	mov	r2, r9
 80058f4:	4639      	mov	r1, r7
 80058f6:	4630      	mov	r0, r6
 80058f8:	47c0      	blx	r8
 80058fa:	3001      	adds	r0, #1
 80058fc:	d09a      	beq.n	8005834 <_printf_i+0x12c>
 80058fe:	3501      	adds	r5, #1
 8005900:	68e3      	ldr	r3, [r4, #12]
 8005902:	9a03      	ldr	r2, [sp, #12]
 8005904:	1a9b      	subs	r3, r3, r2
 8005906:	42ab      	cmp	r3, r5
 8005908:	dcf2      	bgt.n	80058f0 <_printf_i+0x1e8>
 800590a:	e7eb      	b.n	80058e4 <_printf_i+0x1dc>
 800590c:	2500      	movs	r5, #0
 800590e:	f104 0919 	add.w	r9, r4, #25
 8005912:	e7f5      	b.n	8005900 <_printf_i+0x1f8>
 8005914:	2b00      	cmp	r3, #0
 8005916:	d1ac      	bne.n	8005872 <_printf_i+0x16a>
 8005918:	7803      	ldrb	r3, [r0, #0]
 800591a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800591e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005922:	e76c      	b.n	80057fe <_printf_i+0xf6>
 8005924:	08005c85 	.word	0x08005c85
 8005928:	08005c96 	.word	0x08005c96

0800592c <memmove>:
 800592c:	4288      	cmp	r0, r1
 800592e:	b510      	push	{r4, lr}
 8005930:	eb01 0302 	add.w	r3, r1, r2
 8005934:	d807      	bhi.n	8005946 <memmove+0x1a>
 8005936:	1e42      	subs	r2, r0, #1
 8005938:	4299      	cmp	r1, r3
 800593a:	d00a      	beq.n	8005952 <memmove+0x26>
 800593c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005940:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005944:	e7f8      	b.n	8005938 <memmove+0xc>
 8005946:	4283      	cmp	r3, r0
 8005948:	d9f5      	bls.n	8005936 <memmove+0xa>
 800594a:	1881      	adds	r1, r0, r2
 800594c:	1ad2      	subs	r2, r2, r3
 800594e:	42d3      	cmn	r3, r2
 8005950:	d100      	bne.n	8005954 <memmove+0x28>
 8005952:	bd10      	pop	{r4, pc}
 8005954:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005958:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800595c:	e7f7      	b.n	800594e <memmove+0x22>
	...

08005960 <_free_r>:
 8005960:	b538      	push	{r3, r4, r5, lr}
 8005962:	4605      	mov	r5, r0
 8005964:	2900      	cmp	r1, #0
 8005966:	d045      	beq.n	80059f4 <_free_r+0x94>
 8005968:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800596c:	1f0c      	subs	r4, r1, #4
 800596e:	2b00      	cmp	r3, #0
 8005970:	bfb8      	it	lt
 8005972:	18e4      	addlt	r4, r4, r3
 8005974:	f000 f8d2 	bl	8005b1c <__malloc_lock>
 8005978:	4a1f      	ldr	r2, [pc, #124]	; (80059f8 <_free_r+0x98>)
 800597a:	6813      	ldr	r3, [r2, #0]
 800597c:	4610      	mov	r0, r2
 800597e:	b933      	cbnz	r3, 800598e <_free_r+0x2e>
 8005980:	6063      	str	r3, [r4, #4]
 8005982:	6014      	str	r4, [r2, #0]
 8005984:	4628      	mov	r0, r5
 8005986:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800598a:	f000 b8c8 	b.w	8005b1e <__malloc_unlock>
 800598e:	42a3      	cmp	r3, r4
 8005990:	d90c      	bls.n	80059ac <_free_r+0x4c>
 8005992:	6821      	ldr	r1, [r4, #0]
 8005994:	1862      	adds	r2, r4, r1
 8005996:	4293      	cmp	r3, r2
 8005998:	bf04      	itt	eq
 800599a:	681a      	ldreq	r2, [r3, #0]
 800599c:	685b      	ldreq	r3, [r3, #4]
 800599e:	6063      	str	r3, [r4, #4]
 80059a0:	bf04      	itt	eq
 80059a2:	1852      	addeq	r2, r2, r1
 80059a4:	6022      	streq	r2, [r4, #0]
 80059a6:	6004      	str	r4, [r0, #0]
 80059a8:	e7ec      	b.n	8005984 <_free_r+0x24>
 80059aa:	4613      	mov	r3, r2
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	b10a      	cbz	r2, 80059b4 <_free_r+0x54>
 80059b0:	42a2      	cmp	r2, r4
 80059b2:	d9fa      	bls.n	80059aa <_free_r+0x4a>
 80059b4:	6819      	ldr	r1, [r3, #0]
 80059b6:	1858      	adds	r0, r3, r1
 80059b8:	42a0      	cmp	r0, r4
 80059ba:	d10b      	bne.n	80059d4 <_free_r+0x74>
 80059bc:	6820      	ldr	r0, [r4, #0]
 80059be:	4401      	add	r1, r0
 80059c0:	1858      	adds	r0, r3, r1
 80059c2:	4282      	cmp	r2, r0
 80059c4:	6019      	str	r1, [r3, #0]
 80059c6:	d1dd      	bne.n	8005984 <_free_r+0x24>
 80059c8:	6810      	ldr	r0, [r2, #0]
 80059ca:	6852      	ldr	r2, [r2, #4]
 80059cc:	605a      	str	r2, [r3, #4]
 80059ce:	4401      	add	r1, r0
 80059d0:	6019      	str	r1, [r3, #0]
 80059d2:	e7d7      	b.n	8005984 <_free_r+0x24>
 80059d4:	d902      	bls.n	80059dc <_free_r+0x7c>
 80059d6:	230c      	movs	r3, #12
 80059d8:	602b      	str	r3, [r5, #0]
 80059da:	e7d3      	b.n	8005984 <_free_r+0x24>
 80059dc:	6820      	ldr	r0, [r4, #0]
 80059de:	1821      	adds	r1, r4, r0
 80059e0:	428a      	cmp	r2, r1
 80059e2:	bf04      	itt	eq
 80059e4:	6811      	ldreq	r1, [r2, #0]
 80059e6:	6852      	ldreq	r2, [r2, #4]
 80059e8:	6062      	str	r2, [r4, #4]
 80059ea:	bf04      	itt	eq
 80059ec:	1809      	addeq	r1, r1, r0
 80059ee:	6021      	streq	r1, [r4, #0]
 80059f0:	605c      	str	r4, [r3, #4]
 80059f2:	e7c7      	b.n	8005984 <_free_r+0x24>
 80059f4:	bd38      	pop	{r3, r4, r5, pc}
 80059f6:	bf00      	nop
 80059f8:	20004584 	.word	0x20004584

080059fc <_malloc_r>:
 80059fc:	b570      	push	{r4, r5, r6, lr}
 80059fe:	1ccd      	adds	r5, r1, #3
 8005a00:	f025 0503 	bic.w	r5, r5, #3
 8005a04:	3508      	adds	r5, #8
 8005a06:	2d0c      	cmp	r5, #12
 8005a08:	bf38      	it	cc
 8005a0a:	250c      	movcc	r5, #12
 8005a0c:	2d00      	cmp	r5, #0
 8005a0e:	4606      	mov	r6, r0
 8005a10:	db01      	blt.n	8005a16 <_malloc_r+0x1a>
 8005a12:	42a9      	cmp	r1, r5
 8005a14:	d903      	bls.n	8005a1e <_malloc_r+0x22>
 8005a16:	230c      	movs	r3, #12
 8005a18:	6033      	str	r3, [r6, #0]
 8005a1a:	2000      	movs	r0, #0
 8005a1c:	bd70      	pop	{r4, r5, r6, pc}
 8005a1e:	f000 f87d 	bl	8005b1c <__malloc_lock>
 8005a22:	4a21      	ldr	r2, [pc, #132]	; (8005aa8 <_malloc_r+0xac>)
 8005a24:	6814      	ldr	r4, [r2, #0]
 8005a26:	4621      	mov	r1, r4
 8005a28:	b991      	cbnz	r1, 8005a50 <_malloc_r+0x54>
 8005a2a:	4c20      	ldr	r4, [pc, #128]	; (8005aac <_malloc_r+0xb0>)
 8005a2c:	6823      	ldr	r3, [r4, #0]
 8005a2e:	b91b      	cbnz	r3, 8005a38 <_malloc_r+0x3c>
 8005a30:	4630      	mov	r0, r6
 8005a32:	f000 f863 	bl	8005afc <_sbrk_r>
 8005a36:	6020      	str	r0, [r4, #0]
 8005a38:	4629      	mov	r1, r5
 8005a3a:	4630      	mov	r0, r6
 8005a3c:	f000 f85e 	bl	8005afc <_sbrk_r>
 8005a40:	1c43      	adds	r3, r0, #1
 8005a42:	d124      	bne.n	8005a8e <_malloc_r+0x92>
 8005a44:	230c      	movs	r3, #12
 8005a46:	6033      	str	r3, [r6, #0]
 8005a48:	4630      	mov	r0, r6
 8005a4a:	f000 f868 	bl	8005b1e <__malloc_unlock>
 8005a4e:	e7e4      	b.n	8005a1a <_malloc_r+0x1e>
 8005a50:	680b      	ldr	r3, [r1, #0]
 8005a52:	1b5b      	subs	r3, r3, r5
 8005a54:	d418      	bmi.n	8005a88 <_malloc_r+0x8c>
 8005a56:	2b0b      	cmp	r3, #11
 8005a58:	d90f      	bls.n	8005a7a <_malloc_r+0x7e>
 8005a5a:	600b      	str	r3, [r1, #0]
 8005a5c:	50cd      	str	r5, [r1, r3]
 8005a5e:	18cc      	adds	r4, r1, r3
 8005a60:	4630      	mov	r0, r6
 8005a62:	f000 f85c 	bl	8005b1e <__malloc_unlock>
 8005a66:	f104 000b 	add.w	r0, r4, #11
 8005a6a:	1d23      	adds	r3, r4, #4
 8005a6c:	f020 0007 	bic.w	r0, r0, #7
 8005a70:	1ac3      	subs	r3, r0, r3
 8005a72:	d0d3      	beq.n	8005a1c <_malloc_r+0x20>
 8005a74:	425a      	negs	r2, r3
 8005a76:	50e2      	str	r2, [r4, r3]
 8005a78:	e7d0      	b.n	8005a1c <_malloc_r+0x20>
 8005a7a:	428c      	cmp	r4, r1
 8005a7c:	684b      	ldr	r3, [r1, #4]
 8005a7e:	bf16      	itet	ne
 8005a80:	6063      	strne	r3, [r4, #4]
 8005a82:	6013      	streq	r3, [r2, #0]
 8005a84:	460c      	movne	r4, r1
 8005a86:	e7eb      	b.n	8005a60 <_malloc_r+0x64>
 8005a88:	460c      	mov	r4, r1
 8005a8a:	6849      	ldr	r1, [r1, #4]
 8005a8c:	e7cc      	b.n	8005a28 <_malloc_r+0x2c>
 8005a8e:	1cc4      	adds	r4, r0, #3
 8005a90:	f024 0403 	bic.w	r4, r4, #3
 8005a94:	42a0      	cmp	r0, r4
 8005a96:	d005      	beq.n	8005aa4 <_malloc_r+0xa8>
 8005a98:	1a21      	subs	r1, r4, r0
 8005a9a:	4630      	mov	r0, r6
 8005a9c:	f000 f82e 	bl	8005afc <_sbrk_r>
 8005aa0:	3001      	adds	r0, #1
 8005aa2:	d0cf      	beq.n	8005a44 <_malloc_r+0x48>
 8005aa4:	6025      	str	r5, [r4, #0]
 8005aa6:	e7db      	b.n	8005a60 <_malloc_r+0x64>
 8005aa8:	20004584 	.word	0x20004584
 8005aac:	20004588 	.word	0x20004588

08005ab0 <_realloc_r>:
 8005ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab2:	4607      	mov	r7, r0
 8005ab4:	4614      	mov	r4, r2
 8005ab6:	460e      	mov	r6, r1
 8005ab8:	b921      	cbnz	r1, 8005ac4 <_realloc_r+0x14>
 8005aba:	4611      	mov	r1, r2
 8005abc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005ac0:	f7ff bf9c 	b.w	80059fc <_malloc_r>
 8005ac4:	b922      	cbnz	r2, 8005ad0 <_realloc_r+0x20>
 8005ac6:	f7ff ff4b 	bl	8005960 <_free_r>
 8005aca:	4625      	mov	r5, r4
 8005acc:	4628      	mov	r0, r5
 8005ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ad0:	f000 f826 	bl	8005b20 <_malloc_usable_size_r>
 8005ad4:	42a0      	cmp	r0, r4
 8005ad6:	d20f      	bcs.n	8005af8 <_realloc_r+0x48>
 8005ad8:	4621      	mov	r1, r4
 8005ada:	4638      	mov	r0, r7
 8005adc:	f7ff ff8e 	bl	80059fc <_malloc_r>
 8005ae0:	4605      	mov	r5, r0
 8005ae2:	2800      	cmp	r0, #0
 8005ae4:	d0f2      	beq.n	8005acc <_realloc_r+0x1c>
 8005ae6:	4631      	mov	r1, r6
 8005ae8:	4622      	mov	r2, r4
 8005aea:	f7ff fc11 	bl	8005310 <memcpy>
 8005aee:	4631      	mov	r1, r6
 8005af0:	4638      	mov	r0, r7
 8005af2:	f7ff ff35 	bl	8005960 <_free_r>
 8005af6:	e7e9      	b.n	8005acc <_realloc_r+0x1c>
 8005af8:	4635      	mov	r5, r6
 8005afa:	e7e7      	b.n	8005acc <_realloc_r+0x1c>

08005afc <_sbrk_r>:
 8005afc:	b538      	push	{r3, r4, r5, lr}
 8005afe:	4c06      	ldr	r4, [pc, #24]	; (8005b18 <_sbrk_r+0x1c>)
 8005b00:	2300      	movs	r3, #0
 8005b02:	4605      	mov	r5, r0
 8005b04:	4608      	mov	r0, r1
 8005b06:	6023      	str	r3, [r4, #0]
 8005b08:	f7fb f85e 	bl	8000bc8 <_sbrk>
 8005b0c:	1c43      	adds	r3, r0, #1
 8005b0e:	d102      	bne.n	8005b16 <_sbrk_r+0x1a>
 8005b10:	6823      	ldr	r3, [r4, #0]
 8005b12:	b103      	cbz	r3, 8005b16 <_sbrk_r+0x1a>
 8005b14:	602b      	str	r3, [r5, #0]
 8005b16:	bd38      	pop	{r3, r4, r5, pc}
 8005b18:	20004630 	.word	0x20004630

08005b1c <__malloc_lock>:
 8005b1c:	4770      	bx	lr

08005b1e <__malloc_unlock>:
 8005b1e:	4770      	bx	lr

08005b20 <_malloc_usable_size_r>:
 8005b20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b24:	1f18      	subs	r0, r3, #4
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	bfbc      	itt	lt
 8005b2a:	580b      	ldrlt	r3, [r1, r0]
 8005b2c:	18c0      	addlt	r0, r0, r3
 8005b2e:	4770      	bx	lr

08005b30 <_init>:
 8005b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b32:	bf00      	nop
 8005b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b36:	bc08      	pop	{r3}
 8005b38:	469e      	mov	lr, r3
 8005b3a:	4770      	bx	lr

08005b3c <_fini>:
 8005b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b3e:	bf00      	nop
 8005b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b42:	bc08      	pop	{r3}
 8005b44:	469e      	mov	lr, r3
 8005b46:	4770      	bx	lr
